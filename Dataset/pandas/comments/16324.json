[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/300730284",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16324#issuecomment-300730284",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16324",
    "id": 300730284,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDczMDI4NA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-11T09:08:14Z",
    "updated_at": "2017-05-11T09:08:41Z",
    "author_association": "MEMBER",
    "body": "@jreback Did you post the wrong timings? As you show it is actually slower for the big one, and the same for the smaller one .."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/300741867",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16324#issuecomment-300741867",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16324",
    "id": 300741867,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDc0MTg2Nw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-11T09:54:28Z",
    "updated_at": "2017-05-11T09:54:28Z",
    "author_association": "MEMBER",
    "body": "Or are the timings of the PR compared to 0.19.2 timings? (I assumed master or 0.20.1 timings) And in that case, with this PR we are still considerably slower compared to 0.19.2 (after first indexing operation and hashtable creation)\r\n\r\nWhen I was testing it yesterday, I also assumed it was some trade-off on the size of the MI for the new hashtable based MultiIndexEngine, and the ObjectEngine. So I tried to find the good cut-off by varying the MI size, but I actually got systematically faster results with the Object engine, for MI's up to 1 million elements. \r\nSo I now repeated that exercise but using this PR, fixing the engine to one of both implementations instead of letting it depend on the size:\r\n\r\n```\r\nIn [16]: pd.MultiIndex.object_engine = False\r\n\r\nIn [17]: ts = []\r\n    ...: \r\n    ...: for n in [3, 10, 30, 100, 300, 1000]:\r\n    ...:     idx = pd.MultiIndex.from_product([np.arange(n), np.arange(n)])\r\n    ...:     key = idx.values[0]\r\n    ...:     t = %timeit -o idx.get_loc(key)\r\n    ...:     ts.append(t)\r\n    ...: \r\n    ...: \r\n100 loops, best of 3: 1.86 ms per loop\r\n1000 loops, best of 3: 1.98 ms per loop\r\n100 loops, best of 3: 2.28 ms per loop\r\n100 loops, best of 3: 1.97 ms per loop\r\nThe slowest run took 5.58 times longer than the fastest. This could mean that an intermediate result is being cached.\r\n100 loops, best of 3: 1.93 ms per loop\r\nThe slowest run took 89.39 times longer than the fastest. This could mean that an intermediate result is being cached.\r\n1000 loops, best of 3: 2.23 ms per loop\r\n\r\nIn [18]: pd.MultiIndex.object_engine = True\r\n\r\nIn [19]: ts2 = []\r\n    ...: \r\n    ...: for n in [3, 10, 30, 100, 300, 1000]:\r\n    ...:     idx = pd.MultiIndex.from_product([np.arange(n), np.arange(n)])\r\n    ...:     key = idx.values[0]\r\n    ...:     t = %timeit -o idx.get_loc(key)\r\n    ...:     ts2.append(t)\r\n    ...: \r\n    ...: \r\nThe slowest run took 52.39 times longer than the fastest. This could mean that an intermediate result is being cached.\r\n100000 loops, best of 3: 5.07 µs per loop\r\nThe slowest run took 45.32 times longer than the fastest. This could mean that an intermediate result is being cached.\r\n100000 loops, best of 3: 5.18 µs per loop\r\nThe slowest run took 65.73 times longer than the fastest. This could mean that an intermediate result is being cached.\r\n100000 loops, best of 3: 5.21 µs per loop\r\nThe slowest run took 215.95 times longer than the fastest. This could mean that an intermediate result is being cached.\r\n100000 loops, best of 3: 5.12 µs per loop\r\nThe slowest run took 2562.67 times longer than the fastest. This could mean that an intermediate result is being cached.\r\n100000 loops, best of 3: 5.12 µs per loop\r\nThe slowest run took 21262.27 times longer than the fastest. This could mean that an intermediate result is being cached.\r\n100000 loops, best of 3: 7.51 µs per loop\r\n```\r\n\r\nSo the engine creation gets a lot slower (and that is important as well of course), but after that the actual indexing operation is still consistently faster when using the ObjectEngine, even for `len(self) > 1000`. \r\nThe same for the example you showed above. And the strange thing is that in the original PR https://github.com/pandas-dev/pandas/pull/15245 you actually showed that the timing for that benchmark considerably improved."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/300744396",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16324#issuecomment-300744396",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16324",
    "id": 300744396,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDc0NDM5Ng==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-11T10:05:13Z",
    "updated_at": "2017-05-11T10:05:13Z",
    "author_association": "MEMBER",
    "body": "Regarding that last remark about the asv benchmarks: the reason is that it does the indexing timings on a 'cold' index, so the result seems to be dominated by the engine creation rather than the actual `get_loc` operation. Maybe we should benchmark both."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/300755647",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16324#issuecomment-300755647",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16324",
    "id": 300755647,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDc1NTY0Nw==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2017-05-11T10:58:42Z",
    "updated_at": "2017-05-11T10:58:42Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=h1) Report\n> Merging [#16324](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/0607e03f71b52e131947d73880380796f51d72fb?src=pr&el=desc) will **decrease** coverage by `0.03%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/16324/graphs/tree.svg?token=eZ4WkYLtcO&width=650&src=pr&height=150)](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master   #16324      +/-   ##\n==========================================\n- Coverage   90.37%   90.34%   -0.04%     \n==========================================\n  Files         161      161              \n  Lines       50863    50866       +3     \n==========================================\n- Hits        45966    45953      -13     \n- Misses       4897     4913      +16\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `88.12% <100%> (-0.02%)` | :arrow_down: |\n| #single | `40.18% <46.15%> (-0.26%)` | :arrow_down: |\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/core/util/hashing.py](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvdXRpbC9oYXNoaW5nLnB5) | `90.35% <100%> (-1.69%)` | :arrow_down: |\n| [pandas/core/dtypes/dtypes.py](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvZHR5cGVzL2R0eXBlcy5weQ==) | `94.92% <100%> (ø)` | :arrow_up: |\n| [pandas/core/indexes/multi.py](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvaW5kZXhlcy9tdWx0aS5weQ==) | `96.56% <100%> (-0.17%)` | :arrow_down: |\n| [pandas/io/gbq.py](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=tree#diff-cGFuZGFzL2lvL2dicS5weQ==) | `25% <0%> (-58.34%)` | :arrow_down: |\n| [pandas/core/common.py](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvY29tbW9uLnB5) | `90.68% <0%> (-0.35%)` | :arrow_down: |\n| [pandas/core/indexes/category.py](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvaW5kZXhlcy9jYXRlZ29yeS5weQ==) | `98.18% <0%> (-0.31%)` | :arrow_down: |\n| [pandas/core/frame.py](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvZnJhbWUucHk=) | `97.59% <0%> (-0.1%)` | :arrow_down: |\n| [pandas/core/series.py](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvc2VyaWVzLnB5) | `94.71% <0%> (-0.1%)` | :arrow_down: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=footer). Last update [0607e03...795ba01](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/300755678",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16324#issuecomment-300755678",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16324",
    "id": 300755678,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDc1NTY3OA==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2017-05-11T10:58:49Z",
    "updated_at": "2017-05-30T12:23:23Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=h1) Report\n> Merging [#16324](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/379fa8743f43470df5ae3d6246eb916b863e3487?src=pr&el=desc) will **decrease** coverage by `0.05%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/16324/graphs/tree.svg?src=pr&width=650&token=eZ4WkYLtcO&height=150)](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master   #16324      +/-   ##\n==========================================\n- Coverage   90.39%   90.34%   -0.06%     \n==========================================\n  Files         161      161              \n  Lines       50863    50866       +3     \n==========================================\n- Hits        45978    45954      -24     \n- Misses       4885     4912      +27\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `88.12% <100%> (-0.04%)` | :arrow_down: |\n| #single | `40.18% <46.15%> (-0.26%)` | :arrow_down: |\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/core/indexes/multi.py](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvaW5kZXhlcy9tdWx0aS5weQ==) | `96.56% <100%> (-0.17%)` | :arrow_down: |\n| [pandas/core/util/hashing.py](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvdXRpbC9oYXNoaW5nLnB5) | `90.35% <100%> (-1.69%)` | :arrow_down: |\n| [pandas/core/dtypes/dtypes.py](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvZHR5cGVzL2R0eXBlcy5weQ==) | `94.92% <100%> (ø)` | :arrow_up: |\n| [pandas/io/gbq.py](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=tree#diff-cGFuZGFzL2lvL2dicS5weQ==) | `25% <0%> (-58.34%)` | :arrow_down: |\n| [pandas/plotting/\\_converter.py](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=tree#diff-cGFuZGFzL3Bsb3R0aW5nL19jb252ZXJ0ZXIucHk=) | `63.23% <0%> (-1.82%)` | :arrow_down: |\n| [pandas/core/indexes/category.py](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvaW5kZXhlcy9jYXRlZ29yeS5weQ==) | `98.18% <0%> (-0.31%)` | :arrow_down: |\n| [pandas/core/frame.py](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvZnJhbWUucHk=) | `97.59% <0%> (-0.1%)` | :arrow_down: |\n| [pandas/core/series.py](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvc2VyaWVzLnB5) | `94.71% <0%> (-0.1%)` | :arrow_down: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=footer). Last update [379fa87...de514f1](https://codecov.io/gh/pandas-dev/pandas/pull/16324?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/300759157",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16324#issuecomment-300759157",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16324",
    "id": 300759157,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDc1OTE1Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-11T11:16:04Z",
    "updated_at": "2017-05-11T11:16:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche pls read my impl notes. The timings are correct. Your measurement is incorrect.\r\n\r\n> So the engine creation gets a lot slower (and that is important as well of course), but after that the \r\n\r\nThis is by far the most important part of the cost."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/300768817",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16324#issuecomment-300768817",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16324",
    "id": 300768817,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDc2ODgxNw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-11T12:03:26Z",
    "updated_at": "2017-05-11T12:03:26Z",
    "author_association": "MEMBER",
    "body": "I had read your comments in the classes, but I don't read an explanation for my comments above. So if you would like to clarify.\r\n\r\nTo be clear, I am not saying the ObjectEngine (the old implementation) is necessarily better (and thanks for this PR!). It is just that the trade-off between performance of index creation and of actual indexing operation, is a difficult one, because it depends on how many times you do such an indexing operation. So it will always be difficult to determine a good cut-off size to use one of both, because it depends on the usecase (apart from that, we should just choose a sensible one).\r\n\r\nIf you do many indexing operations (which is not most of the time not a good usage of course, but not always avoidable), the ObjectEngine is even for large arrays still a lot faster as the MultiIndexEngine (because in such case the faster `get_loc` outweighs the slower initial creation). \r\nIf you do only a few indexing operation, the MultiIndexEngine, due to a much faster creation, can indeed be a big improvement.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/300777684",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16324#issuecomment-300777684",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16324",
    "id": 300777684,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDc3NzY4NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-11T12:44:59Z",
    "updated_at": "2017-05-11T12:46:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche your comments indicate you did not read my update at the top.\r\n\r\n> If you do many indexing operations (which is not most of the time not a good usage of course, but not always avoidable), the ObjectEngine is even for large arrays still a lot faster as the MultiIndexEngine (because in such case the faster get_loc outweighs the slower initial creation).\r\n\r\nprove it"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/300778579",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16324#issuecomment-300778579",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16324",
    "id": 300778579,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDc3ODU3OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-11T12:48:39Z",
    "updated_at": "2017-05-11T12:49:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "> To be clear, I am not saying the ObjectEngine (the old implementation) is necessarily better (and thanks for this PR!). It is just that the trade-off between performance of index creation and of actual indexing operation, is a difficult one, because it depends on how many times you do such an indexing operation. So it will always be difficult to determine a good cut-off size to use one of both, because it depends on the usecase (apart from that, we should just choose a sensible one).\r\n\r\nsure there is a tradeoff. but around > 10000 elements it is dramatically better in the hash based impl. (sure there is a breakeven point, and its is prob somewhat larger, maybe 50k or 100k elements), BUT this does reflect the ballooing memory of the original impl.\r\n\r\nsimply compare [6] above. \r\n\r\nThe hashtable creation cost vastly outweights everything else. timeit does NOT take this into account (well it *does* says that things are cache, which is exactly what is happening here)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/300806285",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16324#issuecomment-300806285",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16324",
    "id": 300806285,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDgwNjI4NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-11T14:27:17Z",
    "updated_at": "2017-05-11T16:05:50Z",
    "author_association": "MEMBER",
    "body": "> @jorisvandenbossche your comments indicate you did not read my update at the top.\r\n\r\nOK, I thought you meant the comments in the code. Github doesn't always refresh itself if you keep the page open, so I only saw it now. \r\nBut that said, I completely understand what you are saying there (but thanks for writing it, that makes the discussion clearer!), as I think also is clear from my comments. There is the trade-off between index hashtable creation and actual getting operation (the timings I showed were just only about the second part). One things I was not considering was the memory aspect, and that was of course also an important reason (maybe the original) for the change.\r\n\r\nBut what I want to make clear is that this trade-off size of 10k can be very detrimental when you do a lot of single indexing operations (when above that size of 10k, and so using the hash based one). And you easily get at many indexing operations, even if you do not do that manually in a loop. \r\nAs an example, the combine_first of the original issue report does around 5 get_locs for each column in the frame, leading to 72 calls in total for that specific example. But of course that example would be below the 10k threshold, and so would be fixed with this PR.\r\n\r\nMaybe this is not that common to have the combination of a large MI size and many indexing operations, so maybe we shouldn't care, but if you are in this situation, it can make  big difference.\r\n\r\nVisual example (code to reproduce in http://nbviewer.jupyter.org/gist/jorisvandenbossche/d39063411b480e1fa825b0cb5c1d56fd), full line is first get_loc (so with overhead of hashtable creation), dotted lines are subsequent get_loc calls (added to the first line):\r\n\r\n![figure_6](https://cloud.githubusercontent.com/assets/1020496/25953581/22d96c3c-3664-11e7-9ffa-c48c43535ad8.png)\r\n\r\nSo with 10 get_loc calls the cutoff is around 10^5, but if you would make the same plot with 1000 get_loc calls, the ObjectEngine is even slightly faster with 10^7 sized MI (but with probably blown up memory as you indicated)\r\n\r\nBut, as I don't think we want to expose this as an option, we have to choose a cutoff size, so I think the current 10k you used is probably fine. \r\nThat at least covers the typical case of a normal amount of multi-indexed columns (eg the case in the reported issue)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/300833117",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16324#issuecomment-300833117",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16324",
    "id": 300833117,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDgzMzExNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-11T15:51:24Z",
    "updated_at": "2017-05-11T15:51:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "yeah, the calls after ht constructon are basically immaterial you pay the cost. sure you can always overwhelm it, but that is just user error (and to be honest not sure how much could do about that). a ``.get_indexer`` call efficiently does this lookup."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/300837413",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16324#issuecomment-300837413",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16324",
    "id": 300837413,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDgzNzQxMw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-11T16:05:24Z",
    "updated_at": "2017-05-11T16:05:24Z",
    "author_association": "MEMBER",
    "body": "The gist/notebook  for the plot above: http://nbviewer.jupyter.org/gist/jorisvandenbossche/d39063411b480e1fa825b0cb5c1d56fd"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/300938258",
    "html_url": "https://github.com/pandas-dev/pandas/pull/16324#issuecomment-300938258",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16324",
    "id": 300938258,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDkzODI1OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-11T22:53:16Z",
    "updated_at": "2017-05-11T22:53:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "thanks for the review @jorisvandenbossche "
  }
]
