[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351941424",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18790#issuecomment-351941424",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18790",
    "id": 351941424,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTk0MTQyNA==",
    "user": {
      "login": "jschendel",
      "id": 5332445,
      "node_id": "MDQ6VXNlcjUzMzI0NDU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5332445?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jschendel",
      "html_url": "https://github.com/jschendel",
      "followers_url": "https://api.github.com/users/jschendel/followers",
      "following_url": "https://api.github.com/users/jschendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jschendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jschendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jschendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jschendel/orgs",
      "repos_url": "https://api.github.com/users/jschendel/repos",
      "events_url": "https://api.github.com/users/jschendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jschendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-15T08:14:20Z",
    "updated_at": "2017-12-15T08:14:20Z",
    "author_association": "MEMBER",
    "body": "cc: @jreback, @jorisvandenbossche, @TomAugspurger "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351979870",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18790#issuecomment-351979870",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18790",
    "id": 351979870,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTk3OTg3MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-15T11:10:37Z",
    "updated_at": "2017-12-15T11:10:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "I like 3. can you make a quick test to see if its feasible?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/351986968",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18790#issuecomment-351986968",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18790",
    "id": 351986968,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTk4Njk2OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-15T11:48:25Z",
    "updated_at": "2017-12-15T11:48:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "If option 3 isn't too difficult, I think it'd be best. I want `'category'`\nto be equivalent to `CategoricalDtype()`.\nCurrently that's true for creating a new categorical. It'd be nice if it\nwere true for coercing existing\ncategoricals.\n\nOn Fri, Dec 15, 2017 at 5:10 AM, Jeff Reback <notifications@github.com>\nwrote:\n\n> I like 3. can you make a quick test to see if its feasible?\n>\n> â€”\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/18790#issuecomment-351979870>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIi5k8-puN7TCjj8NTYNNg18wijuMks5tAlO1gaJpZM4RDJRe>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/352937020",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18790#issuecomment-352937020",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18790",
    "id": 352937020,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjkzNzAyMA==",
    "user": {
      "login": "jschendel",
      "id": 5332445,
      "node_id": "MDQ6VXNlcjUzMzI0NDU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5332445?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jschendel",
      "html_url": "https://github.com/jschendel",
      "followers_url": "https://api.github.com/users/jschendel/followers",
      "following_url": "https://api.github.com/users/jschendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jschendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jschendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jschendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jschendel/orgs",
      "repos_url": "https://api.github.com/users/jschendel/repos",
      "events_url": "https://api.github.com/users/jschendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jschendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-20T01:22:42Z",
    "updated_at": "2017-12-20T01:22:42Z",
    "author_association": "MEMBER",
    "body": "Option 3 doesn't look to be that bad.  Should have a PR within the next day or so, depending on my free time.  There are only a couple ambiguous points I've encountered:\r\n- Equality:  How should comparisons with `CDT(*, None)` work?\r\n- Hashing: Should hashing `CDT(*, None)` produce a different hash?\r\n<br />\r\n\r\nRegarding equality, my current plan is to treat `ordered=None` as if it where `ordered=False`:\r\n\r\n  - `CDT(['a', 'b'], None) == CDT(['a', 'b'], False)` --> `True`\r\n  - `CDT(['a', 'b'], None) == CDT(['b', 'a'], False)` --> `True`\r\n  - `CDT(['a', 'b'], None) == CDT(['a', 'b'], True)` --> `False`\r\n\r\nThis maintains existing comparison behavior when ordered is not specified:\r\n  - `CDT(['a', 'b'], False) == CDT(['a', 'b'])`  --> `True`\r\n  - `CDT(['a', 'b'], True) == CDT(['a', 'b'])`  --> `False`\r\n<br />\r\n\r\nRegarding hashing, without any code modifications `CDT(*, None)` will have the same hash as `CDT(*, False)`.  This seems to be consistent with how I plan to treat equality.  Makes the logic implementing equality nicer too, since the case when both dtypes are unordered currently relies on hashes."
  }
]
