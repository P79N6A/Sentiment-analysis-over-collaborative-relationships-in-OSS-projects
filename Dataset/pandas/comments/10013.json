[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/97384209",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10013#issuecomment-97384209",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10013",
    "id": 97384209,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3Mzg0MjA5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-29T10:40:36Z",
    "updated_at": "2015-04-29T10:40:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is not in the spec to work at all, and may accidently work. `assert_almost_equal` essentially is a recursive list-like/scalar comparator. Doesn't know about anything else.\n\nuse `assert_frame_equal` for testing or `.equals(..)` is the full-fledged method on pandas objects.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/97433928",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10013#issuecomment-97433928",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10013",
    "id": 97433928,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3NDMzOTI4",
    "user": {
      "login": "dhj-io",
      "id": 941216,
      "node_id": "MDQ6VXNlcjk0MTIxNg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/941216?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhj-io",
      "html_url": "https://github.com/dhj-io",
      "followers_url": "https://api.github.com/users/dhj-io/followers",
      "following_url": "https://api.github.com/users/dhj-io/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhj-io/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhj-io/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhj-io/subscriptions",
      "organizations_url": "https://api.github.com/users/dhj-io/orgs",
      "repos_url": "https://api.github.com/users/dhj-io/repos",
      "events_url": "https://api.github.com/users/dhj-io/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhj-io/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-29T13:58:01Z",
    "updated_at": "2015-04-29T13:58:49Z",
    "author_association": "NONE",
    "body": "Thank you for the quick feedback!  Just a few things:\n1. Can you direct me to the spec?  I wasn't able to find any documentation on pandas.util.testing.assert_almost_equal and the python \"help(assert_almost_equal)\" is as follows: `assert_almost_equal(...)`\n2. Is the function supposed to be only for **Series** objects with floating point values?  If **DataFrames** containing only floating point numbers are supposed to be evaluated then the **same error** occurs with a floating point number substituted for 'b'.\n3.  Previous behavior (this may have been as early as 0.6), was to compare equality by python standard except for floating point columns.  These columns assumed the behavior of `numpy.testing.assert_almost_equal`.  The `numpy.testing.assert_almost_equal` function allows precision to be specified in decimal places.  Is there a testing function with this behavior to compare everything normally except specify precision when comparing floating point numbers?  `assert_frame_equal` with `check_less_precise` looks promising, but that is a boolean specification and not a \"number of decimal points\" specification.\n4. If a test function doesn't exist where the `assert_almost_equal` behavior applies only to float comparisons then I will need to write one for myself (in python).  I can send a pull request if it might be of use to others.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/98174606",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10013#issuecomment-98174606",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10013",
    "id": 98174606,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk4MTc0NjA2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-01T16:40:50Z",
    "updated_at": "2015-05-01T16:40:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dhj-io these are internal functions that we use for testing, no spec per se. you should use `.equals` if you are comparing things. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/98179032",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10013#issuecomment-98179032",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10013",
    "id": 98179032,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk4MTc5MDMy",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-01T17:08:02Z",
    "updated_at": "2015-05-01T17:08:02Z",
    "author_association": "MEMBER",
    "body": "@dhj-io See also the issue at #9895 on providing some of the testing functions in a public `testing` module. \nFeedback on which functions you would use/find useful is certainly welcome over there!\n\nAnd if you want to know the exact behaviour of `assert_almost_equal`, I think there is only the code :-) https://github.com/pydata/pandas/blob/master/pandas/src/testing.pyx#L58 (no docstring alas) But as you will see, `assert_almost_equal` is not meant to work with dataframes (it may have worked before y accident), so will probably not be part of a public testing module. \nBut if `assert_frame_equal` is lacking in some ways for the precision issues, you can certainly provide some feedback/ideas on the issue.\n"
  }
]
