[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/356902905",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19182#issuecomment-356902905",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19182",
    "id": 356902905,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjkwMjkwNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-11T11:08:44Z",
    "updated_at": "2018-01-11T11:08:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "This patch fixes. It doesn't break anything either, which means this path was not being fully exercised.\r\n\r\nNote that this might show some reduced performance in a couple of cases (so need to run asv). as well as add some test coverage of the hash bool path. (also let's update the comment there).\r\n\r\n\r\n```\r\ndiff --git a/pandas/core/algorithms.py b/pandas/core/algorithms.py\r\nindex c754c063f..723f21e70 100644\r\n--- a/pandas/core/algorithms.py\r\n+++ b/pandas/core/algorithms.py\r\n@@ -69,7 +69,7 @@ def _ensure_data(values, dtype=None):\r\n         if is_bool_dtype(values) or is_bool_dtype(dtype):\r\n             # we are actually coercing to uint64\r\n             # until our algos support uint8 directly (see TODO)\r\n-            return np.asarray(values).astype('uint64'), 'bool', 'uint64'\r\n+            return np.asarray(values).astype('object'), 'bool', 'object'\r\n         elif is_signed_integer_dtype(values) or is_signed_integer_dtype(dtype):\r\n             return _ensure_int64(values), 'int64', 'int64'\r\n         elif (is_unsigned_integer_dtype(values) or\r\n```"
  }
]
