[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/220590483",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13236#issuecomment-220590483",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13236",
    "id": 220590483,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMDU5MDQ4Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-20T12:17:20Z",
    "updated_at": "2016-05-20T12:17:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "#12473 fixed map as was failing on non-numpy aware dtypes. This is iterating over python float values so this is correct (was essentially a bug before).\n\ncc @sinhrks \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/220597909",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13236#issuecomment-220597909",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13236",
    "id": 220597909,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMDU5NzkwOQ==",
    "user": {
      "login": "glaucouri",
      "id": 3242660,
      "node_id": "MDQ6VXNlcjMyNDI2NjA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3242660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glaucouri",
      "html_url": "https://github.com/glaucouri",
      "followers_url": "https://api.github.com/users/glaucouri/followers",
      "following_url": "https://api.github.com/users/glaucouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/glaucouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glaucouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glaucouri/subscriptions",
      "organizations_url": "https://api.github.com/users/glaucouri/orgs",
      "repos_url": "https://api.github.com/users/glaucouri/repos",
      "events_url": "https://api.github.com/users/glaucouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glaucouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-20T12:55:17Z",
    "updated_at": "2016-05-20T12:55:38Z",
    "author_association": "NONE",
    "body": "But the underlyng data type IS a numpy dtype. \n\nIn this example is reasonable to have all float32 dtype, the same type.\n\n```\nIn [4]: S.astype(P.np.float32).map(type)\nOut[4]: \n0    <type 'float'>\n1    <type 'float'>\n2    <type 'float'>\ndtype: object\n\nIn [5]: map(type, S.astype(P.np.float32))\nOut[5]: [numpy.float32, numpy.float32, numpy.float32]\n\n```\n\nthank you\nGla\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/220604291",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13236#issuecomment-220604291",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13236",
    "id": 220604291,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMDYwNDI5MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-20T13:23:44Z",
    "updated_at": "2016-05-20T13:23:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "So < 0.18.1 we were NOT using `.asobject` and instead iterating over the actual numpy types. Now these are converted to python types and then iterated.\n\n```\nIn [1]: s = Series([1],dtype='float32')\n\nIn [2]: pd.lib.map_infer(s.values, type)\nOut[2]: array([<type 'numpy.float32'>], dtype=object)\n\nIn [4]: pd.lib.map_infer(s.asobject, type)\nOut[4]: array([<type 'float'>], dtype=object)\n```\n\nI think this is more correct actually (I don't think this was tested before), and did not provide a guarantee (either way) of what types it would result.\n\ncc @sinhrks \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/220604415",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13236#issuecomment-220604415",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13236",
    "id": 220604415,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMDYwNDQxNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-20T13:24:12Z",
    "updated_at": "2016-05-20T13:24:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "I will reopen for discussion.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/220761283",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13236#issuecomment-220761283",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13236",
    "id": 220761283,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMDc2MTI4Mw==",
    "user": {
      "login": "sinhrks",
      "id": 1696302,
      "node_id": "MDQ6VXNlcjE2OTYzMDI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1696302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sinhrks",
      "html_url": "https://github.com/sinhrks",
      "followers_url": "https://api.github.com/users/sinhrks/followers",
      "following_url": "https://api.github.com/users/sinhrks/following{/other_user}",
      "gists_url": "https://api.github.com/users/sinhrks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sinhrks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sinhrks/subscriptions",
      "organizations_url": "https://api.github.com/users/sinhrks/orgs",
      "repos_url": "https://api.github.com/users/sinhrks/repos",
      "events_url": "https://api.github.com/users/sinhrks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sinhrks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-21T06:13:52Z",
    "updated_at": "2016-05-21T06:42:21Z",
    "author_association": "MEMBER",
    "body": "Assuming `map` to datetime-likes `Series`. Because `np.datetime64` doesn't have convenient properties like `pd.Timestamp`, it coerces from numpy dtype to pandas/python dtype (`Timestamp` inherits `datetime.datetime`).\n\n```\ns = pd.Series([pd.Timestamp('2011-01-01')])\ns.dtype\n# dtype('<M8[ns]')\n\ns.map(type)\n# 0    <class 'pandas.tslib.Timestamp'>\n# dtype: object\n```\n\nI feel it is natural numeric coerces to python repr also. Can u provide an usage which `np.float` is preferable?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/220793964",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13236#issuecomment-220793964",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13236",
    "id": 220793964,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMDc5Mzk2NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-21T18:44:13Z",
    "updated_at": "2016-05-21T18:44:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "yeah I think this only matters for non-extension & i8 types (e.g. int/float)\n(strings / bools, extension types, and i8 are better off with python (and pandas) types for sure).\n\nI think it _does_ make sense to return native types (`float` vs `np.float`) as has lots more utility.\n\nLet's update the doc-string to indicate this?\n\nso repurposing this issue.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/220793996",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13236#issuecomment-220793996",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13236",
    "id": 220793996,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMDc5Mzk5Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-21T18:44:39Z",
    "updated_at": "2016-05-21T18:44:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "@glaucouri want to do a pull-request?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/220905272",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13236#issuecomment-220905272",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13236",
    "id": 220905272,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMDkwNTI3Mg==",
    "user": {
      "login": "glaucouri",
      "id": 3242660,
      "node_id": "MDQ6VXNlcjMyNDI2NjA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3242660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glaucouri",
      "html_url": "https://github.com/glaucouri",
      "followers_url": "https://api.github.com/users/glaucouri/followers",
      "following_url": "https://api.github.com/users/glaucouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/glaucouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glaucouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glaucouri/subscriptions",
      "organizations_url": "https://api.github.com/users/glaucouri/orgs",
      "repos_url": "https://api.github.com/users/glaucouri/repos",
      "events_url": "https://api.github.com/users/glaucouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glaucouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-23T07:23:35Z",
    "updated_at": "2016-05-23T07:23:35Z",
    "author_association": "NONE",
    "body": "Before making the proposal i need to understand well what do you mean with: \" it does make sense to return native types\" .\n\nWhy is preferred to convert any single element of a series if is not explicitly required?\n\nProbably is more efficient to iterate over native values and let user to cast _only_ if necessary (with the usefull method map).\n\nThank you\nGlauco\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/220952078",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13236#issuecomment-220952078",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13236",
    "id": 220952078,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMDk1MjA3OA==",
    "user": {
      "login": "sinhrks",
      "id": 1696302,
      "node_id": "MDQ6VXNlcjE2OTYzMDI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1696302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sinhrks",
      "html_url": "https://github.com/sinhrks",
      "followers_url": "https://api.github.com/users/sinhrks/followers",
      "following_url": "https://api.github.com/users/sinhrks/following{/other_user}",
      "gists_url": "https://api.github.com/users/sinhrks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sinhrks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sinhrks/subscriptions",
      "organizations_url": "https://api.github.com/users/sinhrks/orgs",
      "repos_url": "https://api.github.com/users/sinhrks/repos",
      "events_url": "https://api.github.com/users/sinhrks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sinhrks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-23T11:12:33Z",
    "updated_at": "2016-05-23T11:12:44Z",
    "author_association": "MEMBER",
    "body": "u shouldn't use `map` at all if you care performance. It focuses on convenience. Do you have any other reason to prefer numpy dtype?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/220965362",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13236#issuecomment-220965362",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13236",
    "id": 220965362,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMDk2NTM2Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-23T12:23:37Z",
    "updated_at": "2016-05-23T12:23:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Before making the proposal i need to understand well what do you mean with: \" it does make sense to return native types\" .\n\nWhen iterating you want to have native types if at all possible so the user doesn't need to even think about this. numpy types are not normal for iterating in python; yes they are the 'same' but they often don't have the right methods or behaviors, esp for things like ``np.timedelta/np.datetime`, not to mention extension types. Since we are already converting to pythonic dtypes, makes sense to complete with int/float.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/220968342",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13236#issuecomment-220968342",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13236",
    "id": 220968342,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMDk2ODM0Mg==",
    "user": {
      "login": "glaucouri",
      "id": 3242660,
      "node_id": "MDQ6VXNlcjMyNDI2NjA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3242660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glaucouri",
      "html_url": "https://github.com/glaucouri",
      "followers_url": "https://api.github.com/users/glaucouri/followers",
      "following_url": "https://api.github.com/users/glaucouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/glaucouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glaucouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glaucouri/subscriptions",
      "organizations_url": "https://api.github.com/users/glaucouri/orgs",
      "repos_url": "https://api.github.com/users/glaucouri/repos",
      "events_url": "https://api.github.com/users/glaucouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glaucouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-23T12:38:18Z",
    "updated_at": "2016-05-23T12:38:18Z",
    "author_association": "NONE",
    "body": "This is true, map is not for performance.\nJeff, What you're saying is reasonable, but my doubt is simple, if pandas is a layer over numpy and internally it use dtype i think it is consistent to have the same behavior using **builtins**.map or S.map.  That is what actually happens for Timestamp.\n\nWhy you expect that the map iterator must change underlying types (sometimes)?\n\nIn the example above, if i cast a series to float64 i expect the type i've casted to in the same \nmanner as if iterate with map over a datetime64[*] i expect to use the \"to_period\".\n\nThank you\nyour interest is very appreciated\nGlauco\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/220970140",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13236#issuecomment-220970140",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13236",
    "id": 220970140,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMDk3MDE0MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-23T12:46:17Z",
    "updated_at": "2016-05-23T12:46:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "@glaucouri well, pandas is not simply a layer over numpy; it hides numpy more and more (and will continue to do so). \n\nThe iterator type will _always_ change the type to a python one. I don't see any argument not to do this. Essentially you are creating scalars, python scalars are perfectly fine types, vastly superior to numpy scalars. \n\nAppreciate If you would like to update the documentation. \n\nso `__iter__` boxes datetimes (including extension) types; categoricals don't matter here. I think we should also return python ints/floats. I'll make that a separate issue. `.map` has different logic because it can possibly handle things in a more vectorized way rather than as an iterator.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/221199734",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13236#issuecomment-221199734",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13236",
    "id": 221199734,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTE5OTczNA==",
    "user": {
      "login": "glaucouri",
      "id": 3242660,
      "node_id": "MDQ6VXNlcjMyNDI2NjA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3242660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glaucouri",
      "html_url": "https://github.com/glaucouri",
      "followers_url": "https://api.github.com/users/glaucouri/followers",
      "following_url": "https://api.github.com/users/glaucouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/glaucouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glaucouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glaucouri/subscriptions",
      "organizations_url": "https://api.github.com/users/glaucouri/orgs",
      "repos_url": "https://api.github.com/users/glaucouri/repos",
      "events_url": "https://api.github.com/users/glaucouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glaucouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-24T08:23:54Z",
    "updated_at": "2016-05-24T08:25:14Z",
    "author_association": "NONE",
    "body": "Hi Jeff, \nis not my intent to underestimate the work done by pandas... \nmy intend was to focus on underlying data types. \n\nDo you want to extend the box-python-type behaviour to all kind of iteration over Series?\n\nTake the first example: \n\n```\nS=P.Series([0.6,0.2,15])\n\n```\n\nAnd now we try some kind of iteration on it\n\n```\nIn [24]: map(type,S)\nOut[24]: [numpy.float64, numpy.float64, numpy.float64]\n\nIn [25]: map(type,[x for x in S])\nOut[25]: [numpy.float64, numpy.float64, numpy.float64]\n\nIn [26]: map(type, S.tolist())\nOut[26]: [numpy.float64, numpy.float64, numpy.float64]\n\nIn [27]: map(type, list(S))\nOut[27]: [numpy.float64, numpy.float64, numpy.float64]\n\nIn [28]: S.map(type)\nOut[28]: \n0    <type 'float'>\n1    <type 'float'>\n2    <type 'float'>\ndtype: object\n\nIn [29]: map(type, tuple(S))\nOut[29]: [numpy.float64, numpy.float64, numpy.float64]\n\nIn [30]: map(type, iter(S))\nOut[30]: [numpy.float64, numpy.float64, numpy.float64]\n\n```\n\nIf i'm not wrong some of these examples call explicitly **iter** but actually works differenlty from map. Do i missing something?\n\nThank you Jeff, i will work on docs (just figured out how to do it).\n\nGla\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/221253716",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13236#issuecomment-221253716",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13236",
    "id": 221253716,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTI1MzcxNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-24T12:30:22Z",
    "updated_at": "2016-05-24T12:30:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@glaucouri use master and you will see that `.tolist()` has changed. You are still showing what is happening, not why you think its a good idea to revert this.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/221843962",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13236#issuecomment-221843962",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13236",
    "id": 221843962,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTg0Mzk2Mg==",
    "user": {
      "login": "glaucouri",
      "id": 3242660,
      "node_id": "MDQ6VXNlcjMyNDI2NjA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3242660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glaucouri",
      "html_url": "https://github.com/glaucouri",
      "followers_url": "https://api.github.com/users/glaucouri/followers",
      "following_url": "https://api.github.com/users/glaucouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/glaucouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glaucouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glaucouri/subscriptions",
      "organizations_url": "https://api.github.com/users/glaucouri/orgs",
      "repos_url": "https://api.github.com/users/glaucouri/repos",
      "events_url": "https://api.github.com/users/glaucouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glaucouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-26T11:16:24Z",
    "updated_at": "2016-05-26T11:17:13Z",
    "author_association": "NONE",
    "body": "Ok, I did not realize they were already available in master.\n\n```\nIn [3]: import pandas as P\n\nIn [4]: P.__version__\nOut[4]: '0.18.1+70.gb4e2d34'\n\nIn [5]: S=P.Series([0.6,0.2,15])\n\nIn [6]: map(type,S)\nOut[6]: [numpy.float64, numpy.float64, numpy.float64]\n\nIn [7]: map(type,[x for x in S])\nOut[7]: [numpy.float64, numpy.float64, numpy.float64]\n\nIn [8]: map(type, S.tolist())\nOut[8]: [float, float, float]\n\nIn [9]: map(type, list(S))\nOut[9]: [numpy.float64, numpy.float64, numpy.float64]\n\nIn [10]: S.map(type)\nOut[10]: \n0    <type 'float'>\n1    <type 'float'>\n2    <type 'float'>\ndtype: object\n\nIn [11]: map(type, tuple(S))\nOut[11]: [numpy.float64, numpy.float64, numpy.float64]\n\nIn [12]:  map(type, iter(S))\nOut[12]: [numpy.float64, numpy.float64, numpy.float64]\n\n```\n\nSo the approach is to implement a kind of 'python nativization' explicitly only with tolist and map method ? \n\nTo be honest i prefer a solution where the type is not changed anyway, \nBut if it is preferred a solution like this one i expect that all kind of `__iter__` call works in the same manner. \nExpecially : **map(type,S)** and **S.map(type)** . works odd to me.\n\nMoreover this casting has a non negligible ~20%  overhead\n\n```\nIn [17]: %timeit map(type,S)\n1 loop, best of 3: 723 ms per loop\n\nIn [18]: %timeit S.map(type)\n1 loop, best of 3: 873 ms per loop\n```\n\nThank you again Jeff.\nGlauco\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/221850232",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13236#issuecomment-221850232",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13236",
    "id": 221850232,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTg1MDIzMg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-26T11:52:12Z",
    "updated_at": "2016-05-26T11:52:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "@glaucouri see #13258 to fix the iteration.\n\nif you care about perf you are going about this the wrong way. `.map` with iteration is exactly that iteration in python space, which is non-performant compared to vectorized methods.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/221867298",
    "html_url": "https://github.com/pandas-dev/pandas/issues/13236#issuecomment-221867298",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/13236",
    "id": 221867298,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMTg2NzI5OA==",
    "user": {
      "login": "sinhrks",
      "id": 1696302,
      "node_id": "MDQ6VXNlcjE2OTYzMDI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1696302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sinhrks",
      "html_url": "https://github.com/sinhrks",
      "followers_url": "https://api.github.com/users/sinhrks/followers",
      "following_url": "https://api.github.com/users/sinhrks/following{/other_user}",
      "gists_url": "https://api.github.com/users/sinhrks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sinhrks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sinhrks/subscriptions",
      "organizations_url": "https://api.github.com/users/sinhrks/orgs",
      "repos_url": "https://api.github.com/users/sinhrks/repos",
      "events_url": "https://api.github.com/users/sinhrks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sinhrks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-26T13:16:07Z",
    "updated_at": "2016-05-26T14:21:35Z",
    "author_association": "MEMBER",
    "body": "you should provide enough reason to break existing user's code using numpy dtype.\n"
  }
]
