[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/341916867",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18103#issuecomment-341916867",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18103",
    "id": 341916867,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTkxNjg2Nw==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-04T17:56:34Z",
    "updated_at": "2017-11-04T17:57:39Z",
    "author_association": "MEMBER",
    "body": "@memeplex : Thanks for reporting this!  Just for reference, did you notice this \"inconsistent\" behavior in previous versions of `pandas`, or has this surfaced just now (you use the word \"new\" in the title)?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/341917664",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18103#issuecomment-341917664",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18103",
    "id": 341917664,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTkxNzY2NA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-04T18:05:14Z",
    "updated_at": "2017-11-04T18:05:14Z",
    "author_association": "MEMBER",
    "body": "Regarding `df.apply`, we don't actually say that we accept lists of functions, so that behavior is somewhat accidental.  Nevertheless, I don't see why we couldn't implement for groupby's?\r\n\r\nRegarding `df.transform`, your groupby transform call should have worked according to documentation, so that looks like a bug to me.\r\n\r\nRegarding `df.agg`, that looks like a bug to me as well.  While `lambda x: x` is vacuously an aggregation, it should work for groupby as well AFAICT."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/341931653",
    "html_url": "https://github.com/pandas-dev/pandas/issues/18103#issuecomment-341931653",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/18103",
    "id": 341931653,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MTkzMTY1Mw==",
    "user": {
      "login": "memeplex",
      "id": 2845433,
      "node_id": "MDQ6VXNlcjI4NDU0MzM=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2845433?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/memeplex",
      "html_url": "https://github.com/memeplex",
      "followers_url": "https://api.github.com/users/memeplex/followers",
      "following_url": "https://api.github.com/users/memeplex/following{/other_user}",
      "gists_url": "https://api.github.com/users/memeplex/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/memeplex/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/memeplex/subscriptions",
      "organizations_url": "https://api.github.com/users/memeplex/orgs",
      "repos_url": "https://api.github.com/users/memeplex/repos",
      "events_url": "https://api.github.com/users/memeplex/events{/privacy}",
      "received_events_url": "https://api.github.com/users/memeplex/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-04T21:40:47Z",
    "updated_at": "2017-11-04T21:40:47Z",
    "author_association": "NONE",
    "body": "I have tested it with 0.21 only but transform and agg were acquired by df in 0.20 so the behavior can't be older than that. It's not surprising given the fact that the current implementation mostly delegates everything to _aggregate.\r\n\r\nI'm not sure allowing apply to receive a full mapper as part of its \"public\" signature is a good idea since the difference between the three methods is becoming almost impossible to describe (e.g. I don't see how the \"more flexible\" role the traditional groupby documentation assigns to apply is relevant anymore for dfs)."
  }
]
