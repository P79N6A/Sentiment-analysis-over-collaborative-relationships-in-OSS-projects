[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/365911605",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19710#issuecomment-365911605",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19710",
    "id": 365911605,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTkxMTYwNQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-15T12:22:28Z",
    "updated_at": "2018-02-15T12:22:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "> or want to have some example data loading capabilities\r\n\r\n+1 to this."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/366976973",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19710#issuecomment-366976973",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19710",
    "id": 366976973,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Njk3Njk3Mw==",
    "user": {
      "login": "koaning",
      "id": 1019791,
      "node_id": "MDQ6VXNlcjEwMTk3OTE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1019791?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/koaning",
      "html_url": "https://github.com/koaning",
      "followers_url": "https://api.github.com/users/koaning/followers",
      "following_url": "https://api.github.com/users/koaning/following{/other_user}",
      "gists_url": "https://api.github.com/users/koaning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/koaning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/koaning/subscriptions",
      "organizations_url": "https://api.github.com/users/koaning/orgs",
      "repos_url": "https://api.github.com/users/koaning/repos",
      "events_url": "https://api.github.com/users/koaning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/koaning/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-20T13:27:54Z",
    "updated_at": "2018-02-20T13:27:54Z",
    "author_association": "NONE",
    "body": "For the upcoming pandas docstring sprint this seems like a nice one to pick up. Any preference on datasets that should be added? \r\n\r\niris, mtcars, chickweight ... others? "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/366984419",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19710#issuecomment-366984419",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19710",
    "id": 366984419,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Njk4NDQxOQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-20T13:56:01Z",
    "updated_at": "2018-02-20T13:56:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Whatever datasets we add, we'll need to check to ensure that they have a\nlicense that allows us to redistribute them.\n\nAnd preferable they'd be small or we can download and cache them as needed,\nif we don't want to included them in the distribution.\n\nOn Tue, Feb 20, 2018 at 7:27 AM, vincent d warmerdam <\nnotifications@github.com> wrote:\n\n> For the upcoming pandas docstring sprint this seems like a nice one to\n> pick up. Any preference on datasets that should be added?\n>\n> iris, mtcars, chickweight ... others?\n>\n> â€”\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/19710#issuecomment-366976973>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIhUfoKNFyEN7DhpcB5S6xLQRQ8_Qks5tWshegaJpZM4SGjPf>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/366989726",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19710#issuecomment-366989726",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19710",
    "id": 366989726,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Njk4OTcyNg==",
    "user": {
      "login": "datapythonista",
      "id": 10058240,
      "node_id": "MDQ6VXNlcjEwMDU4MjQw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10058240?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datapythonista",
      "html_url": "https://github.com/datapythonista",
      "followers_url": "https://api.github.com/users/datapythonista/followers",
      "following_url": "https://api.github.com/users/datapythonista/following{/other_user}",
      "gists_url": "https://api.github.com/users/datapythonista/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datapythonista/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datapythonista/subscriptions",
      "organizations_url": "https://api.github.com/users/datapythonista/orgs",
      "repos_url": "https://api.github.com/users/datapythonista/repos",
      "events_url": "https://api.github.com/users/datapythonista/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datapythonista/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-20T14:14:24Z",
    "updated_at": "2018-02-20T14:14:24Z",
    "author_association": "MEMBER",
    "body": "Personally, for the documentation samples I wouldn't have \"real\" datasets. We won't be showing more than 5 rows, so even something with 150 samples as Iris seems too much.\r\n\r\nTo me it would make sense to have something like `pandas.io.samples.Countries` or `pandas.io.samples.Animals` with a mix of types, for example:\r\n* Country name: object\r\n* Continent: category\r\n* Population: int\r\n* GPD: float\r\n\r\nI think everybody will quickly understand data about countries, or animals, or things like that, and I'd avoid something more specialized. I'd hardcode the data into the `samples.py`, and simply have something like 20 rows.\r\n\r\nFor things like time series, another dataset (possibly with stock market data) will be needed. And probably one with \"complex\" multi-indices, or other kinds of data needed to illustrate some pandas functions.\r\n\r\nIn https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.reset_index.html the examples try to follow this approach. We can surely do better, and I think it's a good ideo to do something like `from pandas.io.sample import Countries` instead of defining the dataset each time. But that is what makes sense to me.\r\n\r\nDoes it make sense, or am I missing something for having larger datasets?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/367016190",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19710#issuecomment-367016190",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19710",
    "id": 367016190,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzAxNjE5MA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-20T15:35:09Z",
    "updated_at": "2018-02-20T15:35:09Z",
    "author_association": "MEMBER",
    "body": "My original question was mainly about the ability to load example dataframes, instead of always constructing them with code inside the docstring. \r\nWhether it are then actual external datasets we include, or smaller 'made-up' ones, that doesn't really matter to me. But I agree some smaller ones for basic functionality can be enough (but still, if we make a small one on eg countries, I would still do it with 'real' data). And that for other cases we will need some more complex ones.\r\n\r\nFor really small example datasets, I still see some value in actually constructing them inside the docstring, just to make users familiar with the concept of \"creating a small example dataset yourself to show functionality\" (which is useful when they submit bug reports :), but I don't know how much effect this would have ..)\r\n\r\nFor countries, I use the following in my pandas-tutorial (I currrently also use the titanic dataset a lot for small illustrations):\r\n\r\n```\r\nIn [15]: data = {'country': ['Belgium', 'France', 'Germany', 'Netherlands', 'United Kingdom'],\r\n    ...:         'population': [11.3, 64.3, 81.3, 16.9, 64.9],\r\n    ...:         'area': [30510, 671308, 357050, 41526, 244820],\r\n    ...:         'capital': ['Brussels', 'Paris', 'Berlin', 'Amsterdam', 'London']}\r\n    ...: countries = pd.DataFrame(data)\r\n    ...: countries\r\nOut[15]: \r\n     area    capital         country  population\r\n0   30510   Brussels         Belgium        11.3\r\n1  671308      Paris          France        64.3\r\n2  357050     Berlin         Germany        81.3\r\n3   41526  Amsterdam     Netherlands        16.9\r\n4  244820     London  United Kingdom        64.9\r\n```\r\n\r\na variation on this would indeed be nice."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/368245156",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19710#issuecomment-368245156",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19710",
    "id": 368245156,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODI0NTE1Ng==",
    "user": {
      "login": "dukebody",
      "id": 41953,
      "node_id": "MDQ6VXNlcjQxOTUz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/41953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dukebody",
      "html_url": "https://github.com/dukebody",
      "followers_url": "https://api.github.com/users/dukebody/followers",
      "following_url": "https://api.github.com/users/dukebody/following{/other_user}",
      "gists_url": "https://api.github.com/users/dukebody/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dukebody/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dukebody/subscriptions",
      "organizations_url": "https://api.github.com/users/dukebody/orgs",
      "repos_url": "https://api.github.com/users/dukebody/repos",
      "events_url": "https://api.github.com/users/dukebody/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dukebody/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-24T17:36:35Z",
    "updated_at": "2018-02-24T17:36:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "My two cents:\r\n\r\n- I agree on that having a set of standard datasets, or at least datasets with similar data, that we reuse across documentation can ease understanding. This is the case with a lot of ML/DS literature where authors reuse the same datasets (iris, mtcars, housing, etc.) to illustrate techniques and models.\r\n\r\n- I have no strong preference over importing vs. defining them directly on the docstring. However for small datasets I think we should always print them so the user understands the data that is being used, as shown in the last example from @jorisvandenbossche and in https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.reset_index.html. \r\n\r\n- I see an added benefit of defining the datasets in the docstring itself instead of importing them: people using older versions of pandas where these examples dataframes are not defined yet will be able to copy-paste the example. So for small datasets I'd favor defining them directly in docstrings, which is not a big effort anyhow and can be copy-pasted from other docs and adapted if necessary. In the case of big datasets I guess it can be OK to import them directly and print only their first lines."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/369953133",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19710#issuecomment-369953133",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19710",
    "id": 369953133,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTk1MzEzMw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-02T15:30:21Z",
    "updated_at": "2018-03-02T15:30:21Z",
    "author_association": "MEMBER",
    "body": "I was just wondering: do we want to use \"real world\" data in the docstring examples in all cases? In many cases it certainly makes sense (like eg pivot), but maybe not in all.\r\n\r\nLet's consider the `Series.mean` docstring (which currently has no examples). \r\nI think simply doing:\r\n\r\n```\r\n>>> s = pd.Series([1, 2, 3, 4])\r\n>>> s.mean()\r\n2.5\r\n```\r\n\r\ncan be illustrative enough, while loading a realistic series/dataframe from `pandas.io.samples` or constructing one, can just give overhead that is not really needed.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/369956265",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19710#issuecomment-369956265",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19710",
    "id": 369956265,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTk1NjI2NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-02T15:40:23Z",
    "updated_at": "2018-03-02T15:40:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "Agreed with that. Even things like `factorize(['c', 'c', 'a', 'c'])` can be\neasier to understand than on a \"real world\" example. It'll have to be\ncase-by-case.\n\nOn Fri, Mar 2, 2018 at 9:30 AM, Joris Van den Bossche <\nnotifications@github.com> wrote:\n\n> I was just wondering: do we want to use \"real world\" data in the docstring\n> examples in all cases? In many cases it certainly makes sense (like eg\n> pivot), but maybe not in all.\n>\n> Let's consider the Series.mean docstring (which currently has no\n> examples).\n> I think simply doing:\n>\n> >>> s = pd.Series([1, 2, 3, 4])\n> >>> s.mean()\n> 2.5\n>\n> can be illustrative enough, while loading a realistic series/dataframe\n> from pandas.io.samples or constructing one, can just give overhead that\n> is not really needed.\n>\n> â€”\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/pandas-dev/pandas/issues/19710#issuecomment-369953133>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABQHIjzFBXhu-hH2CUA1BmjXdSQV3QQAks5taWWUgaJpZM4SGjPf>\n> .\n>\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/369960464",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19710#issuecomment-369960464",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19710",
    "id": 369960464,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTk2MDQ2NA==",
    "user": {
      "login": "datapythonista",
      "id": 10058240,
      "node_id": "MDQ6VXNlcjEwMDU4MjQw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10058240?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datapythonista",
      "html_url": "https://github.com/datapythonista",
      "followers_url": "https://api.github.com/users/datapythonista/followers",
      "following_url": "https://api.github.com/users/datapythonista/following{/other_user}",
      "gists_url": "https://api.github.com/users/datapythonista/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datapythonista/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datapythonista/subscriptions",
      "organizations_url": "https://api.github.com/users/datapythonista/orgs",
      "repos_url": "https://api.github.com/users/datapythonista/repos",
      "events_url": "https://api.github.com/users/datapythonista/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datapythonista/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-02T15:53:31Z",
    "updated_at": "2018-03-02T15:53:31Z",
    "author_association": "MEMBER",
    "body": "Yes, that makes sense. I still think it should be room for standardizing, but if that sounds good to you, I'll change the document to encourage people to use examples asap, and I will provide some examples to give an idea in different cases (with missing values, with dates,...).\r\n\r\nSo, probably makes more sense to add these `[1, 2, 3, 4]` as well as some suggestions for \"real world\" ones in the document, and forget about including any data in pandas?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/370452722",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19710#issuecomment-370452722",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19710",
    "id": 370452722,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDQ1MjcyMg==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-05T15:20:00Z",
    "updated_at": "2018-03-05T15:20:10Z",
    "author_association": "MEMBER",
    "body": "Found the original issue that already reported this (or at leas the \"realistic examples\" part): https://github.com/pandas-dev/pandas/issues/16709\r\n\r\nExample given there was a groupby one:\r\n\r\n\r\n```\r\nIn [13]: df2 = pd.DataFrame({'X' : ['B', 'B', 'A', 'A'], 'Y' : [1, 2, 3, 4]})\r\n\r\nIn [14]: df2.groupby(['X']).sum()\r\nOut[14]: \r\n   Y\r\nX   \r\nA  7\r\nB  3\r\n```\r\n\r\nmight be less useful than this version:\r\n\r\n```\r\nIn [13]: pets = pd.DataFrame({'animal' : ['dog', 'dog', 'cat', 'cat'], 'weight' : [10, 20, 8, 9]})\r\n\r\nIn [14]: pets.groupby(['weight']).mean()\r\nOut[14]: \r\n   weight\r\nanimal   \r\ndog  15\r\ncat  8.5\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/370850289",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19710#issuecomment-370850289",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19710",
    "id": 370850289,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDg1MDI4OQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-06T16:56:26Z",
    "updated_at": "2018-03-06T16:56:26Z",
    "author_association": "MEMBER",
    "body": "> Yes, that makes sense. I still think it should be room for standardizing, but if that sounds good to you, I'll change the document to encourage people to use examples asap, and I will provide some examples to give an idea in different cases (with missing values, with dates,...).\r\n\r\n@datapythonista sorry for the late answer. I agree it would still be good to reuse some typical datasets for those cases where it adds value (more complex examples, eg like pivot).\r\n\r\nSo the above sounds good! That's probably more realistic than getting the examples in a `pandas.io.samples`\r\n\r\n> So, probably makes more sense to add these [1, 2, 3, 4] as well as some suggestions for \"real world\" ones in the document, and forget about including any data in pandas?\r\n\r\nI think it is still interesting to have them included in pandas. But let's start with adding some to the guide? (so they can already be used like that in the examples, and discuss including them later)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/380207643",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19710#issuecomment-380207643",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19710",
    "id": 380207643,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDIwNzY0Mw==",
    "user": {
      "login": "colinmorris",
      "id": 695907,
      "node_id": "MDQ6VXNlcjY5NTkwNw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/695907?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/colinmorris",
      "html_url": "https://github.com/colinmorris",
      "followers_url": "https://api.github.com/users/colinmorris/followers",
      "following_url": "https://api.github.com/users/colinmorris/following{/other_user}",
      "gists_url": "https://api.github.com/users/colinmorris/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/colinmorris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/colinmorris/subscriptions",
      "organizations_url": "https://api.github.com/users/colinmorris/orgs",
      "repos_url": "https://api.github.com/users/colinmorris/repos",
      "events_url": "https://api.github.com/users/colinmorris/events{/privacy}",
      "received_events_url": "https://api.github.com/users/colinmorris/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-10T18:47:43Z",
    "updated_at": "2018-04-10T18:47:43Z",
    "author_association": "NONE",
    "body": "As @jorisvandenbossche mentioned at the top, seaborn has a standard set of built-in [example datasets](https://github.com/mwaskom/seaborn-data) that are used throughout the docs. I'd like to point to that as a success story that's worth emulating. Anecdotally, I've found it to be *very* effective for making examples of unfamiliar functions easier to grasp.\r\n\r\nSee, e.g. the examples section for the docs on [factorplot](https://seaborn.pydata.org/generated/seaborn.factorplot.html). If instead they had used randomly generated values and labels like `['A', 'B', 'C']`, `['foo', 'bar', 'baz']`, those examples would be so much less useful."
  }
]
