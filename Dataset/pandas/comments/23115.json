[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/429478923",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23115#issuecomment-429478923",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23115",
    "id": 429478923,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyOTQ3ODkyMw==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-12T22:22:39Z",
    "updated_at": "2018-10-12T22:22:39Z",
    "author_association": "MEMBER",
    "body": "Not sure of the history but do wonder if it wouldn't make sense to combine `dev` and `optional` into just `optional`. To answer your second question about pip, we maybe should start taking pipenv into consideration as well which AFAICT only allows for `required` and `dev` dependencies (not an expert there so could be wrong). "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/435466363",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23115#issuecomment-435466363",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23115",
    "id": 435466363,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTQ2NjM2Mw==",
    "user": {
      "login": "datapythonista",
      "id": 10058240,
      "node_id": "MDQ6VXNlcjEwMDU4MjQw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10058240?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datapythonista",
      "html_url": "https://github.com/datapythonista",
      "followers_url": "https://api.github.com/users/datapythonista/followers",
      "following_url": "https://api.github.com/users/datapythonista/following{/other_user}",
      "gists_url": "https://api.github.com/users/datapythonista/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datapythonista/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datapythonista/subscriptions",
      "organizations_url": "https://api.github.com/users/datapythonista/orgs",
      "repos_url": "https://api.github.com/users/datapythonista/repos",
      "events_url": "https://api.github.com/users/datapythonista/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datapythonista/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-02T18:19:38Z",
    "updated_at": "2018-11-02T18:19:38Z",
    "author_association": "MEMBER",
    "body": "@jreback can you help me understand about the difference between dev dependencies and optional dependencies? Thanks!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/435486239",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23115#issuecomment-435486239",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23115",
    "id": 435486239,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTQ4NjIzOQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-02T19:36:16Z",
    "updated_at": "2018-11-02T19:36:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "> What is the reason for splitting into dev and optional? And are they enough to justify the increased complexity?\r\n\r\nprobably not worth the complexity.\r\n\r\n> Is it an option to provide only the dependencies for conda?\r\n\r\nI have a slight preference for providing both. But auto-generating is fine as well. Really, I think we should just have a code check that runs convert_deps.py and ensures that there's no change in the dependencies (to ensure we don't add dependencies to the auto-generated file).\r\n\r\n> For the CI dependencies...\r\n\r\nI value having a single `environment.yaml` per job. It's sometimes enough to reproduce an error locally. I'd be OK with consolidating those some how, as long as we retain a way to get the exact environment.yaml passed to conda on the CI run. Having a single file that generates `environment.yaml`s may make it easier to see exactly what is tested, and what's pinned, etc."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/435502819",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23115#issuecomment-435502819",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23115",
    "id": 435502819,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTUwMjgxOQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-02T20:42:09Z",
    "updated_at": "2018-11-02T20:42:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "the CI are already way simpler than before tom refactored\r\n\r\nam -1 on changing this anymore\r\nwe purposely test many scenarios and are adequately coveraged now"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/435571313",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23115#issuecomment-435571313",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23115",
    "id": 435571313,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTU3MTMxMw==",
    "user": {
      "login": "datapythonista",
      "id": 10058240,
      "node_id": "MDQ6VXNlcjEwMDU4MjQw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10058240?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datapythonista",
      "html_url": "https://github.com/datapythonista",
      "followers_url": "https://api.github.com/users/datapythonista/followers",
      "following_url": "https://api.github.com/users/datapythonista/following{/other_user}",
      "gists_url": "https://api.github.com/users/datapythonista/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datapythonista/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datapythonista/subscriptions",
      "organizations_url": "https://api.github.com/users/datapythonista/orgs",
      "repos_url": "https://api.github.com/users/datapythonista/repos",
      "events_url": "https://api.github.com/users/datapythonista/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datapythonista/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-03T08:44:28Z",
    "updated_at": "2018-11-03T08:44:28Z",
    "author_association": "MEMBER",
    "body": "Thanks for the feedback.\r\n\r\nBesides generating the dependencies files automatically, that I trust you experience an may not be a good idea, it may still be worth cleaning a bit. May be separating the yaml files from the scripts, unifying the scripts in ci and scripts, which to me seems somehow arbitrary, making it simpler and more standard for users to set up pandas.\r\n\r\nI'll try to open a PR, so we don't need to discuss things in an abstract way."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/435582308",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23115#issuecomment-435582308",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23115",
    "id": 435582308,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTU4MjMwOA==",
    "user": {
      "login": "datapythonista",
      "id": 10058240,
      "node_id": "MDQ6VXNlcjEwMDU4MjQw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10058240?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datapythonista",
      "html_url": "https://github.com/datapythonista",
      "followers_url": "https://api.github.com/users/datapythonista/followers",
      "following_url": "https://api.github.com/users/datapythonista/following{/other_user}",
      "gists_url": "https://api.github.com/users/datapythonista/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datapythonista/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datapythonista/subscriptions",
      "organizations_url": "https://api.github.com/users/datapythonista/orgs",
      "repos_url": "https://api.github.com/users/datapythonista/repos",
      "events_url": "https://api.github.com/users/datapythonista/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datapythonista/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-03T11:59:23Z",
    "updated_at": "2018-11-03T12:39:02Z",
    "author_association": "MEMBER",
    "body": "I've been taking a look at the dependencies, and I generated a spreadsheet with what we have in each file.\r\n\r\nI see couple of things that I'm not sure are intentional:\r\n- The `azure-37-locale` file is using Python 3.6\r\n- In most cases, for Python 2.7 we use pytz=2013b, but not in azure-windows-27 (in travis-27-locale we have it twice, with and without the version). Same for xlswriter.\r\n- I think python-dateutil should always be in the requirements. It's missing in few files, and in azure-windows-27 the package name is dateutil instead of python-dateutil (I guess this last thing is correct, and the windows version for 2.7 is maintained in that other package in conda, but we probably should have a comment)\r\n- cython is pinned to 0.28.2 for Python 2.7, except for windows\r\n- mock is only used in one of the Python 2.7 (travis-27), so I guess we are not using mock anymore, and that one could also be removed\r\n- hypothesis is sometimes installed using conda, and some times using pip.\r\n- For sqlalchemy, we have the version pinned for Python 2.7, but a different one in each case. Not sure if we want to test all them, or just happened to be like this.\r\n\r\nThen, for me it's very difficult to tell what we install in every case (and why). After taking a look at all files, I'm more strongly in favor of generating the files:\r\n- First to avoid errors and inconsistecies\r\n- Second to have some sort of documentation or information on why the packages are installed (code like`if pyhon_version == 2: pytz_version = '2013b'` would be very helpful to understand what are we doing)\r\n\r\n@TomAugspurger @jreback @jorisvandenbossche  thoughts?\r\n\r\nI attach the file I generated, in case you want to take a look:\r\n\r\n[pandas_deps.xlsx](https://github.com/pandas-dev/pandas/files/2544915/pandas_deps.xlsx)\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/435830245",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23115#issuecomment-435830245",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23115",
    "id": 435830245,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTgzMDI0NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-05T10:41:41Z",
    "updated_at": "2018-11-05T10:41:52Z",
    "author_association": "MEMBER",
    "body": "I think we should split the discussion in two parts: dependencies for CI vs dependencies for contributors (to set up their local dev environment).\r\n\r\nThe question you raised above about *\"What is the reason for splitting into dev and optional? And are they enough to justify the increased complexity?\"* is as far as I know only about the contributor dependencies (and not CI) ? \r\nAlso, those `environment-dev.yaml` and `requirements-optional.txt` files live in a directory of a lot of files, which can be quite overwhelming if a contributor looks at this. Therefore, it might be a good idea to either move those somewhere else, or either move the actual CI requirement/environment files one folder down (either all in a `/requirements` or have one directory for each platform (`/travis`, `/azure`, ..)\r\n\r\nYour last exploration and your proposal to autogenerate those files is then only about the CI dependencies I think? \r\nDo you have a concrete idea on how to autogenerate them? How to encode all the information for the different environments (package versions, which package to install, ...) in a single overview? I am not sure if encoding all this in a python if/else structure in a `.py` file will be very clear. We could maybe have an actual table/spreadsheet of packages (rows) vs environments (columns) with indication if it is installed or not and their versions (values) ? "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/435830943",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23115#issuecomment-435830943",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23115",
    "id": 435830943,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTgzMDk0Mw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-05T10:44:21Z",
    "updated_at": "2018-11-05T10:44:21Z",
    "author_association": "MEMBER",
    "body": "> We could maybe have an actual table/spreadsheet of packages (rows) vs environments (columns) with indication if it is installed or not and their versions (values) ?\r\n\r\nOK, didn't see your second unnamed sheet .. ;) Because that is doing exactly that. You now did this as exploration, but would you consider something cleaned-up like that as basis for autogeneration?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/435842798",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23115#issuecomment-435842798",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23115",
    "id": 435842798,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTg0Mjc5OA==",
    "user": {
      "login": "datapythonista",
      "id": 10058240,
      "node_id": "MDQ6VXNlcjEwMDU4MjQw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10058240?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datapythonista",
      "html_url": "https://github.com/datapythonista",
      "followers_url": "https://api.github.com/users/datapythonista/followers",
      "following_url": "https://api.github.com/users/datapythonista/following{/other_user}",
      "gists_url": "https://api.github.com/users/datapythonista/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datapythonista/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datapythonista/subscriptions",
      "organizations_url": "https://api.github.com/users/datapythonista/orgs",
      "repos_url": "https://api.github.com/users/datapythonista/repos",
      "events_url": "https://api.github.com/users/datapythonista/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datapythonista/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-05T11:30:12Z",
    "updated_at": "2018-11-05T11:42:23Z",
    "author_association": "MEMBER",
    "body": "I agree on your points. I'm discussing (at least) two things here.\r\n\r\nFor the contributors dependencies, I don't know of any case of users who install `dev` but not `optional` (and `optional` is creating confusion often with new contributors). I'd respect conda standard and simply provide `environment.yml` with all them in the root of the project (so the environment can be created by simply running `conda env create`).\r\n\r\nI'd personally not provide dependencies for pip. But if we do, I'd generate them automatically from `environment.yml` to `requirements.txt` in the root (that's the standard for pip afaik). And add to the CI a check to make sure that the two versions always match.\r\n\r\nThis could be `environment.yml` (we can divide the dependencies in sections, and in the case that a user really needs to install just a subset, it can do it by editing that file and commenting the parts that is not interested in).\r\n\r\n```yaml\r\nname: pandas-dev\r\n\r\nchannels:\r\n  - defaults\r\n  - conda-forge\r\n\r\ndependencies:\r\n  # required\r\n  - NumPy\r\n  - python-dateutil>=2.5.0\r\n  - pytz\r\n\r\n  # development\r\n  - Cython>=0.28.2\r\n  - flake8\r\n  - flake8-comprehensions\r\n  - hypothesis>=3.58.0\r\n  - isort\r\n  - moto\r\n  - pytest>=3.6\r\n  - python=3\r\n  - setuptools>=24.2.0\r\n  - sphinx\r\n  - sphinxcontrib-spelling\r\n\r\n  # optional\r\n  - beautifulsoup4>=4.2.1\r\n  - blosc\r\n  - bottleneck>=1.2.0\r\n  - fastparquet\r\n  - gcsfs\r\n  - html5lib\r\n  - ipython>=5.6.0\r\n  - ipykernel\r\n  - jinja2\r\n  - lxml\r\n  - matplotlib>=2.0.0\r\n  - nbsphinx\r\n  - numexpr>=2.6.1\r\n  - openpyxl\r\n  - pyarrow>=0.4.1\r\n  - pymysql\r\n  - pytables>=3.4.2  # pip: tables>=3.4.2\r\n  - pytest-cov\r\n  - pytest-xdist\r\n  - s3fs\r\n  - scipy>=0.18.1\r\n  - seaborn\r\n  - sqlalchemy\r\n  - statsmodels\r\n  - xarray\r\n  - xlrd\r\n  - xlsxwriter\r\n  - xlwt\r\n```\r\n\r\nRegarding the dependencies for CI. I think it's impossible to maintain what we have without incurring in errors and inconsistencies. I need some more info to have an informed opinion, and make a proposal, but something like this sounds like a much better option:\r\n```python\r\ndeps = ['numpy', 'pytz', 'python-dateutil', 'pytest']\r\n\r\nif docs:\r\n    deps += ['sphinx',\r\n             'nbsphinx',  # used for the `.. ipython:: python` directive\r\n             ...]\r\nif slow:\r\n    deps += ['pymysql', ...]\r\n\r\nif py2:\r\n    deps.remove('pytz')\r\n    deps += ['pytz=2013b', ...]\r\n```\r\n\r\nThis would make very clear what do we need in each case, we could have comments to document why a dependency is needed, changes (upgrading a version for example) would just be made in one place, simplifying work and avoiding errors... And we wouldn't need to have the 10 or more files adding clutter to the `ci/` directory.\r\n\r\nMay be I'm missing something, but it seems a much much better approach to me."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/435936699",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23115#issuecomment-435936699",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23115",
    "id": 435936699,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTkzNjY5OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-05T16:21:39Z",
    "updated_at": "2018-11-05T16:21:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "+1 on changing users to have a single file. The reason we had multiple files is to make it 'faster' to install, but I suspect it doesn't make much difference at the end of the day and avoids problems of having deps installed.\r\n\r\n+0 on consolidating the CI dep files a little. Its already in the /ci directory so a user shouldn't even be caring about this if they actually read the documentation.\r\n\r\n-1 on trying to change even more the CI .yaml files. These are quite straightforward atm. These are meant to test very specific things; consolidating these has in the past caused us not to test what we want, IOW to test oldest possible versions of things and/or separate the CI runs into logical groups (e.g. slow tests on older vesrions of python and so on )."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/435940706",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23115#issuecomment-435940706",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23115",
    "id": 435940706,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTk0MDcwNg==",
    "user": {
      "login": "datapythonista",
      "id": 10058240,
      "node_id": "MDQ6VXNlcjEwMDU4MjQw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10058240?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datapythonista",
      "html_url": "https://github.com/datapythonista",
      "followers_url": "https://api.github.com/users/datapythonista/followers",
      "following_url": "https://api.github.com/users/datapythonista/following{/other_user}",
      "gists_url": "https://api.github.com/users/datapythonista/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datapythonista/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datapythonista/subscriptions",
      "organizations_url": "https://api.github.com/users/datapythonista/orgs",
      "repos_url": "https://api.github.com/users/datapythonista/repos",
      "events_url": "https://api.github.com/users/datapythonista/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datapythonista/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-05T16:32:03Z",
    "updated_at": "2018-11-05T16:32:03Z",
    "author_association": "MEMBER",
    "body": "I fail to see how unifying/automating things a bit in the generation of CI yaml files should cause more confusion on what is being tested than maintaining 14 independent files. But I don't have the experience you have with the CI. So if you and @TomAugspurger are sure about that, let's forget about it.\r\n\r\nBtw, did you check the points I mentioned in https://github.com/pandas-dev/pandas/issues/23115#issuecomment-435582308 ? I guess at least the first one is an error, not sure about the others.\r\n\r\nRegarding the single `environment.yml` file, if anyone opposes to simplify that, we just need to decide:\r\n1. We provide just conda and not pip files\r\n2. We provide both, and we maintain them manually\r\n3. We provide both, we generate the pip one with a script, and we validate in the CI that they match\r\n\r\nI'd start by 1, and would implement 3 only if users complain. :)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/435945502",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23115#issuecomment-435945502",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23115",
    "id": 435945502,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTk0NTUwMg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-05T16:44:14Z",
    "updated_at": "2018-11-05T16:44:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have a slight preference for many environment.yaml files, rather than generating them, since it makes the CI stuff a bit more explicit (smaller chance of us accidentally not testing something because of a bug in whatever we would use to generate them).\r\n\r\nI think seeing a matrix of exactly what deps we test where would be extremely valuable. I started to write a script to do this. IIRC I stopped since `conda env create` doesn't have the equivalent of a `--dry-run`. But maybe just doing things statically would be enough?\r\n\r\nI have a slight preference for providing both an `environment.yaml` and a `requirements-dev.txt` with all the deps. Not having an obvious requirements-dev.txt may make us look like bad Python citizens."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/435945600",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23115#issuecomment-435945600",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23115",
    "id": 435945600,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNTk0NTYwMA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-05T16:44:27Z",
    "updated_at": "2018-11-05T16:44:37Z",
    "author_association": "MEMBER",
    "body": "\\+ 1 on a ci/env_files/ directory or something\r\n\r\n+1 on joris's suggestion to split the discussion along CI vs user-facing lines\r\n\r\n> Then, for me it's very difficult to tell what we install in every case (and why)\r\n\r\nIf this is not obvious to @datapythonista, this is prima facie evidence that things can be better-documented or otherwise clarified."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436161289",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23115#issuecomment-436161289",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23115",
    "id": 436161289,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjE2MTI4OQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-06T07:53:19Z",
    "updated_at": "2018-11-06T07:53:19Z",
    "author_association": "MEMBER",
    "body": "CI deps:\r\n\r\n> I have a slight preference for many environment.yaml files, rather than generating them, since it makes the CI stuff a bit more explicit\r\n\r\nWe can still check-in the autogenerated yaml files, then you don't have this concern?\r\n\r\n---\r\n\r\nContributor deps:\r\n\r\n> I have a slight preference for providing both an environment.yaml and a requirements-dev.txt with all the deps. Not having an obvious requirements-dev.txt may make us look like bad Python citizens.\r\n\r\n+1\r\n\r\n> We provide both, we generate the pip one with a script\r\n\r\nIsn't that what we already do? The pip requirement files are autogenerated.\r\n\r\nBTW, I am fine with providing a single environment file instead of the dev + optional files for *contributors*. But, I think it is still useful to distinguish those two \"kinds\" of dependencies (eg in the docs): the dev dependencies are those dependencies that are needed to build pandas + run the test suite. With just those, the test suite *should* pass, as we should skip all tests that use *optional* dependencies (which is not the case for *test* dependencies). I think this notion can be useful for people who want to do a minimal install of pandas but want to test their installation.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436161335",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23115#issuecomment-436161335",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23115",
    "id": 436161335,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjE2MTMzNQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-06T07:53:35Z",
    "updated_at": "2018-11-06T07:53:35Z",
    "author_association": "MEMBER",
    "body": "OK, see that there are already PRs, will check those :)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436439454",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23115#issuecomment-436439454",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23115",
    "id": 436439454,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjQzOTQ1NA==",
    "user": {
      "login": "datapythonista",
      "id": 10058240,
      "node_id": "MDQ6VXNlcjEwMDU4MjQw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10058240?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datapythonista",
      "html_url": "https://github.com/datapythonista",
      "followers_url": "https://api.github.com/users/datapythonista/followers",
      "following_url": "https://api.github.com/users/datapythonista/following{/other_user}",
      "gists_url": "https://api.github.com/users/datapythonista/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datapythonista/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datapythonista/subscriptions",
      "organizations_url": "https://api.github.com/users/datapythonista/orgs",
      "repos_url": "https://api.github.com/users/datapythonista/repos",
      "events_url": "https://api.github.com/users/datapythonista/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datapythonista/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-06T22:55:13Z",
    "updated_at": "2018-11-06T22:55:13Z",
    "author_association": "MEMBER",
    "body": "In case it's useful for anyone else, I upload a summary of the builds we have.\r\n\r\n[pandas_builds.xlsx](https://github.com/pandas-dev/pandas/files/2555336/pandas_builds.xlsx)\r\n"
  }
]
