[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/404305385",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21866#issuecomment-404305385",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21866",
    "id": 404305385,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDMwNTM4NQ==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-11T20:52:09Z",
    "updated_at": "2018-07-11T20:52:09Z",
    "author_association": "MEMBER",
    "body": "A little over my head but can you clarify the problem further? Is this something visible from the end user perspective?\r\n\r\nI wouldn't really consider the items you've labeled as workarounds to actually be such, as `np.nan != np.nan` generally, i.e. that's not just a pandas construct"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/404402552",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21866#issuecomment-404402552",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21866",
    "id": 404402552,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDQwMjU1Mg==",
    "user": {
      "login": "realead",
      "id": 17513912,
      "node_id": "MDQ6VXNlcjE3NTEzOTEy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/17513912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/realead",
      "html_url": "https://github.com/realead",
      "followers_url": "https://api.github.com/users/realead/followers",
      "following_url": "https://api.github.com/users/realead/following{/other_user}",
      "gists_url": "https://api.github.com/users/realead/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/realead/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/realead/subscriptions",
      "organizations_url": "https://api.github.com/users/realead/orgs",
      "repos_url": "https://api.github.com/users/realead/repos",
      "events_url": "https://api.github.com/users/realead/events{/privacy}",
      "received_events_url": "https://api.github.com/users/realead/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-12T06:22:08Z",
    "updated_at": "2018-07-16T15:23:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "Because of workarounds, I'm not aware of a way for trigging an error in NAN-case (as long as one doesn't care exactly which NAN it is). There is however a way to trigger inconsistent behavior for `0.0`  and `-0.0` (I hope you have enough RAM:)):\r\n\r\n```\r\n#tested with pandas 0.22.0\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\na=np.arange(12*10**8, dtype=np.float64)\r\na[0]=.1\r\na[-1]=0.0\r\na[-2]=-0.0\r\n\r\nb=pd.unique(a)\r\nprint(b.size)\r\n``` \r\n\r\nThe size of b is `6*10^8`, but should be  `6*10^8-1`, because `0.0`  and `-0.0`  are usually handled as equal, e.g.:\r\n\r\n```\r\na=np.zeros(2, dtype=np.float64)\r\na[-1]=0.0\r\na[-2]=-0.0\r\n\r\nb=pd.unique(a)\r\nprint(b.size) # size is 1 now, 0.0 and -0.0 are equal\r\n```\r\n\r\nI do understand, that this is quite an esoteric case. My main issue with the implementation of float64-table as it is: There is a trap which obviously already have bitten at least twice and it will struck again in the future.\r\n\r\nThe problem is not the equal-operator (which is rightly extended with `np.nan != np.nan`) but the way  the hash function is calculated. The proposed fix of the hash-function would eliminate the need for workarounds, because the float64-hashtable would handle NANs and signed zeros correctly out-of-the-box.\r\n\r\n\r\nThis [SO-question](https://stackoverflow.com/questions/51042495/inserting-multiple-not-a-numbers-into-a-stdunordered-setdouble) helped me to understand the issue, maybe it is better than my issue description.\r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/404629055",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21866#issuecomment-404629055",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21866",
    "id": 404629055,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDYyOTA1NQ==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-12T19:46:22Z",
    "updated_at": "2018-07-12T19:46:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Certainly would take an alternative hash function - as the long comment in the code indicates - we used to use python's hash for doubles, but that caused issues due to size truncation, so we're using a generic bit-shuffling one, same that ints use.  As you show `0.0, -0.0` could be an issue.\r\n\r\nBut I think our approach for NaNs is fine?  It's special cased, yes, but `NaN` is a special case throughout pandas, so don't really see a need for purity here?  But open to suggestions if there's a cleaner way to embed our assumptions into the hash function itself."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/404690368",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21866#issuecomment-404690368",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21866",
    "id": 404690368,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDY5MDM2OA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-13T00:30:09Z",
    "updated_at": "2018-07-13T00:30:09Z",
    "author_association": "MEMBER",
    "body": "A very esoteric bug indeed, but nonetheless a bug.  At the very least, `0.0, -0.0` should be addressed."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/404968496",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21866#issuecomment-404968496",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21866",
    "id": 404968496,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwNDk2ODQ5Ng==",
    "user": {
      "login": "realead",
      "id": 17513912,
      "node_id": "MDQ6VXNlcjE3NTEzOTEy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/17513912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/realead",
      "html_url": "https://github.com/realead",
      "followers_url": "https://api.github.com/users/realead/followers",
      "following_url": "https://api.github.com/users/realead/following{/other_user}",
      "gists_url": "https://api.github.com/users/realead/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/realead/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/realead/subscriptions",
      "organizations_url": "https://api.github.com/users/realead/orgs",
      "repos_url": "https://api.github.com/users/realead/repos",
      "events_url": "https://api.github.com/users/realead/events{/privacy}",
      "received_events_url": "https://api.github.com/users/realead/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-13T22:22:22Z",
    "updated_at": "2018-07-13T22:22:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Added my suggestion as PR21904, it fixes both cases NaNs and signed zero. I think both are necessary: Using directly the `Float64HashTable` (instead of` pd.unique()`) it is much easier to trigger the bug for NaNs and 0.0/-0.0:\r\n\r\n```\r\nfrom pandas._libs import hashtable as ht\r\nm = ht.Float64HashTable(12 * 10**8) \r\nm.set_item(np.nan, 0)\r\nm.set_item(-np.nan, 0)\r\nassert len(m) == 1 \r\n```\r\n\r\nor \r\n\r\n```\r\nfrom pandas._libs import hashtable as ht\r\nm = ht.Float64HashTable(12 * 10**8)\r\nm.set_item(np.nan, -0.0)\r\nm.set_item(-np.nan, -0.0)\r\nassert len(m) == 1 \r\n```\r\n\r\nPS:  don't know  the right place for whatsnew entry, I hope, that in case the changes are ok, I will be guided to the right place...\r\n \r\n"
  }
]
