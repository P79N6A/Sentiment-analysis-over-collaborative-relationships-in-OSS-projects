[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/22223392",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4491#issuecomment-22223392",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4491",
    "id": 22223392,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjIzMzky",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-07T01:06:33Z",
    "updated_at": "2013-08-07T01:06:33Z",
    "author_association": "MEMBER",
    "body": "Separately, the memory usage of MultiIndex is totally unacceptable in reindexing operations (the creation of an array of python tuples --> hash table is super inefficient). More work to do there too. cc @njsmith\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/22224808",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4491#issuecomment-22224808",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4491",
    "id": 22224808,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjI0ODA4",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-07T01:48:58Z",
    "updated_at": "2013-08-07T01:48:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "So the garbage collector DOES get the memory, but if we add a `__del__` it it removed 'faster'\n\nCurrent master\n\n```\nIn [1]: import gc\n\nIn [2]: def f():\n   ...:     s = Series(randn(100000))\n   ...:     s[100]\n   ...:     \n\nIn [3]: %memit -r 10 f()\nmaximum of 10: 76.613281 MB per loop\n\nIn [4]: %memit -r 10 f()\nmaximum of 10: 105.117188 MB per loop\n\nIn [5]: %memit -r 10 f()\nmaximum of 10: 132.832031 MB per loop\n\nIn [6]: gc.collect()\nOut[6]: 260\n\nIn [7]: %memit -r 10 f()\nmaximum of 10: 76.640625 MB per loop\n\nIn [8]: %memit -r 10 f()\nmaximum of 10: 104.425781 MB per loop\n\nIn [9]: %memit -r 10 f()\nmaximum of 10: 132.210938 MB per loop\n```\n\nAdding to `core/series.py`\n\n```\n    def __del__(self):\n        if self._index is not None:\n            self._index._cleanup()\n            self._index = None\n```\n\n```\nIn [1]: import gc\n\nIn [2]: def f():\n   ...:     s = Series(randn(100000))\n   ...:     s[100]\n   ...:     \n\nIn [3]: %memit -r 10 f()\nmaximum of 10: 58.546875 MB per loop\n\nIn [4]: %memit -r 10 f()\nmaximum of 10: 66.179688 MB per loop\n\nIn [5]: %memit -r 10 f()\nmaximum of 10: 74.593750 MB per loop\n\nIn [6]: gc.collect()\nOut[6]: 260\n\nIn [7]: %memit -r 10 f()\nmaximum of 10: 59.378906 MB per loop\n\nIn [8]: %memit -r 10 f()\nmaximum of 10: 67.007812 MB per loop\n\nIn [9]: %memit -r 10 f()\nmaximum of 10: 74.648438 MB per loop\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/22235156",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4491#issuecomment-22235156",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4491",
    "id": 22235156,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMjM1MTU2",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-07T07:49:37Z",
    "updated_at": "2013-08-07T07:49:37Z",
    "author_association": "NONE",
    "body": "If you want memory to be released more promptly, then your best bet is to\nget rid of the reference cycle, not add a **del** method. You clearly have\nsome reference cycle somewhere since that's the only situation in which\nmemory is \\* not\\* freed immediately, and also the only situation in which\nthe gc  gets involved at all. _But_ if you have a **del** method on an\nobject in a cycle, then it can't be freed at all (!), so **del** is a risky\ntool to be using to manage cycles.\nOn 7 Aug 2013 02:49, \"jreback\" notifications@github.com wrote:\n\n> So the garbage collector DOES get the memory, but if we add a **del** it\n> it removed 'faster'\n> \n> Current master\n> \n> In [1]: import gc\n> \n> In [2]: def f():\n>    ...:     s = Series(randn(100000))\n>    ...:     s[100]\n>    ...:\n> \n> In [3]: %memit -r 10 f()\n> maximum of 10: 76.613281 MB per loop\n> \n> In [4]: %memit -r 10 f()\n> maximum of 10: 105.117188 MB per loop\n> \n> In [5]: %memit -r 10 f()\n> maximum of 10: 132.832031 MB per loop\n> \n> In [6]: gc.collect()\n> Out[6]: 260\n> \n> In [7]: %memit -r 10 f()\n> maximum of 10: 76.640625 MB per loop\n> \n> In [8]: %memit -r 10 f()\n> maximum of 10: 104.425781 MB per loop\n> \n> In [9]: %memit -r 10 f()\n> maximum of 10: 132.210938 MB per loop\n> \n> Adding to core/series.py\n> \n> ```\n> def __del__(self):\n>     if self._index is not None:\n>         self._index._cleanup()\n>         self._index = None\n> ```\n> \n> In [1]: import gc\n> \n> In [2]: def f():\n>    ...:     s = Series(randn(100000))\n>    ...:     s[100]\n>    ...:\n> \n> In [3]: %memit -r 10 f()\n> maximum of 10: 58.546875 MB per loop\n> \n> In [4]: %memit -r 10 f()\n> maximum of 10: 66.179688 MB per loop\n> \n> In [5]: %memit -r 10 f()\n> maximum of 10: 74.593750 MB per loop\n> \n> In [6]: gc.collect()\n> Out[6]: 260\n> \n> In [7]: %memit -r 10 f()\n> maximum of 10: 59.378906 MB per loop\n> \n> In [8]: %memit -r 10 f()\n> maximum of 10: 67.007812 MB per loop\n> \n> In [9]: %memit -r 10 f()\n> maximum of 10: 74.648438 MB per loop\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/pydata/pandas/issues/4491#issuecomment-22224808\n> .\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/250611651",
    "html_url": "https://github.com/pandas-dev/pandas/issues/4491#issuecomment-250611651",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4491",
    "id": 250611651,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDYxMTY1MQ==",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-29T22:35:08Z",
    "updated_at": "2016-09-29T22:35:08Z",
    "author_association": "MEMBER",
    "body": "Tabled for pandas 2.0\n"
  }
]
