[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/419572603",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22630#issuecomment-419572603",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22630",
    "id": 419572603,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTU3MjYwMw==",
    "user": {
      "login": "scottgigante",
      "id": 8499679,
      "node_id": "MDQ6VXNlcjg0OTk2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8499679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/scottgigante",
      "html_url": "https://github.com/scottgigante",
      "followers_url": "https://api.github.com/users/scottgigante/followers",
      "following_url": "https://api.github.com/users/scottgigante/following{/other_user}",
      "gists_url": "https://api.github.com/users/scottgigante/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/scottgigante/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/scottgigante/subscriptions",
      "organizations_url": "https://api.github.com/users/scottgigante/orgs",
      "repos_url": "https://api.github.com/users/scottgigante/repos",
      "events_url": "https://api.github.com/users/scottgigante/events{/privacy}",
      "received_events_url": "https://api.github.com/users/scottgigante/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-07T21:37:59Z",
    "updated_at": "2018-09-07T21:37:59Z",
    "author_association": "NONE",
    "body": "A maybe related issue:\r\n```\r\nimport scipy.sparse as sp\r\nimport pandas as pd\r\nimport numpy as np\r\nshape = (500000, 50000)\r\ndata = np.repeat(1, 10000)\r\ni = np.random.choice(shape[0], 10000, replace=False)\r\nj = np.random.choice(shape[1], 10000, replace=False)\r\nX = sp.coo_matrix((data, (i, j)), shape=shape)\r\n\r\ndf = pd.SparseDataFrame(X)\r\n\r\n# this works fine\r\ndf.to_coo().sum(axis=0)\r\n# this takes 400GB of memory and an hour\r\ndf.sum(axis=0)\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/419599760",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22630#issuecomment-419599760",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22630",
    "id": 419599760,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTU5OTc2MA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-08T00:45:57Z",
    "updated_at": "2018-09-08T00:45:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "If you (or someone) could profile the SparseDataFrame constructor to see where time is spent, it'd be most welcome.\r\n\r\nFYI, if you're using pandas' sparse stuff you may be interested in following https://github.com/pandas-dev/pandas/pull/22325 and giving feedback once that's merged (it doesn't fix this performance problem)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/419601911",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22630#issuecomment-419601911",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22630",
    "id": 419601911,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTYwMTkxMQ==",
    "user": {
      "login": "scottgigante",
      "id": 8499679,
      "node_id": "MDQ6VXNlcjg0OTk2Nzk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8499679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/scottgigante",
      "html_url": "https://github.com/scottgigante",
      "followers_url": "https://api.github.com/users/scottgigante/followers",
      "following_url": "https://api.github.com/users/scottgigante/following{/other_user}",
      "gists_url": "https://api.github.com/users/scottgigante/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/scottgigante/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/scottgigante/subscriptions",
      "organizations_url": "https://api.github.com/users/scottgigante/orgs",
      "repos_url": "https://api.github.com/users/scottgigante/repos",
      "events_url": "https://api.github.com/users/scottgigante/events{/privacy}",
      "received_events_url": "https://api.github.com/users/scottgigante/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-08T01:15:04Z",
    "updated_at": "2018-09-08T01:16:49Z",
    "author_association": "NONE",
    "body": "Here it is for the constructor (I reduced the dimension so it didn't take 400GB):\r\n<details>\r\n\r\n```\r\n>>> import scipy.sparse as sp\r\n>>> import pandas as pd\r\n>>> import numpy as np\r\n>>> import cProfile\r\n>>> shape = (50000, 50000)\r\n>>> data = np.repeat(1, 10000)\r\n>>> i = np.random.choice(shape[0], 10000, replace=False)\r\n>>> j = np.random.choice(shape[1], 10000, replace=False)\r\n>>> X = sp.coo_matrix((data, (i, j)), shape=shape)\r\n>>>\r\n>>> cProfile.run('pd.SparseDataFrame(X, index=np.arange(shape[0]).astype(str))')\r\n         37201535 function calls (36931514 primitive calls) in 599.169 seconds\r\n\r\n   Ordered by: standard name\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n   350027    0.110    0.000    0.490    0.000 <frozen importlib._bootstrap>:1009(_handle_fromlist)\r\n   120007    0.120    0.000    0.208    0.000 <frozen importlib._bootstrap>:416(parent)\r\n        1    0.436    0.436  599.169  599.169 <string>:1(<module>)\r\n        3    0.004    0.001    0.004    0.001 __init__.py:124(lrange)\r\n   220007    0.182    0.000    0.344    0.000 __init__.py:205(iteritems)\r\n        1    0.000    0.000    0.003    0.003 _decorators.py:136(wrapper)\r\n    50001    0.023    0.000    0.505    0.000 _methods.py:34(_sum)\r\n        2    0.000    0.000    0.000    0.000 _methods.py:42(_any)\r\n        1    0.000    0.000    0.000    0.000 _validators.py:114(_check_for_invalid_keys)\r\n        1    0.000    0.000    0.000    0.000 _validators.py:130(validate_kwargs)\r\n    10000    0.005    0.000    0.007    0.000 _validators.py:221(validate_bool_kwarg)\r\n        1    0.000    0.000    0.000    0.000 _validators.py:32(_check_for_default_values)\r\n    50003    0.019    0.000    0.054    0.000 abc.py:137(__instancecheck__)\r\n        1    0.000    0.000    0.000    0.000 algorithms.py:141(_reconstruct_data)\r\n        2    0.000    0.000    0.000    0.000 algorithms.py:1421(_get_take_nd_function)\r\n        2    0.000    0.000    0.000    0.000 algorithms.py:1548(take_nd)\r\n        1    0.000    0.000    0.000    0.000 algorithms.py:172(_ensure_arraylike)\r\n        1    0.000    0.000    0.000    0.000 algorithms.py:224(_get_data_algo)\r\n        1    0.000    0.000    0.001    0.001 algorithms.py:449(_factorize_array)\r\n        2    0.000    0.000    0.000    0.000 algorithms.py:48(_ensure_data)\r\n        1    0.000    0.000    0.003    0.003 algorithms.py:576(factorize)\r\n   150001    0.439    0.000    2.800    0.000 array.py:156(__new__)\r\n   150001    0.237    0.000    1.127    0.000 array.py:200(_simple_new)\r\n    50000    0.024    0.000    0.030    0.000 array.py:234(kind)\r\n   150001    0.123    0.000    0.161    0.000 array.py:281(__array_finalize__)\r\n   100000    0.048    0.000    0.151    0.000 array.py:347(sp_values)\r\n   100000    0.022    0.000    0.022    0.000 array.py:352(fill_value)\r\n    50000    0.121    0.000    0.889    0.000 array.py:547(copy)\r\n    50000    0.055    0.000    1.109    0.000 array.py:751(_maybe_to_sparse)\r\n   100001    0.152    0.000    0.640    0.000 array.py:758(_sanitize_values)\r\n        1    0.000    0.000    0.000    0.000 array.py:785(make_sparse)\r\n        1    0.000    0.000    0.000    0.000 array.py:837(_make_index)\r\n        1    0.000    0.000    0.000    0.000 arrayprint.py:1110(__init__)\r\n        6    0.000    0.000    0.000    0.000 arrayprint.py:1118(__call__)\r\n        1    0.000    0.000    0.000    0.000 arrayprint.py:1457(array_str)\r\n      3/1    0.000    0.000    0.000    0.000 arrayprint.py:314(_leading_trailing)\r\n        1    0.000    0.000    0.000    0.000 arrayprint.py:348(_get_formatdict)\r\n        1    0.000    0.000    0.000    0.000 arrayprint.py:356(<lambda>)\r\n        1    0.000    0.000    0.000    0.000 arrayprint.py:401(_get_format_function)\r\n        1    0.000    0.000    0.000    0.000 arrayprint.py:453(wrapper)\r\n        1    0.000    0.000    0.000    0.000 arrayprint.py:470(_array2string)\r\n        1    0.000    0.000    0.000    0.000 arrayprint.py:499(array2string)\r\n        1    0.000    0.000    0.000    0.000 arrayprint.py:67(_make_options_dict)\r\n        7    0.000    0.000    0.000    0.000 arrayprint.py:671(_extendLine)\r\n        1    0.000    0.000    0.000    0.000 arrayprint.py:685(_formatArray)\r\n      7/1    0.000    0.000    0.000    0.000 arrayprint.py:694(recurser)\r\n        1    0.000    0.000    0.000    0.000 arrayprint.py:72(<dictcomp>)\r\n        1    0.000    0.000    0.000    0.000 base.py:1187(isspmatrix)\r\n    50000    0.008    0.000    0.008    0.000 base.py:1325(nlevels)\r\n    10000    0.083    0.000    0.215    0.000 base.py:1500(is_monotonic_increasing)\r\n    10002    0.020    0.000    0.029    0.000 base.py:1935(_engine)\r\n    10001    0.007    0.000    0.103    0.000 base.py:1938(<lambda>)\r\n   100000    0.169    0.000    0.581    0.000 base.py:1976(is_all_dates)\r\n    50000    0.013    0.000    0.016    0.000 base.py:2033(__contains__)\r\n    10000    0.034    0.000    0.622    0.000 base.py:2067(__getitem__)\r\n        1    0.000    0.000    0.000    0.000 base.py:2179(take)\r\n   150000    0.247    0.000   68.974    0.000 base.py:2445(equals)\r\n    50000    0.021    0.000    0.082    0.000 base.py:2465(identical)\r\n   110004    1.683    0.000  339.979    0.003 base.py:255(__new__)\r\n        1    0.000    0.000    0.000    0.000 base.py:3071(get_loc)\r\n    50000    0.243    0.000  244.124    0.005 base.py:3578(reindex)\r\n   220004    2.034    0.000    2.674    0.000 base.py:473(_simple_new)\r\n   510007    0.395    0.000  340.068    0.001 base.py:4914(_ensure_index)\r\n    50000    0.019    0.000    0.032    0.000 base.py:4977(_ensure_has_len)\r\n   110000    0.317    0.000    2.571    0.000 base.py:510(_shallow_copy)\r\n    10001    0.033    0.000    0.548    0.000 base.py:520(_shallow_copy_with_infer)\r\n   390036    0.205    0.000    0.298    0.000 base.py:61(is_dtype)\r\n   150000    0.082    0.000    0.107    0.000 base.py:615(is_)\r\n   220005    0.137    0.000    0.137    0.000 base.py:635(_reset_identity)\r\n   270012    0.080    0.000    0.118    0.000 base.py:641(__len__)\r\n   100000    0.028    0.000    0.028    0.000 base.py:662(dtype)\r\n   340006    0.187    0.000    0.480    0.000 base.py:672(values)\r\n    10004    0.005    0.000    0.025    0.000 base.py:677(_values)\r\n   100000    0.043    0.000    0.187    0.000 base.py:711(get_values)\r\n    10001    0.013    0.000    0.096    0.000 base.py:789(_ndarray_values)\r\n        1    0.000    0.000    0.000    0.000 base.py:86(get_shape)\r\n        1    0.000    0.000    0.001    0.001 base.py:893(tolist)\r\n    10003    0.005    0.000    0.006    0.000 base.py:904(_coerce_to_ndarray)\r\n        4    0.000    0.000    0.005    0.001 base.py:912(__iter__)\r\n   120001    0.113    0.000    0.218    0.000 base.py:920(_get_attributes_dict)\r\n   120001    0.081    0.000    0.105    0.000 base.py:922(<dictcomp>)\r\n   110000    0.139    0.000    2.744    0.000 base.py:924(view)\r\n        1    0.000    0.000    0.000    0.000 cast.py:1232(construct_1d_ndarray_preserving_na)\r\n        1    0.000    0.000    0.000    0.000 cast.py:257(maybe_promote)\r\n        1    0.000    0.000    0.000    0.000 cast.py:853(maybe_castable)\r\n        1    0.000    0.000    0.000    0.000 cast.py:867(maybe_infer_to_datetimelike)\r\n        1    0.000    0.000    0.000    0.000 cast.py:971(maybe_cast_to_datetime)\r\n   110005    0.102    0.000    0.563    0.000 common.py:1043(is_datetime64_any_dtype)\r\n        1    0.000    0.000    0.000    0.000 common.py:1170(is_datetime_or_timedelta_dtype)\r\n   160005    0.055    0.000    0.232    0.000 common.py:122(is_sparse)\r\n        1    0.000    0.000    0.000    0.000 common.py:123(_default_index)\r\n        1    0.000    0.000    0.000    0.000 common.py:1405(needs_i8_conversion)\r\n   100001    0.055    0.000    0.094    0.000 common.py:1527(is_float_dtype)\r\n        1    0.000    0.000    0.000    0.000 common.py:154(_all_none)\r\n        1    0.000    0.000    0.000    0.000 common.py:155(is_scipy_sparse)\r\n   100006    0.081    0.000    0.411    0.000 common.py:1578(is_bool_dtype)\r\n        1    0.000    0.000    0.000    0.000 common.py:1629(is_extension_type)\r\n    10009    0.021    0.000    0.078    0.000 common.py:1688(is_extension_array_dtype)\r\n    70007    0.120    0.000    0.288    0.000 common.py:1784(_get_dtype)\r\n880030/880029    0.936    0.000    1.374    0.000 common.py:1835(_get_dtype_type)\r\n        1    0.000    0.000    0.000    0.000 common.py:195(is_categorical)\r\n    10008    0.005    0.000    0.026    0.000 common.py:227(is_datetimetz)\r\n   100001    0.498    0.000  289.411    0.003 common.py:301(_asarray_tuplesafe)\r\n   110007    0.108    0.000    0.347    0.000 common.py:332(is_datetime64_dtype)\r\n   120017    0.054    0.000    0.126    0.000 common.py:369(is_datetime64tz_dtype)\r\n   110007    0.067    0.000    0.255    0.000 common.py:407(is_timedelta64_dtype)\r\n    50004    0.047    0.000    0.191    0.000 common.py:444(is_period_dtype)\r\n   220012    0.098    0.000    0.376    0.000 common.py:477(is_interval_dtype)\r\n   220014    0.111    0.000    0.229    0.000 common.py:513(is_categorical_dtype)\r\n    50001    0.065    0.000    0.524    0.000 common.py:546(is_string_dtype)\r\n        1    0.000    0.000    0.000    0.000 common.py:647(is_datetimelike)\r\n    10003    0.009    0.000    0.029    0.000 common.py:692(is_dtype_equal)\r\n   150001    0.139    0.000    0.493    0.000 common.py:811(is_integer_dtype)\r\n   110006    0.080    0.000    0.136    0.000 common.py:858(is_signed_integer_dtype)\r\n   100004    0.066    0.000    0.468    0.000 common.py:89(is_object_dtype)\r\n   100001    0.054    0.000    0.095    0.000 common.py:907(is_unsigned_integer_dtype)\r\n        1    0.000    0.000    0.000    0.000 coo.py:403(tocoo)\r\n        6    0.000    0.000    0.000    0.000 cycler.py:227(<genexpr>)\r\n        1    0.000    0.000    0.000    0.000 dtypes.py:266(construct_from_string)\r\n        2    0.000    0.000    0.000    0.000 dtypes.py:401(__new__)\r\n        2    0.000    0.000    0.000    0.000 dtypes.py:459(construct_from_string)\r\n    50004    0.096    0.000    0.144    0.000 dtypes.py:584(is_dtype)\r\n   110008    0.192    0.000    0.277    0.000 dtypes.py:707(is_dtype)\r\n        1    0.259    0.259  257.365  257.365 frame.py:139(_init_dict)\r\n        1    0.021    0.021    0.037    0.037 frame.py:143(<dictcomp>)\r\n        1    0.000    0.000    0.001    0.001 frame.py:151(<lambda>)\r\n        1    0.003    0.003    0.003    0.003 frame.py:177(<genexpr>)\r\n        1  104.736  104.736  535.611  535.611 frame.py:188(_init_spmatrix)\r\n        1    0.551    0.551  136.909  136.909 frame.py:210(<dictcomp>)\r\n        1    0.000    0.000    0.000    0.000 frame.py:218(_prep_index)\r\n        1   63.101   63.101  598.711  598.711 frame.py:57(__init__)\r\n        1    0.004    0.004    2.953    2.953 frame.py:933(to_manager)\r\n        1    0.029    0.029    0.029    0.029 frame.py:942(<listcomp>)\r\n        1    0.000    0.000    0.000    0.000 fromnumeric.py:2227(amax)\r\n        1    0.000    0.000    0.000    0.000 fromnumeric.py:2337(amin)\r\n        2    0.000    0.000    0.000    0.000 fromnumeric.py:64(_wrapreduction)\r\n   120003    0.235    0.000    0.235    0.000 generic.py:124(__init__)\r\n    10000    0.001    0.000    0.001    0.000 generic.py:1620(to_dense)\r\n    50000    0.118    0.000    0.173    0.000 generic.py:317(_construct_axes_from_arguments)\r\n    50000    0.027    0.000    0.044    0.000 generic.py:349(<dictcomp>)\r\n   110002    0.158    0.000    0.199    0.000 generic.py:364(_get_axis_number)\r\n    50000    0.378    0.000  253.727    0.005 generic.py:3647(reindex)\r\n   100000    0.100    0.000    0.296    0.000 generic.py:3674(<genexpr>)\r\n    50000    0.244    0.000  252.433    0.005 generic.py:3691(_reindex_axes)\r\n   100001    0.075    0.000    0.102    0.000 generic.py:377(_get_axis_name)\r\n    50000    0.336    0.000    7.879    0.000 generic.py:3789(_reindex_with_indexers)\r\n   100001    0.062    0.000    0.193    0.000 generic.py:390(_get_axis)\r\n    50000    0.027    0.000    0.100    0.000 generic.py:394(_get_block_manager_axis)\r\n   120001    0.169    0.000    0.286    0.000 generic.py:4345(__finalize__)\r\n   120002    0.155    0.000    0.155    0.000 generic.py:4362(__getattr__)\r\n   270005    1.422    0.000    3.275    0.000 generic.py:4378(__setattr__)\r\n    50001    0.064    0.000    0.197    0.000 generic.py:4423(_protect_consolidate)\r\n    50001    0.035    0.000    0.232    0.000 generic.py:4433(_consolidate_inplace)\r\n    50001    0.049    0.000    0.122    0.000 generic.py:4436(f)\r\n    10000    0.030    0.000    0.632    0.000 generic.py:5009(copy)\r\n        1    0.000    0.000    0.001    0.001 generic.py:6592(groupby)\r\n   740054    0.293    0.000    0.463    0.000 generic.py:7(_check)\r\n        1    0.000    0.000    0.000    0.000 groupby.py:2143(groupby)\r\n        1    0.000    0.000    0.000    0.000 groupby.py:2196(__init__)\r\n    10001    0.031    0.000    1.172    0.000 groupby.py:2217(get_iterator)\r\n        1    0.000    0.000    0.003    0.003 groupby.py:2231(_get_splitter)\r\n        1    0.000    0.000    0.000    0.000 groupby.py:2235(_get_group_keys)\r\n        1    0.000    0.000    0.000    0.000 groupby.py:2295(levels)\r\n        1    0.000    0.000    0.000    0.000 groupby.py:2297(<listcomp>)\r\n        1    0.000    0.000    0.003    0.003 groupby.py:2333(group_info)\r\n        1    0.000    0.000    0.003    0.003 groupby.py:2350(_get_compressed_labels)\r\n        1    0.000    0.000    0.003    0.003 groupby.py:2351(<listcomp>)\r\n        1    0.000    0.000    0.000    0.000 groupby.py:2939(__init__)\r\n        2    0.000    0.000    0.003    0.001 groupby.py:3067(labels)\r\n        2    0.000    0.000    0.000    0.000 groupby.py:3089(group_index)\r\n        1    0.000    0.000    0.003    0.003 groupby.py:3095(_make_labels)\r\n        1    0.000    0.000    0.000    0.000 groupby.py:3114(_get_grouper)\r\n        2    0.000    0.000    0.000    0.000 groupby.py:3228(<genexpr>)\r\n        2    0.000    0.000    0.000    0.000 groupby.py:3229(<genexpr>)\r\n        2    0.000    0.000    0.000    0.000 groupby.py:3230(<genexpr>)\r\n        1    0.000    0.000    0.000    0.000 groupby.py:3258(is_in_axis)\r\n        1    0.000    0.000    0.000    0.000 groupby.py:3268(is_in_obj)\r\n        1    0.000    0.000    0.000    0.000 groupby.py:3327(_is_label_like)\r\n        1    0.000    0.000    0.000    0.000 groupby.py:3332(_convert_grouper)\r\n        1    0.000    0.000    0.000    0.000 groupby.py:5021(__init__)\r\n        1    0.000    0.000    0.000    0.000 groupby.py:5028(slabels)\r\n        1    0.000    0.000    0.000    0.000 groupby.py:5033(sort_idx)\r\n    10001    0.026    0.000    1.138    0.000 groupby.py:5038(__iter__)\r\n        1    0.000    0.000    0.000    0.000 groupby.py:5057(_get_sorted_data)\r\n    10000    0.020    0.000    1.111    0.000 groupby.py:5069(_chop)\r\n        1    0.000    0.000    0.000    0.000 groupby.py:5120(get_splitter)\r\n        1    0.000    0.000    0.000    0.000 groupby.py:567(__init__)\r\n        1    0.000    0.000    0.000    0.000 groupby.py:881(__iter__)\r\n        2    0.000    0.000    0.000    0.000 index_tricks.py:656(__getitem__)\r\n   100002    0.057    0.000    0.103    0.000 inference.py:119(is_iterator)\r\n    50003    0.027    0.000    0.132    0.000 inference.py:251(is_list_like)\r\n        1    0.000    0.000    0.000    0.000 inference.py:287(is_array_like)\r\n   170002    0.214    0.000    0.364    0.000 internals.py:116(__init__)\r\n   170002    0.044    0.000    0.044    0.000 internals.py:127(_check_ndim)\r\n   100000    0.030    0.000    0.041    0.000 internals.py:166(_consolidate_key)\r\n   150000    0.507    0.000    1.307    0.000 internals.py:1723(__init__)\r\n    10000    0.002    0.000    0.002    0.000 internals.py:199(external_values)\r\n        1    0.000    0.000    0.000    0.000 internals.py:203(internal_values)\r\n   280002    0.036    0.000    0.036    0.000 internals.py:233(mgr_locs)\r\n   170002    0.075    0.000    0.091    0.000 internals.py:237(mgr_locs)\r\n    50000    0.038    0.000    0.550    0.000 internals.py:251(make_block)\r\n    10000    0.013    0.000    0.066    0.000 internals.py:269(make_block_same_class)\r\n   150000    0.243    0.000    1.700    0.000 internals.py:3000(__init__)\r\n    50000    0.031    0.000    0.031    0.000 internals.py:3039(sp_index)\r\n    50000    0.038    0.000    0.068    0.000 internals.py:3043(kind)\r\n    50000    0.124    0.000    1.925    0.000 internals.py:3061(copy)\r\n    50000    0.202    0.000    1.686    0.000 internals.py:3067(make_block_same_class)\r\n    10000    0.015    0.000    0.015    0.000 internals.py:310(_slice)\r\n   160002    0.148    0.000    0.490    0.000 internals.py:3148(get_block_type)\r\n   170002    0.287    0.000    2.401    0.000 internals.py:3191(make_block)\r\n        1    0.012    0.012    0.197    0.197 internals.py:3265(__init__)\r\n        1    0.000    0.000    0.000    0.000 internals.py:3266(<listcomp>)\r\n        5    0.000    0.000    0.000    0.000 internals.py:3307(shape)\r\n       15    0.000    0.000    0.000    0.000 internals.py:3309(<genexpr>)\r\n   100000    0.133    0.000    0.326    0.000 internals.py:3315(set_axis)\r\n        2    0.128    0.064    0.192    0.096 internals.py:3363(_rebuild_blknos_and_blklocs)\r\n        2    0.000    0.000    0.000    0.000 internals.py:3384(_get_items)\r\n        1    0.001    0.001    0.023    0.023 internals.py:3488(_verify_integrity)\r\n    50001    0.011    0.000    0.019    0.000 internals.py:3490(<genexpr>)\r\n    60000    0.436    0.000    2.805    0.000 internals.py:3500(apply)\r\n   200001    0.030    0.000    0.030    0.000 internals.py:352(dtype)\r\n    50000    0.014    0.000    0.048    0.000 internals.py:356(ftype)\r\n    60000    0.009    0.000    0.009    0.000 internals.py:3561(<genexpr>)\r\n        1    0.000    0.000    0.000    0.000 internals.py:3776(is_consolidated)\r\n        1    0.002    0.002    0.058    0.058 internals.py:3784(_consolidate_check)\r\n        1    0.008    0.008    0.056    0.056 internals.py:3785(<listcomp>)\r\n    60000    0.185    0.000    5.267    0.000 internals.py:3895(copy)\r\n    60000    0.041    0.000    2.228    0.000 internals.py:3915(<lambda>)\r\n    60000    0.048    0.000    2.276    0.000 internals.py:3916(<listcomp>)\r\n    50001    0.027    0.000    0.034    0.000 internals.py:4085(consolidate)\r\n        1    0.001    0.001    0.190    0.190 internals.py:4101(_consolidate_inplace)\r\n    50000    0.142    0.000    5.003    0.000 internals.py:4388(reindex_indexer)\r\n   120002    0.345    0.000    1.457    0.000 internals.py:4639(__init__)\r\n   120002    0.053    0.000    0.053    0.000 internals.py:4684(_block)\r\n    10000    0.036    0.000    0.900    0.000 internals.py:4702(get_slice)\r\n    80000    0.019    0.000    0.019    0.000 internals.py:4709(index)\r\n    50001    0.022    0.000    0.051    0.000 internals.py:4718(dtype)\r\n    10000    0.010    0.000    0.015    0.000 internals.py:4742(external_values)\r\n        1    0.000    0.000    0.000    0.000 internals.py:4745(internal_values)\r\n    50001    0.007    0.000    0.007    0.000 internals.py:4768(is_consolidated)\r\n   120000    0.015    0.000    0.015    0.000 internals.py:4774(_consolidate_inplace)\r\n        1    0.013    0.013    2.916    2.916 internals.py:4869(create_block_manager_from_arrays)\r\n        1    0.067    0.067    2.514    2.514 internals.py:4880(form_blocks)\r\n        1    0.138    0.138    2.163    2.163 internals.py:5003(_sparse_blockify)\r\n        1    0.011    0.011    0.093    0.093 internals.py:5057(_consolidate)\r\n   100000    0.016    0.000    0.057    0.000 internals.py:5063(<lambda>)\r\n        1    0.000    0.000    0.000    0.000 internals.py:5074(_merge_blocks)\r\n    60001    0.070    0.000    0.110    0.000 internals.py:5101(_extend_blocks)\r\n    10000    0.011    0.000    0.096    0.000 internals.py:774(copy)\r\n        2    0.000    0.000    0.000    0.000 missing.py:112(_isna_new)\r\n        1    0.000    0.000    0.000    0.000 missing.py:189(_isna_ndarraylike)\r\n        1    0.000    0.000    0.000    0.000 missing.py:259(notna)\r\n        2    0.000    0.000    0.000    0.000 missing.py:32(isna)\r\n    50000    0.320    0.000   67.865    0.001 missing.py:376(array_equivalent)\r\n    50000    0.030    0.000    0.045    0.000 missing.py:596(clean_reindex_fill_method)\r\n    50000    0.015    0.000    0.015    0.000 missing.py:74(clean_fill_method)\r\n    20002    0.003    0.000    0.003    0.000 numeric.py:110(is_all_dates)\r\n        1    0.000    0.000    0.000    0.000 numeric.py:193(_assert_safe_casting)\r\n    10003    0.029    0.000    0.147    0.000 numeric.py:35(__new__)\r\n   340006    0.160    0.000  289.007    0.001 numeric.py:433(asarray)\r\n   100002    0.035    0.000    0.308    0.000 numeric.py:556(ascontiguousarray)\r\n    50000    0.180    0.000    0.378    0.000 numeric.py:630(require)\r\n    20001    0.042    0.000    0.699    0.000 numeric.py:64(_shallow_copy)\r\n   100000    0.034    0.000    0.045    0.000 numeric.py:701(<genexpr>)\r\n        1    0.000    0.000    0.000    0.000 range.py:131(_simple_new)\r\n        1    0.000    0.000    0.000    0.000 range.py:158(_validate_dtype)\r\n        1    0.000    0.000    0.000    0.000 range.py:169(_data)\r\n        3    0.000    0.000    0.004    0.001 range.py:257(tolist)\r\n        1    0.000    0.000    0.000    0.000 range.py:315(equals)\r\n    60011    0.034    0.000    0.054    0.000 range.py:481(__len__)\r\n    60000    0.100    0.000    0.178    0.000 range.py:491(__getitem__)\r\n        1    0.000    0.000    0.000    0.000 range.py:68(__new__)\r\n        2    0.000    0.000    0.000    0.000 range.py:84(_ensure_int)\r\n    20002    0.076    0.000    0.306    0.000 series.py:166(__init__)\r\n    50000    0.028    0.000    0.089    0.000 series.py:175(values)\r\n    50000    0.031    0.000    0.061    0.000 series.py:188(block)\r\n    50000    0.012    0.000    0.012    0.000 series.py:226(_constructor)\r\n    10000    0.053    0.000    0.941    0.000 series.py:2503(sort_index)\r\n    50000    0.007    0.000    0.007    0.000 series.py:3237(_needs_reindex_multi)\r\n   100000    0.067    0.000    0.067    0.000 series.py:332(_set_subtyp)\r\n    50000    0.116    0.000  253.843    0.005 series.py:3323(reindex)\r\n    20001    0.005    0.000    0.005    0.000 series.py:349(_constructor)\r\n        1    0.000    0.000    0.000    0.000 series.py:3508(_take)\r\n   120002    0.472    0.000    1.494    0.000 series.py:365(_set_axis)\r\n    20002    0.008    0.000    0.008    0.000 series.py:391(_set_subtyp)\r\n   240003    0.209    0.000    0.363    0.000 series.py:401(name)\r\n        1    0.000    0.000    0.000    0.000 series.py:4019(_sanitize_array)\r\n        1    0.000    0.000    0.000    0.000 series.py:4036(_try_cast)\r\n   240003    0.091    0.000    0.091    0.000 series.py:405(name)\r\n    50001    0.029    0.000    0.080    0.000 series.py:412(dtype)\r\n    10000    0.008    0.000    0.023    0.000 series.py:432(values)\r\n        1    0.000    0.000    0.000    0.000 series.py:465(_values)\r\n    50000    0.150    0.000  253.993    0.005 series.py:565(reindex)\r\n   100000    0.735    0.000  171.894    0.002 series.py:64(__init__)\r\n    10000    0.028    0.000    1.090    0.000 series.py:875(_get_values)\r\n        1    0.000    0.000    0.000    0.000 sorting.py:321(get_group_index_sorter)\r\n   220005    0.095    0.000    0.095    0.000 {built-in method __new__ of type object at 0x7ff7181d1be0}\r\n    50003    0.035    0.000    0.035    0.000 {built-in method _abc._abc_instancecheck}\r\n        1    0.000    0.000    0.000    0.000 {built-in method _thread.get_ident}\r\n    50000    0.025    0.000    0.303    0.000 {built-in method builtins.all}\r\n        3    0.000    0.000    0.000    0.000 {built-in method builtins.any}\r\n        1    0.000    0.000    0.000    0.000 {built-in method builtins.callable}\r\n        1    0.000    0.000  599.169  599.169 {built-in method builtins.exec}\r\n  1980098    0.409    0.000    0.429    0.000 {built-in method builtins.getattr}\r\n  1300057    0.577    0.000    0.577    0.000 {built-in method builtins.hasattr}\r\n    50000    0.003    0.000    0.003    0.000 {built-in method builtins.hash}\r\n        2    0.000    0.000    0.000    0.000 {built-in method builtins.id}\r\n 10460382    1.555    0.000    2.071    0.000 {built-in method builtins.isinstance}\r\n  1160059    0.161    0.000    0.161    0.000 {built-in method builtins.issubclass}\r\n   220011    0.109    0.000    0.109    0.000 {built-in method builtins.iter}\r\n1640121/1370109    0.441    0.000    0.574    0.000 {built-in method builtins.len}\r\n        1    0.000    0.000    0.000    0.000 {built-in method builtins.locals}\r\n    60013    0.019    0.000    0.019    0.000 {built-in method builtins.max}\r\n    50001    0.092    0.000    0.123    0.000 {built-in method builtins.sorted}\r\n        1    0.003    0.003    0.022    0.022 {built-in method builtins.sum}\r\n   100004    0.043    0.000    0.043    0.000 {built-in method numpy.core.multiarray.arange}\r\n   540012  289.452    0.001  289.452    0.001 {built-in method numpy.core.multiarray.array}\r\n        1    0.000    0.000    0.000    0.000 {built-in method numpy.core.multiarray.concatenate}\r\n        7    0.000    0.000    0.000    0.000 {built-in method numpy.core.multiarray.empty}\r\n        7    0.000    0.000    0.000    0.000 {built-in method pandas._libs.algos.ensure_int64}\r\n   200000    0.034    0.000    0.034    0.000 {built-in method pandas._libs.algos.ensure_object}\r\n        4    0.000    0.000    0.000    0.000 {built-in method pandas._libs.algos.ensure_platform_int}\r\n    50000   66.855    0.001   66.855    0.001 {built-in method pandas._libs.lib.array_equivalent_object}\r\n    10001    0.002    0.000    0.002    0.000 {built-in method pandas._libs.lib.is_bool}\r\n   100000    0.242    0.000    0.242    0.000 {built-in method pandas._libs.lib.is_datetime_array}\r\n    10001    0.002    0.000    0.002    0.000 {built-in method pandas._libs.lib.is_float}\r\n   110004    0.018    0.000    0.018    0.000 {built-in method pandas._libs.lib.is_integer}\r\n   170007    0.203    0.000    0.203    0.000 {built-in method pandas._libs.lib.is_scalar}\r\n        1    0.000    0.000    0.000    0.000 {built-in method pandas._libs.missing.checknull}\r\n    10001    0.140    0.000    0.140    0.000 {built-in method pandas._libs.sparse.get_blocks}\r\n        1    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}\r\n        2    0.000    0.000    0.000    0.000 {method 'any' of 'numpy.ndarray' objects}\r\n   210001    0.028    0.000    0.028    0.000 {method 'append' of 'list' objects}\r\n        2    0.001    0.001    0.001    0.001 {method 'argsort' of 'numpy.ndarray' objects}\r\n    20004    0.067    0.000    0.067    0.000 {method 'astype' of 'numpy.ndarray' objects}\r\n        2    0.000    0.000    0.000    0.000 {method 'copy' of 'dict' objects}\r\n    60000    0.080    0.000    0.080    0.000 {method 'copy' of 'numpy.ndarray' objects}\r\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\r\n        1    0.000    0.000    0.000    0.000 {method 'discard' of 'set' objects}\r\n        1    0.001    0.001    0.001    0.001 {method 'extend' of 'list' objects}\r\n        5    0.000    0.000    0.000    0.000 {method 'fill' of 'numpy.ndarray' objects}\r\n    50001    0.029    0.000    0.029    0.000 {method 'format' of 'str' objects}\r\n   260006    0.048    0.000    0.048    0.000 {method 'get' of 'dict' objects}\r\n        1    0.001    0.001    0.001    0.001 {method 'get_labels' of 'pandas._libs.hashtable.Int64HashTable' objects}\r\n        1    0.000    0.000    0.000    0.000 {method 'get_loc' of 'pandas._libs.index.IndexEngine' objects}\r\n   270010    0.061    0.000    0.061    0.000 {method 'items' of 'dict' objects}\r\n    50000    0.016    0.000    0.016    0.000 {method 'keys' of 'dict' objects}\r\n        1    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}\r\n        1    0.000    0.000    0.000    0.000 {method 'nonzero' of 'numpy.ndarray' objects}\r\n   400003    0.056    0.000    0.056    0.000 {method 'pop' of 'dict' objects}\r\n   100000    0.078    0.000    0.078    0.000 {method 'ravel' of 'numpy.ndarray' objects}\r\n    50005    0.482    0.000    0.482    0.000 {method 'reduce' of 'numpy.ufunc' objects}\r\n   120007    0.088    0.000    0.088    0.000 {method 'rpartition' of 'str' objects}\r\n        1    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}\r\n        2    0.000    0.000    0.000    0.000 {method 'search' of 're.Pattern' objects}\r\n        5    0.000    0.000    0.000    0.000 {method 'startswith' of 'str' objects}\r\n        3    0.000    0.000    0.000    0.000 {method 'take' of 'numpy.ndarray' objects}\r\n        1    0.000    0.000    0.000    0.000 {method 'to_array' of 'pandas._libs.hashtable.Int64Vector' objects}\r\n        1    0.001    0.001    0.001    0.001 {method 'tolist' of 'numpy.ndarray' objects}\r\n   120004    0.063    0.000    0.066    0.000 {method 'update' of 'dict' objects}\r\n    50000    0.011    0.000    0.011    0.000 {method 'upper' of 'str' objects}\r\n   590007    0.568    0.000    0.729    0.000 {method 'view' of 'numpy.ndarray' objects}\r\n        1    0.000    0.000    0.000    0.000 {pandas._libs.algos.groupsort_indexer}\r\n        2    0.000    0.000    0.000    0.000 {pandas._libs.algos.take_1d_int64_int64}\r\n        1    0.000    0.000    0.000    0.000 {pandas._libs.lib.generate_slices}\r\n   100001   45.236    0.000   45.236    0.000 {pandas._libs.lib.infer_dtype}\r\n   100000    0.060    0.000    0.247    0.000 {pandas._libs.lib.values_from_object}\r\n```\r\n</details>\r\n\r\nI don't really know how to read this, but it looks like half the time is spent calling `np.asarray` which is consistent with densifying the input matrix.\r\n\r\nAnd for the sum\r\n<details>\r\n\r\n```\r\n>>> df = pd.SparseDataFrame(X)\r\n>>> cProfile.run('df.sum(axis=0)')\r\n         1050275 function calls in 95.012 seconds\r\n\r\n   Ordered by: standard name\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:1009(_handle_fromlist)\r\n        1    0.000    0.000   95.012   95.012 <string>:1(<module>)\r\n        1    0.000    0.000    0.000    0.000 __init__.py:211(itervalues)\r\n        2    0.000    0.000    5.221    2.610 _methods.py:34(_sum)\r\n        1    0.000    0.000    0.000    0.000 _methods.py:45(_all)\r\n        1    0.000    0.000    0.000    0.000 abc.py:137(__instancecheck__)\r\n    50000    0.027    0.000    0.027    0.000 array.py:306(__len__)\r\n    50000    0.123    0.000    1.736    0.000 array.py:332(values)\r\n    50000    0.011    0.000    0.011    0.000 array.py:352(fill_value)\r\n    50000    0.059    0.000    1.795    0.000 array.py:372(to_dense)\r\n        1    0.000    0.000    0.000    0.000 base.py:4914(_ensure_index)\r\n        3    0.000    0.000    0.000    0.000 base.py:61(is_dtype)\r\n        1    0.000    0.000    0.047    0.047 cast.py:1093(find_common_type)\r\n    50000    0.009    0.000    0.044    0.000 cast.py:1118(<genexpr>)\r\n        1    0.000    0.000    0.000    0.000 cast.py:853(maybe_castable)\r\n        2    0.000    0.000    0.000    0.000 common.py:1170(is_datetime_or_timedelta_dtype)\r\n        1    0.000    0.000    0.000    0.000 common.py:122(is_sparse)\r\n        1    0.000    0.000    0.000    0.000 common.py:1405(needs_i8_conversion)\r\n        2    0.000    0.000    0.000    0.000 common.py:1527(is_float_dtype)\r\n        1    0.000    0.000    0.000    0.000 common.py:1578(is_bool_dtype)\r\n        1    0.000    0.000    0.000    0.000 common.py:1688(is_extension_array_dtype)\r\n    99999    0.016    0.000    0.021    0.000 common.py:1784(_get_dtype)\r\n       10    0.000    0.000    0.000    0.000 common.py:1835(_get_dtype_type)\r\n        1    0.000    0.000    0.000    0.000 common.py:332(is_datetime64_dtype)\r\n        1    0.000    0.000    0.000    0.000 common.py:369(is_datetime64tz_dtype)\r\n        1    0.000    0.000    0.000    0.000 common.py:407(is_timedelta64_dtype)\r\n        1    0.000    0.000    0.000    0.000 common.py:444(is_period_dtype)\r\n        1    0.000    0.000    0.000    0.000 common.py:477(is_interval_dtype)\r\n        1    0.000    0.000    0.000    0.000 common.py:546(is_string_dtype)\r\n    49999    0.014    0.000    0.035    0.000 common.py:692(is_dtype_equal)\r\n        1    0.000    0.000    0.000    0.000 common.py:811(is_integer_dtype)\r\n        1    0.000    0.000    0.000    0.000 common.py:89(is_object_dtype)\r\n        1    0.000    0.000    0.000    0.000 common.py:995(is_int_or_datetime_dtype)\r\n        1    0.000    0.000    0.000    0.000 dtypes.py:584(is_dtype)\r\n        1    0.000    0.000    0.000    0.000 dtypes.py:707(is_dtype)\r\n        1    0.000    0.000    0.000    0.000 frame.py:133(_constructor)\r\n        1    0.000    0.000   95.012   95.012 frame.py:6845(_reduce)\r\n        1    0.000    0.000   86.265   86.265 frame.py:6856(f)\r\n        1    0.000    0.000    0.000    0.000 frame.py:7047(_get_agg_axis)\r\n        1    0.000    0.000    0.000    0.000 fromnumeric.py:1933(any)\r\n        1    0.000    0.000    0.000    0.000 fromnumeric.py:64(_wrapreduction)\r\n        1    0.000    0.000    0.000    0.000 function.py:38(__call__)\r\n        1    0.000    0.000    0.000    0.000 generic.py:124(__init__)\r\n        1    0.000    0.000    0.000    0.000 generic.py:364(_get_axis_number)\r\n        1    0.000    0.000    0.000    0.000 generic.py:4362(__getattr__)\r\n        2    0.000    0.000    0.000    0.000 generic.py:4378(__setattr__)\r\n        1    0.000    0.000    0.000    0.000 generic.py:4423(_protect_consolidate)\r\n        1    0.000    0.000    0.000    0.000 generic.py:4433(_consolidate_inplace)\r\n        1    0.000    0.000    0.000    0.000 generic.py:4436(f)\r\n        1    0.000    0.000    8.747    8.747 generic.py:4563(values)\r\n        8    0.000    0.000    0.000    0.000 generic.py:7(_check)\r\n        1    0.000    0.000   95.012   95.012 generic.py:9577(stat_func)\r\n        1    0.000    0.000    0.000    0.000 inference.py:251(is_list_like)\r\n        1    0.000    0.000    0.000    0.000 internals.py:116(__init__)\r\n        1    0.000    0.000    0.000    0.000 internals.py:127(_check_ndim)\r\n    50000    0.100    0.000    1.934    0.000 internals.py:1751(get_values)\r\n    50001    0.017    0.000    0.017    0.000 internals.py:233(mgr_locs)\r\n        1    0.000    0.000    0.000    0.000 internals.py:237(mgr_locs)\r\n        1    0.000    0.000    0.000    0.000 internals.py:3148(get_block_type)\r\n        1    0.000    0.000    0.000    0.000 internals.py:3191(make_block)\r\n        2    0.000    0.000    0.000    0.000 internals.py:3307(shape)\r\n        6    0.000    0.000    0.000    0.000 internals.py:3309(<genexpr>)\r\n        1    0.000    0.000    0.000    0.000 internals.py:3311(ndim)\r\n        1    0.000    0.000    0.000    0.000 internals.py:3351(_is_single_block)\r\n    50000    0.004    0.000    0.004    0.000 internals.py:352(dtype)\r\n        2    0.000    0.000    0.000    0.000 internals.py:3776(is_consolidated)\r\n        1    0.000    0.000    0.000    0.000 internals.py:3789(is_mixed_type)\r\n        1    0.000    0.000    8.747    8.747 internals.py:3922(as_array)\r\n        1    6.736    6.736    8.747    8.747 internals.py:3953(_interleave)\r\n        1    0.000    0.000    0.000    0.000 internals.py:4085(consolidate)\r\n        1    0.000    0.000    0.000    0.000 internals.py:4101(_consolidate_inplace)\r\n        1    0.000    0.000    0.000    0.000 internals.py:4639(__init__)\r\n        1    0.000    0.000    0.059    0.059 internals.py:5044(_interleaved_dtype)\r\n        1    0.008    0.008    0.012    0.012 internals.py:5048(<listcomp>)\r\n        1    0.000    0.000    2.620    2.620 missing.py:112(_isna_new)\r\n        1    2.620    2.620    2.620    2.620 missing.py:189(_isna_ndarraylike)\r\n        1    0.000    0.000    2.620    2.620 missing.py:32(isna)\r\n        1    0.000    0.000    0.000    0.000 nanops.py:179(_get_fill_value)\r\n        1    0.000    0.000   80.090   80.090 nanops.py:202(_get_values)\r\n        1    0.000    0.000    0.000    0.000 nanops.py:256(_na_ok_dtype)\r\n        1    0.000    0.000    0.000    0.000 nanops.py:260(_view_if_needed)\r\n        1    0.000    0.000    0.000    0.000 nanops.py:266(_wrap_results)\r\n        1    0.000    0.000   85.312   85.312 nanops.py:328(nansum)\r\n        4    0.000    0.000    0.000    0.000 nanops.py:64(check)\r\n        1    0.952    0.952   86.264   86.264 nanops.py:69(_f)\r\n        1    0.001    0.001    2.475    2.475 nanops.py:712(_maybe_null_out)\r\n        5    0.000    0.000    0.000    0.000 nanops.py:72(<genexpr>)\r\n        1    0.000    0.000    0.000    0.000 numeric.py:110(is_all_dates)\r\n        2    0.000    0.000    0.000    0.000 numeric.py:2491(seterr)\r\n        2    0.000    0.000    0.000    0.000 numeric.py:2592(geterr)\r\n        1    0.000    0.000    0.000    0.000 numeric.py:2887(__init__)\r\n        1    0.000    0.000    0.000    0.000 numeric.py:2891(__enter__)\r\n        1    0.000    0.000    0.000    0.000 numeric.py:2896(__exit__)\r\n    50000    0.018    0.000    0.078    0.000 numeric.py:556(ascontiguousarray)\r\n        7    0.000    0.000    0.000    0.000 range.py:481(__len__)\r\n        1    0.000    0.000    0.000    0.000 series.py:166(__init__)\r\n        1    0.000    0.000    0.000    0.000 series.py:365(_set_axis)\r\n        1    0.000    0.000    0.000    0.000 series.py:391(_set_subtyp)\r\n        1    0.000    0.000    0.000    0.000 series.py:401(name)\r\n        1    0.000    0.000    0.000    0.000 series.py:4019(_sanitize_array)\r\n        1    0.000    0.000    0.000    0.000 series.py:4036(_try_cast)\r\n        1    0.000    0.000    0.000    0.000 series.py:405(name)\r\n        1    0.000    0.000    0.000    0.000 {built-in method _abc._abc_instancecheck}\r\n        1    0.003    0.003    0.047    0.047 {built-in method builtins.all}\r\n        1    0.000    0.000    0.000    0.000 {built-in method builtins.any}\r\n        1    0.000    0.000   95.012   95.012 {built-in method builtins.exec}\r\n       14    0.000    0.000    0.000    0.000 {built-in method builtins.getattr}\r\n        7    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}\r\n   100049    0.005    0.000    0.005    0.000 {built-in method builtins.isinstance}\r\n       14    0.000    0.000    0.000    0.000 {built-in method builtins.issubclass}\r\n        1    0.000    0.000    0.000    0.000 {built-in method builtins.iter}\r\n    50019    0.031    0.000    0.058    0.000 {built-in method builtins.len}\r\n        7    0.000    0.000    0.000    0.000 {built-in method builtins.max}\r\n    50000    0.061    0.000    0.061    0.000 {built-in method numpy.core.multiarray.array}\r\n    50001    0.179    0.000    0.179    0.000 {built-in method numpy.core.multiarray.empty}\r\n        1   31.546   31.546   31.546   31.546 {built-in method numpy.core.multiarray.putmask}\r\n        1    0.000    0.000    0.000    0.000 {built-in method numpy.core.multiarray.zeros}\r\n        4    0.000    0.000    0.000    0.000 {built-in method numpy.core.umath.geterrobj}\r\n        2    0.000    0.000    0.000    0.000 {built-in method numpy.core.umath.seterrobj}\r\n        1    0.000    0.000    0.000    0.000 {built-in method pandas._libs.lib.is_integer}\r\n        1    0.000    0.000    0.000    0.000 {built-in method pandas._libs.lib.is_scalar}\r\n        1    0.000    0.000    0.000    0.000 {method 'all' of 'numpy.ndarray' objects}\r\n        1   45.924   45.924   45.924   45.924 {method 'copy' of 'numpy.ndarray' objects}\r\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\r\n    50000    0.861    0.000    0.861    0.000 {method 'fill' of 'numpy.ndarray' objects}\r\n        1    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}\r\n        1    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}\r\n        1    0.000    0.000    0.000    0.000 {method 'pop' of 'dict' objects}\r\n    50000    0.099    0.000    0.099    0.000 {method 'put' of 'numpy.ndarray' objects}\r\n        4    5.221    1.305    5.221    1.305 {method 'reduce' of 'numpy.ufunc' objects}\r\n    50000    0.039    0.000    0.039    0.000 {method 'reshape' of 'numpy.ndarray' objects}\r\n        2    0.000    0.000    5.221    2.610 {method 'sum' of 'numpy.ndarray' objects}\r\n    50000    0.327    0.000    0.406    0.000 {method 'to_int_index' of 'pandas._libs.sparse.BlockIndex' objects}\r\n        1    0.000    0.000    0.000    0.000 {method 'transpose' of 'numpy.ndarray' objects}\r\n        1    0.000    0.000    0.000    0.000 {method 'values' of 'dict' objects}\r\n        1    0.000    0.000    0.000    0.000 {pandas._libs.lib.values_from_object}\r\n```\r\n</details>\r\nNot quite sure what that one's doing, would benefit from some expert assistance here.\r\n\r\nThanks for the FYI. I'll look into it."
  }
]
