[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/291581242",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15869#issuecomment-291581242",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15869",
    "id": 291581242,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTU4MTI0Mg==",
    "user": {
      "login": "chrisaycock",
      "id": 453745,
      "node_id": "MDQ6VXNlcjQ1Mzc0NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/453745?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisaycock",
      "html_url": "https://github.com/chrisaycock",
      "followers_url": "https://api.github.com/users/chrisaycock/followers",
      "following_url": "https://api.github.com/users/chrisaycock/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisaycock/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisaycock/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisaycock/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisaycock/orgs",
      "repos_url": "https://api.github.com/users/chrisaycock/repos",
      "events_url": "https://api.github.com/users/chrisaycock/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisaycock/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-04T17:56:40Z",
    "updated_at": "2017-04-04T17:56:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "Interestingly, this works:\r\n\r\n```python\r\npd.DataFrame(np.array([None, None, dt.now(), None]))\r\n```\r\n\r\nBut this does not:\r\n\r\n```python\r\npd.DataFrame(np.array([None, None, None, dt.now(), None]))\r\n```\r\n\r\nNumpy doesn't seem to handle the input arrays any differently, but `create_block_manager_from_blocks()` definitely shows different `blocks`. The first is \r\n\r\n```python\r\n[array([['NaT', 'NaT', '2017-04-04T13:54:03.236544000', 'NaT']], dtype='datetime64[ns]')]\r\n```\r\n\r\nwhile the second is \r\n\r\n```python\r\n[array([None, None, None, datetime.datetime(2017, 4, 4, 13, 54, 10, 804563),\r\n       None], dtype=object)]\r\n```\r\n\r\nI'm going to dig some more into this."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/291584060",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15869#issuecomment-291584060",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15869",
    "id": 291584060,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTU4NDA2MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-04T18:06:32Z",
    "updated_at": "2017-04-04T18:09:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "@chrisaycock here's why.\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/master/pandas/types/cast.py#L810\r\n\r\nWhen we have a 1-d array that is ``object`` we want to see whether its datetimelike or not. So I did this old thing where I would sample the first 3 elements. This is bogus now as can simply do this (also need to tests for timedelta as well).\r\n\r\n```\r\nIn [1]: from pandas._libs.lib import is_datetime_array\r\n\r\nIn [2]: is_datetime_array(np.array([None, None, datetime.datetime.now()]))\r\nOut[2]: True\r\n\r\nIn [3]: is_datetime_array(np.array([None, None, None, datetime.datetime.now()]))\r\nOut[3]: True\r\n```\r\n\r\nIt *might* be better to simply modify ``is_possible_datetimelike_array`` as an alternative (it is called below as well).\r\n\r\nThese routines are robust to null values, check for the requested (datetime or timedelta-like), and don't read the entire routine if is just strings (which is the point here, we are trying to see w/o doing too much work if we can coerce this). This is called for *every* ``object`` array on construction, so this needs to be cheap.\r\n\r\nThis may seem like overly paranoid / extreme. But remember we can actually have mixed dtypes that get coerced, e.g.:\r\n\r\n```\r\nIn [4]: Series(['NaT', None, pd.Timestamp('20130101'), datetime.datetime.now(), '20150101'])\r\nOut[4]: \r\n0                          NaT\r\n1                          NaT\r\n2   2013-01-01 00:00:00.000000\r\n3   2017-04-04 14:07:52.743198\r\n4   2015-01-01 00:00:00.000000\r\ndtype: datetime64[ns]\r\n```\r\n\r\nbut we need it be robust to non-matching types.\r\n```\r\nIn [6]: Series(['NaT', None, pd.Timestamp('20130101'), datetime.datetime.now(), '20150101', np.nan, pd.Timedelta('1 day')])\r\nOut[6]: \r\n0                           NaT\r\n1                          None\r\n2           2013-01-01 00:00:00\r\n3    2017-04-04 14:08:34.334113\r\n4                      20150101\r\n5                           NaN\r\n6               1 days 00:00:00\r\ndtype: object\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/291589709",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15869#issuecomment-291589709",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15869",
    "id": 291589709,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTU4OTcwOQ==",
    "user": {
      "login": "chrisaycock",
      "id": 453745,
      "node_id": "MDQ6VXNlcjQ1Mzc0NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/453745?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisaycock",
      "html_url": "https://github.com/chrisaycock",
      "followers_url": "https://api.github.com/users/chrisaycock/followers",
      "following_url": "https://api.github.com/users/chrisaycock/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisaycock/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisaycock/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisaycock/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisaycock/orgs",
      "repos_url": "https://api.github.com/users/chrisaycock/repos",
      "events_url": "https://api.github.com/users/chrisaycock/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisaycock/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-04T18:25:47Z",
    "updated_at": "2017-04-04T18:33:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback Agreed that the culprit is the \"quick inference\" on the first three elements.\r\n\r\nIs your proposal to modify `maybe_infer_to_datetimelike()` to use `is_possible_datetimelike_array()` instead of the logic that begins with the \"sample\"? Are there other gotchas given all of the conditionals below it?\r\n\r\nThe alternative is to `infer_dtype()` the entire array instead of the first three elements. Would the performance impact be just too much then?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/291595570",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15869#issuecomment-291595570",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15869",
    "id": 291595570,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTU5NTU3MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-04T18:46:38Z",
    "updated_at": "2017-04-04T18:46:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "i think maybe best way is to trash all of the logic  for the sample and below\r\n\r\nthen modify: is_possible_datetimelike_array to return 3 states (string is prob fine)\r\n\r\n- datetime\r\n- timedelta\r\n- mixed\r\n\r\nthe u know if u should attempt to_datetime or to_timedelta or are done\r\n\r\nit short circuits so should be performant \r\nthough maybe inside that routine you can take the first 3 valid points (non null) and actually try to convert them - if that fails then you are done \r\n\r\nthe issue is to try to not iterate (and convert) all strings "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/291615502",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15869#issuecomment-291615502",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15869",
    "id": 291615502,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTYxNTUwMg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-04T20:02:44Z",
    "updated_at": "2017-04-04T20:02:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "@chrisaycock this was a can of worms, see #15892 "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/291778775",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15869#issuecomment-291778775",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15869",
    "id": 291778775,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MTc3ODc3NQ==",
    "user": {
      "login": "richard-bibb",
      "id": 7870522,
      "node_id": "MDQ6VXNlcjc4NzA1MjI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7870522?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/richard-bibb",
      "html_url": "https://github.com/richard-bibb",
      "followers_url": "https://api.github.com/users/richard-bibb/followers",
      "following_url": "https://api.github.com/users/richard-bibb/following{/other_user}",
      "gists_url": "https://api.github.com/users/richard-bibb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/richard-bibb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/richard-bibb/subscriptions",
      "organizations_url": "https://api.github.com/users/richard-bibb/orgs",
      "repos_url": "https://api.github.com/users/richard-bibb/repos",
      "events_url": "https://api.github.com/users/richard-bibb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/richard-bibb/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-05T07:34:00Z",
    "updated_at": "2017-04-05T07:34:00Z",
    "author_association": "NONE",
    "body": "Thanks for the quick fix guys"
  }
]
