[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/176802705",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12168#issuecomment-176802705",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12168",
    "id": 176802705,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NjgwMjcwNQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-29T15:12:08Z",
    "updated_at": "2016-01-29T15:12:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "My initial reaction is \"too much magic\"... but I could be biased. When `eval`/`query` was introduced there was concern that this was opening up a can of worms (a pandas DSL, distinct from python) Thoughts from others?\n\nAlso I _think_ that if you have a DataFrame like\n\n``` python\ndf = pd.DataFrame({\"a\": [1, 2], \"b\": [3, 4], \"a + b\": [0, 1]})\n```\n\nThen under your change `df.plot('a + b')` will evaluate `df.a + df.b` shadowing the column named 'a + b', which would probably make this a non-starter. I do see how this could be convenient for exploration though.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/176829352",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12168#issuecomment-176829352",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12168",
    "id": 176829352,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NjgyOTM1Mg==",
    "user": {
      "login": "TsvikiHirsh",
      "id": 9864450,
      "node_id": "MDQ6VXNlcjk4NjQ0NTA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9864450?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TsvikiHirsh",
      "html_url": "https://github.com/TsvikiHirsh",
      "followers_url": "https://api.github.com/users/TsvikiHirsh/followers",
      "following_url": "https://api.github.com/users/TsvikiHirsh/following{/other_user}",
      "gists_url": "https://api.github.com/users/TsvikiHirsh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TsvikiHirsh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TsvikiHirsh/subscriptions",
      "organizations_url": "https://api.github.com/users/TsvikiHirsh/orgs",
      "repos_url": "https://api.github.com/users/TsvikiHirsh/repos",
      "events_url": "https://api.github.com/users/TsvikiHirsh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TsvikiHirsh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-29T15:50:11Z",
    "updated_at": "2016-02-14T21:41:14Z",
    "author_association": "NONE",
    "body": "@TomAugspurger Good points.\nI still have to dig into `eval` internals and find a way to do this, but my intention is to apply few checks before running the `y` (and `x`) argument through `eval`:\n1. Is `numexpr` installed - to avoid the build fail\n2. Is this a valid expression that eval can handle\n3. Is there a column name with the same label\n4. Deal with multicolumn selection ([\"a\",\"b\"])\n\nIn case these checks fail, it will fall back to the default non-expr plot.\n\nI personally use `query` and `eval` a lot in my routine analysis and I find it to be one of the best parts of `pandas`. Combine this with plotting and you'll get something very powerful.\n\nE.g. this oneliner:\n\n`df.plot(y=[\"a+2*b\",\"a+3*b\"])`\n\nreplace the following code:\n\n```\ndf[\"d\"] = df[\"a\"] + 2*df[\"b\"]\ndf[\"e\"] = df[\"a\"] + 3*df[\"b\"]\ndf.plot(y=[\"d\",\"e\"])\n```\n\nTMHO, the one liner is more clear and natural, and more importantly, it leaves the original `df` unchanged. No need to stack unnecessary columns just for plotting reasons. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/177541553",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12168#issuecomment-177541553",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12168",
    "id": 177541553,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NzU0MTU1Mw==",
    "user": {
      "login": "datnamer",
      "id": 8646471,
      "node_id": "MDQ6VXNlcjg2NDY0NzE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8646471?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datnamer",
      "html_url": "https://github.com/datnamer",
      "followers_url": "https://api.github.com/users/datnamer/followers",
      "following_url": "https://api.github.com/users/datnamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/datnamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datnamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datnamer/subscriptions",
      "organizations_url": "https://api.github.com/users/datnamer/orgs",
      "repos_url": "https://api.github.com/users/datnamer/repos",
      "events_url": "https://api.github.com/users/datnamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datnamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-31T16:23:59Z",
    "updated_at": "2016-01-31T16:24:28Z",
    "author_association": "NONE",
    "body": "This looks really useful. If not accepted can you put it into a separate package?\n\nI think pydata should pursue more focused local DSL stuff. If I get that we're trying to avoid unfamiliar magic, but there's also a code complexity tradeoff trying to do acrobatics and shoehorn mathy stuff with normal python syntax.\n\nThis is a common refrain I hear and agree with.\n\nJust a thought.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/177564074",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12168#issuecomment-177564074",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12168",
    "id": 177564074,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NzU2NDA3NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-31T17:55:29Z",
    "updated_at": "2016-01-31T17:55:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "I guess the current syntax is a bit akward\n\n```\nIn [17]: df = pd.DataFrame({\"a\": [1, 2],\"b\": [4,5]})\n\nIn [18]: df.assign(**{'a+b':df.eval('a+b')}).plot('a','a+b')\nOut[18]: <matplotlib.axes._subplots.AxesSubplot at 0x112da0790>\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/180397502",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12168#issuecomment-180397502",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12168",
    "id": 180397502,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4MDM5NzUwMg==",
    "user": {
      "login": "tacaswell",
      "id": 199813,
      "node_id": "MDQ6VXNlcjE5OTgxMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tacaswell",
      "html_url": "https://github.com/tacaswell",
      "followers_url": "https://api.github.com/users/tacaswell/followers",
      "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
      "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
      "organizations_url": "https://api.github.com/users/tacaswell/orgs",
      "repos_url": "https://api.github.com/users/tacaswell/repos",
      "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tacaswell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-05T15:19:26Z",
    "updated_at": "2016-02-05T15:19:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "This also came up in the discussion around labeled-data support in matplotlib.  We elected to not support it (at least to start) for exactly the reasons that @TomAugspurger listed above. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/183978541",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12168#issuecomment-183978541",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12168",
    "id": 183978541,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4Mzk3ODU0MQ==",
    "user": {
      "login": "TsvikiHirsh",
      "id": 9864450,
      "node_id": "MDQ6VXNlcjk4NjQ0NTA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9864450?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TsvikiHirsh",
      "html_url": "https://github.com/TsvikiHirsh",
      "followers_url": "https://api.github.com/users/TsvikiHirsh/followers",
      "following_url": "https://api.github.com/users/TsvikiHirsh/following{/other_user}",
      "gists_url": "https://api.github.com/users/TsvikiHirsh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TsvikiHirsh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TsvikiHirsh/subscriptions",
      "organizations_url": "https://api.github.com/users/TsvikiHirsh/orgs",
      "repos_url": "https://api.github.com/users/TsvikiHirsh/repos",
      "events_url": "https://api.github.com/users/TsvikiHirsh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TsvikiHirsh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-14T21:14:42Z",
    "updated_at": "2016-02-14T21:14:42Z",
    "author_association": "NONE",
    "body": "OK, I've used the `assign` method @jreback has suggested so now it supports list of mixed numerical expressions and existing columns.\n\nSee updated example notebook [here](http://nbviewer.jupyter.org/gist/TsvikiHirsh/11acb5f821bb1257b5fe)\n\nIn case there is a conflict between an existing column name and a given numerical expression, the existing column is shown in the plot.\n\nIt might worth to think of opting a new option in `df.plot`, e.g. `eval = True` which enable evaluating numerical expressions.\n\nAnother enhancement I would like to addinsome point, is to support `query` via expressions like `a > 0` which currently only plots True or False values from `eval`.\n\nI understand your concerns, and I want to believe that in this case the applicability and simplisity of this feature would help to make it happen.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/200334758",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12168#issuecomment-200334758",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12168",
    "id": 200334758,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDMzNDc1OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-23T12:56:52Z",
    "updated_at": "2016-03-23T12:56:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TsvikiHirsh so I would be ok with this as an example in the cookbook. will repurpose to that. pls re-open if you'd like to update.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/229932179",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12168#issuecomment-229932179",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12168",
    "id": 229932179,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTkzMjE3OQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-01T12:17:03Z",
    "updated_at": "2016-07-01T12:17:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "We had a second request for this. From https://github.com/pydata/pandas/issues/13537#issuecomment-229863248\n\n> I am coming from ROOT where this feature is very common with TTree::Draw. In physics this is very common. Suppose I have a three columns with the position of a point ('x', 'y', 'z') and one with the the time, I want to plot the distance from the origin:\n> \n> ```\n> df.plot.scatter(x='time', y='sqrt(x**2 + y**2 + z**2)')\n> ```\n\nI'm coming around on this a bit, it could be very convenient for interactive work.\n\n@TsvikiHirsh did you post your implementation anywhere? How much work was it to add?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/229996119",
    "html_url": "https://github.com/pandas-dev/pandas/pull/12168#issuecomment-229996119",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12168",
    "id": 229996119,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyOTk5NjExOQ==",
    "user": {
      "login": "TsvikiHirsh",
      "id": 9864450,
      "node_id": "MDQ6VXNlcjk4NjQ0NTA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9864450?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TsvikiHirsh",
      "html_url": "https://github.com/TsvikiHirsh",
      "followers_url": "https://api.github.com/users/TsvikiHirsh/followers",
      "following_url": "https://api.github.com/users/TsvikiHirsh/following{/other_user}",
      "gists_url": "https://api.github.com/users/TsvikiHirsh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TsvikiHirsh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TsvikiHirsh/subscriptions",
      "organizations_url": "https://api.github.com/users/TsvikiHirsh/orgs",
      "repos_url": "https://api.github.com/users/TsvikiHirsh/repos",
      "events_url": "https://api.github.com/users/TsvikiHirsh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TsvikiHirsh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-01T16:55:07Z",
    "updated_at": "2016-07-01T16:55:07Z",
    "author_association": "NONE",
    "body": "No unfortunately I couldn't find time for this. \nIt is not hard since the mechanisms already exist in eval and co.\nThe only problems were to make it work for all plot kinds and to make sure to fall back to default when the expression equals one of the column names.\nSee my second implementation above.\nI will be happy to help with this in my time limitations \n"
  }
]
