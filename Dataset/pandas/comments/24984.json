[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458245446",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-458245446",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 458245446,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODI0NTQ0Ng==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2019-01-28T18:25:31Z",
    "updated_at": "2019-01-28T18:25:31Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/24984?src=pr&el=h1) Report\n> Merging [#24984](https://codecov.io/gh/pandas-dev/pandas/pull/24984?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/bf693ffb520da3b315737a8d52595646afa74d63?src=pr&el=desc) will **decrease** coverage by `<.01%`.\n> The diff coverage is `90%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/24984/graphs/tree.svg?width=650&token=eZ4WkYLtcO&height=150&src=pr)](https://codecov.io/gh/pandas-dev/pandas/pull/24984?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master   #24984      +/-   ##\n==========================================\n- Coverage   92.38%   92.38%   -0.01%     \n==========================================\n  Files         166      166              \n  Lines       52400    52405       +5     \n==========================================\n+ Hits        48409    48413       +4     \n- Misses       3991     3992       +1\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `90.8% <90%> (-0.01%)` | :arrow_down: |\n| #single | `42.88% <10%> (-0.01%)` | :arrow_down: |\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/24984?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/core/frame.py](https://codecov.io/gh/pandas-dev/pandas/pull/24984/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvZnJhbWUucHk=) | `96.88% <90%> (-0.05%)` | :arrow_down: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/24984?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/24984?src=pr&el=footer). Last update [bf693ff...3e01681](https://codecov.io/gh/pandas-dev/pandas/pull/24984?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458245459",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-458245459",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 458245459,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODI0NTQ1OQ==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2019-01-28T18:25:33Z",
    "updated_at": "2019-02-24T02:16:04Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/24984?src=pr&el=h1) Report\n> Merging [#24984](https://codecov.io/gh/pandas-dev/pandas/pull/24984?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/3855a27be4f04d15e7ba7aee12f0220c93148d3d?src=pr&el=desc) will **decrease** coverage by `<.01%`.\n> The diff coverage is `90.47%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/24984/graphs/tree.svg?width=650&token=eZ4WkYLtcO&height=150&src=pr)](https://codecov.io/gh/pandas-dev/pandas/pull/24984?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master   #24984      +/-   ##\n==========================================\n- Coverage   91.73%   91.73%   -0.01%     \n==========================================\n  Files         173      173              \n  Lines       52856    52877      +21     \n==========================================\n+ Hits        48490    48509      +19     \n- Misses       4366     4368       +2\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `90.3% <90.47%> (ø)` | :arrow_up: |\n| #single | `41.69% <52.38%> (ø)` | :arrow_up: |\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/24984?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/compat/\\_\\_init\\_\\_.py](https://codecov.io/gh/pandas-dev/pandas/pull/24984/diff?src=pr&el=tree#diff-cGFuZGFzL2NvbXBhdC9fX2luaXRfXy5weQ==) | `58.03% <50%> (-0.07%)` | :arrow_down: |\n| [pandas/core/frame.py](https://codecov.io/gh/pandas-dev/pandas/pull/24984/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvZnJhbWUucHk=) | `96.85% <94.73%> (-0.03%)` | :arrow_down: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/24984?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/24984?src=pr&el=footer). Last update [3855a27...5f99b15](https://codecov.io/gh/pandas-dev/pandas/pull/24984?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458266171",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-458266171",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 458266171,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODI2NjE3MQ==",
    "user": {
      "login": "wkschwartz",
      "id": 1417749,
      "node_id": "MDQ6VXNlcjE0MTc3NDk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1417749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wkschwartz",
      "html_url": "https://github.com/wkschwartz",
      "followers_url": "https://api.github.com/users/wkschwartz/followers",
      "following_url": "https://api.github.com/users/wkschwartz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wkschwartz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wkschwartz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wkschwartz/subscriptions",
      "organizations_url": "https://api.github.com/users/wkschwartz/orgs",
      "repos_url": "https://api.github.com/users/wkschwartz/repos",
      "events_url": "https://api.github.com/users/wkschwartz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wkschwartz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T19:23:38Z",
    "updated_at": "2019-01-28T19:23:38Z",
    "author_association": "NONE",
    "body": "Reposting https://github.com/pandas-dev/pandas/issues/24969#issuecomment-458246305 here in case the discussion of the deprecation of custom label types proceeds here instead of at the original ticket.\r\n\r\n> Obviously I would prefer no deprecation of custom label types as they are integral to my company’s applications. However, I would urge strongly that if you do decide to deprecate the feature, you do so starting only in the next major release (presumably 0.25.0) rather than in a minor release (0.24.1).\r\n>\r\n> If you do stop supporting custom label types and I am not to be stuck at Pandas 0.23.4 forever, I could theoretically undertake the (expensive) refactoring to use unique IDs (my production code has the equivalent of the name field from my toy example in the OP). However, other users whose code would break might not have convenient unique IDs to switch to. Please do not remove this feature lightly."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458322608",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-458322608",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 458322608,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODMyMjYwOA==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T22:12:21Z",
    "updated_at": "2019-01-28T22:12:21Z",
    "author_association": "MEMBER",
    "body": "> @toobaz may have thoughts here too\r\n\r\nI'm boring, I always have the same thoughts, every time the discussion comes out :-) And they are:\r\n- if we didn't say it's not allowed, it's allowed, and should work\r\n- if there is no reason to disallow it, let's not say it's not allowed\r\n- if we think that the reason to disallow it is that it makes code simpler, we are almost always wrong. Clean code will work with any type a user throws in, as long as it satisfies general properties (e.g. ``__hash__``). Viceversa, explicitly listing the types we \"like\" as scalar will require us to amend the list (and the docs) every time we find some new type that yes, we think is worth allowing.\r\n- (a _valid_ reason to disallow it is that either it brings ambiguity, or it changes the semantics, as would be accepting lists as keys)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458323953",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-458323953",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 458323953,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODMyMzk1Mw==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T22:16:45Z",
    "updated_at": "2019-01-28T22:16:45Z",
    "author_association": "MEMBER",
    "body": "Don't get me wrong: it is good to have this discussion once and for all if it results in cleaner docs/assumptions. But my opinion is that the docs should say \"you can use as keys anything which is not mutable\"."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458328060",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-458328060",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 458328060,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODMyODA2MA==",
    "user": {
      "login": "wkschwartz",
      "id": 1417749,
      "node_id": "MDQ6VXNlcjE0MTc3NDk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1417749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wkschwartz",
      "html_url": "https://github.com/wkschwartz",
      "followers_url": "https://api.github.com/users/wkschwartz/followers",
      "following_url": "https://api.github.com/users/wkschwartz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wkschwartz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wkschwartz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wkschwartz/subscriptions",
      "organizations_url": "https://api.github.com/users/wkschwartz/orgs",
      "repos_url": "https://api.github.com/users/wkschwartz/repos",
      "events_url": "https://api.github.com/users/wkschwartz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wkschwartz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T22:29:36Z",
    "updated_at": "2019-01-28T22:31:49Z",
    "author_association": "NONE",
    "body": ">  But my opinion is that the docs should say \"you can use as keys anything which is not mutable\".\r\n\r\n\"Not mutable\" is a bit fuzzy in Python. If, instead, keys are required to be _hashable_ (which usually implies some sort of recursive immutability), then users already familiar with Python dicts would immediately get it, you can test for key-eligibility with `isinstance(potential_key, collections.abc.Hashable)` or `try: hash(potential_key) \\n except TypeError: ...`, and you'll maintain backward compatibility. Moreover, you'll always be able to convert a DataFrame to/from dicts, which most folks already assume they can do freely (at least as far as I've seen).\r\n\r\nThe documentation should then also have a sentence or two about the importance of immutability and compatibility between the object's `__hash__` and `__eq__` implementations. A mention of ints, strings, tuples, namedtuples, and dataclass's `frozen` parameter would then give users some ideas.\r\n\r\nIn the Python 3.7.2 session below, `a` is mutable, `b` is technically immutable, but not sufficiently so for its hash to work (suggesting that `isinstance(potential_key, collections.abc.Hashable)` isn't quite good enough).\r\n```python-console\r\n>>> a = []\r\n>>> b = (a,)\r\n>>> hash(b)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: unhashable type: 'list'\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458333623",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-458333623",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 458333623,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODMzMzYyMw==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T22:48:46Z",
    "updated_at": "2019-01-28T22:48:46Z",
    "author_association": "MEMBER",
    "body": "> \"Not mutable\" is a bit fuzzy in Python. If, instead, keys are required to be _hashable_\r\n\r\nYep, my mistake, \"hashability\" is the right property."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458337106",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-458337106",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 458337106,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODMzNzEwNg==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T23:01:16Z",
    "updated_at": "2019-01-28T23:09:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm not a core dev, but FWIW, here are some counter points to @toobaz arguments:\r\n\r\n> if there is no reason to disallow it, let's not say it's not allowed\r\n\r\nIf the code is not designed and *tested* for it, such a carte blanche is (not in this example, but across 1000s of small cuts) an immense burden down the road when something that wasn't explicitly forbidden suddenly breaks.\r\n\r\n> if we didn't say it's not allowed, it's allowed, and should work\r\n\r\nSee lack of testing above. Duck typing really bites us in the ass here. Stability (a possible SemVer after 1.0) even more.\r\n\r\n> if we think that the reason to disallow it is that it makes code simpler, we are almost always wrong. Clean code will work with any type a user throws in, as long as it satisfies general properties (e.g. `__hash__`).\r\n\r\nThe previous behaviour was specifically causing some weird KeyErrors for stuff that should have never been tested as a key (hence I'm adding a try-except in this PR), see #22484. I could have easily maintained this capability, if it had been tested, or even documented.\r\n\r\n> Viceversa, explicitly listing the types we \"like\" as scalar will require us to amend the list (and the docs) every time we find some new type that yes, we think is worth allowing.\r\n\r\nThat - in contrast to the above - would make it a controlled (non-breaking) expansion where necessary (IMO far preferable). I'm also thinking the ecosystem has matured enough by now to broadly have a common understanding what \"scalar\" means.\r\n\r\n> (a valid reason to disallow it is that either it brings ambiguity, or it changes the semantics, as would be accepting lists as keys)\r\n\r\nThat line can be blurred arbitrarily far (see [my example](https://github.com/pandas-dev/pandas/issues/24969#issuecomment-458241015) in the issue).\r\n\r\n> Don't get me wrong: it is good to have this discussion once and for all if it results in cleaner docs/assumptions. But my opinion is that the docs should say \"you can use as keys anything which is not mutable\".\r\n\r\nIn #24702, it sounded like you're advocating against using tuples as keys (which I would agree with), which [also ~aren't mutable~ are hashable](https://docs.python.org/3/glossary.html#term-immutable)\r\n\r\nIMO, the API should have a clearly defined surface, not an arbitrary \"whatever happens to work\". The latter would mean (and already does to some extent) a disproportionate amount of dev time to chase down weird corner cases, rather than focus on a consistent API that's useful and unambiguous for 99.99% of the cases."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458342687",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-458342687",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 458342687,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODM0MjY4Nw==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T23:22:31Z",
    "updated_at": "2019-01-28T23:22:31Z",
    "author_association": "MEMBER",
    "body": "> If the code is not designed and _tested_ for it\r\n\r\nYou test _lines of code_, not _user behavior_. Otherwise tests suites would have to be infinite. You write code that satisfies properties, not just that doesn't break your tests. Tests are a very useful addition, but you will never test any possible combination of parameters, even if you list one by one the possible values they can take. Otherwise, since duck typing is the norm in Python, you would be accusing a very large number of projects of not being able to write effective tests.\r\n\r\nNotice, by the way, that \"custom types\" is not a precise definition. People might feed our indices with types that _they_ did not create, but other libraries did.\r\n\r\n> The previous behaviour was specifically causing some weird KeyErrors for stuff that should have never been tested as a key (hence I'm adding a try-except in this PR), see #22484.\r\n\r\nFeel free to expand, I'm not following you. Notice that ``Index`` subclasses have all the right to raise ``TypeError``s, because there the types are clearly defined.\r\n\r\n\r\n> In #24702, it sounded like you're advocating against using tuples as keys\r\n\r\nNot at all. I said multiple times in many other discussions that tuples (with hashable content) are perfectly valid keys. I actually used exactly the same arguments I'm using here, that's why I'm boring :-)\r\n\r\n> IMO, the API should have a clearly defined surface, not an arbitrary \"whatever happens to work\"\r\n\r\nThat's sure. I'm being very clear (although @wkschwartz beat me at it) on what the API should support. And it should work on what it supports.\r\n\r\n> That line can be blurred arbitrarily far (see [my example](https://github.com/pandas-dev/pandas/issues/24969#issuecomment-458241015) in the issue).\r\n\r\nNot following you. I'm replying there."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458346345",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-458346345",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 458346345,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODM0NjM0NQ==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T23:37:03Z",
    "updated_at": "2019-01-28T23:44:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "> You test lines of code, not user behavior. Otherwise tests suites would have to be infinite.\r\n\r\nNot if there's a well-defined set of input types. ;-)\r\n\r\n> Feel free to expand, I'm not following you.\r\n\r\nThe iterator that gets passed to `df.set_index` (see OP of #22484), say, in the expectation of its values being used as the index, somehow gets turned into an `Index` and then raises a `KeyError`. That's one of several confusing examples.\r\n\r\n> That's sure. I'm being very clear (although @wkschwartz beat me at it) on what the API should support. And it should work on what it supports.\r\n\r\nOk, that's a more nuanced discussion then (vs. \"everything that works is allowed\"). If all hashable objects should be usable as keys, we'd have to drastically improve our testing for it, but it's not impossible to try to support it, certainly. I just think it's far too wide a line to draw. I mentioned in the issue that it would be more feasible to add `dataclasses` specifically to the types we test, rather than all hashables (and to be sure: my point is not about @wkschwartz use case - much less against him)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458348966",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-458348966",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 458348966,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODM0ODk2Ng==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T23:48:20Z",
    "updated_at": "2019-01-28T23:48:20Z",
    "author_association": "MEMBER",
    "body": "> If all hashable objects should be usable as keys, we'd have to drastically improve our testing for it, but it's not impossible\r\n\r\nAgain, non sequitur. Testing is good, but we want to write code that works even in those cases in which it was not tested.\r\n\r\n> Not if there's a well-defined set of input types. ;-)\r\n\r\nOK, let's cut it short: will you soon be asking us to limit the _values_ of ``Series``/``DataFrame``s to well-defined set of input types? I hope not. Do you think this is a problem for our testing suite? I hope not.\r\n\r\nIf you need to test any possible combination of allowed input types with every possible behavior of every method in the pandas API, tests will be just ''slightly short'' of infinite.\r\n\r\n\r\n> (see OP of #22484)\r\n\r\nI see three points there, and not sure if any of them is a problem. Can you assume I'm even more stupid than I am?\r\n\r\n\r\nGeneral comment: I still wasn't able to understand if this regression was a mistake or was made on purpose. In the second case, while I can only blame myself for not being able to keep up with the PRs, I still think such a change deserved some more discussion, e.g. in mailing list."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458350603",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-458350603",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 458350603,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODM1MDYwMw==",
    "user": {
      "login": "wkschwartz",
      "id": 1417749,
      "node_id": "MDQ6VXNlcjE0MTc3NDk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1417749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wkschwartz",
      "html_url": "https://github.com/wkschwartz",
      "followers_url": "https://api.github.com/users/wkschwartz/followers",
      "following_url": "https://api.github.com/users/wkschwartz/following{/other_user}",
      "gists_url": "https://api.github.com/users/wkschwartz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wkschwartz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wkschwartz/subscriptions",
      "organizations_url": "https://api.github.com/users/wkschwartz/orgs",
      "repos_url": "https://api.github.com/users/wkschwartz/repos",
      "events_url": "https://api.github.com/users/wkschwartz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wkschwartz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T23:55:16Z",
    "updated_at": "2019-01-28T23:55:16Z",
    "author_association": "NONE",
    "body": "To expand on @toobaz's https://github.com/pandas-dev/pandas/pull/24984#issuecomment-458342687: in a duck-typed language, APIs should be based on protocols, interfaces, or capabilities, not on exact class hierarchies. For example, Python core does fine defining the API surface of `dict` keys as anything hashable.\r\n\r\nRegarding whether [that which is not forbidden is allowed](https://en.wikipedia.org/wiki/Everything_which_is_not_forbidden_is_allowed) (TWINFIA): Pandas' having a version < 1 means the maintainers have the right to change semantics. Please balance that right against the mass of established code bases in production that rely on Pandas. I couldn't be the only author to assume TWINFIA.\r\n\r\nThank you, @h-vetinari and @toobaz, for taking an interest in this!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458426437",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-458426437",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 458426437,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODQyNjQzNw==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-29T06:46:42Z",
    "updated_at": "2019-01-29T06:46:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Again, non sequitur. Testing is good, but we want to write code that works even in those cases in which it was not tested.\r\n\r\nI agree that properly written code, that only ever depends on hashability for keys, is possible. But many methods (not just `set_index`) need to do a lot of gynmastics for **wildly varying input signatures** - in this case, column keys, list of column keys, various arrays, lists of arrays, and mixes between arrays and keys.\r\n*This* to me is a large reason of the utility of pandas, because very different (but equally sensible) scenarios just work. Allowing arbitrary types for keys makes this \"magic\" much more complicated, but OK, opinions can differ what should be the design goal.\r\n\r\n> > Not if there's a well-defined set of input types. ;-)\r\n\r\n> OK, let's cut it short: [strawman]\r\n\r\nLet me clarify my language here: it's certainly possible to test methods against various *container* types that it should accept. What's in those containers is another story.\r\n\r\n> > (see OP of #22484)\r\n\r\n> I see three points there, and not sure if any of them is a problem. Can you assume I'm even more stupid than I am?\r\n\r\nI know you're not (stupid), but ok, here's another try:\r\n```\r\n>>> import pandas as pd\r\n>>> import numpy as np\r\n>>>\r\n>>> df = pd.DataFrame(np.random.randn(5, 5), columns=list('ABCDE'))\r\n>>>\r\n>>> # Series-constructor uses iterators as if it was an array\r\n>>> my_iter = map(str, df.A)\r\n>>> pd.Series(my_iter)\r\n0     0.8812414814169731\r\n1    -1.0789948340108944\r\n2    -0.2049936946205116\r\n3    0.35952380472779194\r\n4     -0.529524992759882\r\n>>>\r\n>>> # so why not do the same for df.set_index, which *also* works with arrays?\r\n>>> my_iter = map(str, df.A)  # had been consumed previously\r\n>>> df.set_index(my_iter)\r\nTraceback (most recent call last):\r\n[...]\r\nKeyError: \"None of [Index(['0.8812414814169731', '-1.0789948340108944', '-0.2049936946205116',\\n       '0.35952380472779194', '-0.529524992759882'],\\n      dtype='object')] are in the [columns]\"\r\n```\r\nThere's a couple things that are confusing here. How did an iterator get turned into an `Index` object, without any further user-input? And why is that `Index` being tested as a column key?!\r\n\r\n> General comment: I still wasn't able to understand if this regression was a mistake or was made on purpose.\r\n\r\nThere was no informed decision on this regression because it was neither tested nor documented (if the documented standard had been \"all hashable objects can be key\", it would have been easy to conform to that). The problems were much more mundane, i.e. having to inspect the items of the outer-most container and determine whether they are keys / `Index` / `Series` / `MultiIndex` / `np.ndarray`. Through several rounds of review @jreback then added the review requirment to add objects that pass `is_list_like` (which got reverted just before the release) but that would have still broken this use case here.\r\n\r\nThe common ground here is (as we've seen above) to have a well-defined API. If what can be keys is explicitly documented somewhere, it can be kept in mind for whatever code that's being written, and hashability would be one of several valid choices for that.\r\n\r\nMy main point above was that enforcing code to stay runnable that only works because of an oversight (and there's a bunch of that in pandas, no matter how much we strive for clean code) is way too generous."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458431149",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-458431149",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 458431149,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODQzMTE0OQ==",
    "user": {
      "login": "toobaz",
      "id": 1224492,
      "node_id": "MDQ6VXNlcjEyMjQ0OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1224492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toobaz",
      "html_url": "https://github.com/toobaz",
      "followers_url": "https://api.github.com/users/toobaz/followers",
      "following_url": "https://api.github.com/users/toobaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/toobaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toobaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toobaz/subscriptions",
      "organizations_url": "https://api.github.com/users/toobaz/orgs",
      "repos_url": "https://api.github.com/users/toobaz/repos",
      "events_url": "https://api.github.com/users/toobaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toobaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-29T07:09:53Z",
    "updated_at": "2019-01-29T07:14:31Z",
    "author_association": "MEMBER",
    "body": "> But many methods (not just `set_index`) need to do a lot of gynmastics for **wildly varying input signatures**\r\n\r\nClaim: identifying _lists_ (more in general, containers) requres gymnastics (and, incidentally, detailed docs), while identifying _valid keys_ is extremely simple if their definition is \"hashable object\". And requires more complicated code, more complicated docs, and more waste of the user's memory, if the definition is more complicated than that.\r\n\r\nAs in: ExtensionArray (and having even our own types rely on them) is already making (I think) the pandas codebase _cleaner_, and _easier_ to maintain, precisely because we gave up setting the admissible values.\r\n\r\n> I know you're not (stupid), but ok, here's another try:\r\n\r\nThanks, I appreciate. You are perfectly right that pandas' definition of \"list-like\" is a mess, and that's a ground where we desperately need to set standards. Or maybe, we already all agree on standards (iterators _are_ list-like, tuples are not), and there is just annoying legacy code that doesn't follow them (for sure ``is_list_like`` [doesn't](https://github.com/pandas-dev/pandas/issues/24702)).\r\n\r\nI think that's not the case for keys, where things are... simple.\r\n\r\n**EDIT**: sure, list-likes and keys definitions are not so orthogonal as I am putting them. I'm clearly assuming that if something is a list-like, then it is _not_ a key, by definition. So if the user has hashable list-likes, the user will need to know that they are not valid keys (as they are valid containers). But \"outlawing\" types which are not list-likes _is_ orthogonal."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/458557939",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-458557939",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 458557939,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODU1NzkzOQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-29T14:23:52Z",
    "updated_at": "2019-01-29T14:23:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "Steering the discussion back to the PR: what needs to be done for 0.24.1? IMO, the changes and tests look good, just need a release note under \"fixed regressions\". Anything else?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/459239849",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-459239849",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 459239849,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTIzOTg0OQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-31T07:09:34Z",
    "updated_at": "2019-01-31T07:09:34Z",
    "author_association": "MEMBER",
    "body": "@h-vetinari did you keep a test for a TypeError being raised when given unhashable key? (I don't see it in the diff, but I assume it was already there?)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/459244020",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-459244020",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 459244020,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTI0NDAyMA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-31T07:28:27Z",
    "updated_at": "2019-01-31T07:28:27Z",
    "author_association": "MEMBER",
    "body": "> I disagree with that quite strongly, again based on the iter example. The intention of that is clearly different, and should not raise a KeyError.\r\n\r\n@h-vetinari I agree that the `map` example that you give above (https://github.com/pandas-dev/pandas/pull/24984#issuecomment-458426437) is indeed confusing, and it would be nice to solve this (or keep it solved). \r\nBut, you are making this a special case (raising a ValueError instead of KeyError) for one specific example (`iter`), while there may be other cases that will follow this path that are not necessarily confusing like that (eg a custom class, but simply a missing key). So, alternatively, I think we can also solve this with a better error message, instead of another error: we can also make the generic KeyError for a missing key into a more informative error message. Something like (in italic my addition to the existing error):\r\n\r\nThe parameter \"keys\" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays. *The passed object {} of type {} is regarded as a column key, but not found.*\r\n\r\nI think that would actually also be an improvement for the case that you eg pass a list instead of an array (and meant it to be new values instead of a column key).\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/459253571",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-459253571",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 459253571,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTI1MzU3MQ==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-31T08:09:43Z",
    "updated_at": "2019-01-31T08:16:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @jorisvandenbossche: @h-vetinari did you keep a test for a TypeError being raised when given unhashable key? (I don't see it in the diff, but I assume it was already there?)\r\n\r\nI was being tested through `set`, but raises a `ValueError` there. This was the reason I added `hash(col)` originally, because `test_set_index_raise_on_type` trying `df.set_index({1, 2, 3})` did not raise a `TypeError` but a `KeyError`.\r\n\r\nYour suggestion of adding the types for the missing keys is not bad (though it would still be better to raise something else than `KeyError` for that), but a bit complicated to implement, especially if there are several keys (and the code is called from different places).\r\n\r\nIn any case, I think it's cleaner to keep raising a `ValueError` for the iterator/generator cases, and use the `KeyError` otherwise. I've implemented that in the last commit and also reflected it in the tests. I also added a missing key test for the custom type for you."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/459546400",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-459546400",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 459546400,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTU0NjQwMA==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-31T23:26:55Z",
    "updated_at": "2019-01-31T23:26:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche \r\nAlright, this should now hopefully cover all bases, *even* hashable listlikes. I'm only raising `TypeError` for those hashable listlikes that have no length (like iterators/generators), and leaving the rest pass through to being tested as keys."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/459714413",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-459714413",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 459714413,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTcxNDQxMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-01T12:57:25Z",
    "updated_at": "2019-02-01T13:43:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "I would rather revert entirely to 0.23.4 and have these changes sit in master.  \r\n\r\nI am just really wary of changing this and ensure correctness. The prior PR regressed and now this is partially reverting / changing. I think it would be better to completely revert (though leave the tests). Then put this change to sit in master for 0.25.0"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/459728697",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-459728697",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 459728697,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTcyODY5Nw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-01T13:51:31Z",
    "updated_at": "2019-02-01T13:51:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "What are the pertinent differences between the 0.23.4 implementation and this implementation?\n\n> On Feb 1, 2019, at 06:57, Jeff Reback <notifications@github.com> wrote:\n> \n> I would rather revert entirely to 0.23.4 and have these changes sit in master.\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/459743198",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-459743198",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 459743198,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTc0MzE5OA==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-01T14:38:28Z",
    "updated_at": "2019-02-01T14:38:28Z",
    "author_association": "MEMBER",
    "body": "I also would prefer to just reverting to pre 0.23.4 behavior for the next release. IIUC a lot of the churn here started with #22486 which improved error messaging in some fringe cases. \r\n\r\nMy point I was trying to make on Gitter yesterday is I feel like we are cramming in a lot of churn to the code base for edge cases; would rather slow down and target a later release to look back at these comprehensively than keep patching on a tight timeline"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/459784594",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-459784594",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 459784594,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTc4NDU5NA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-01T16:38:37Z",
    "updated_at": "2019-02-01T16:38:37Z",
    "author_association": "MEMBER",
    "body": "Note that this PR is *mostly* doing that, reverting to 0.23.4 behaviour. \r\nWe could also actually 'git revert' #22486, but I am not sure that is needed (it also included some welcome code clean-up that is not related to those behavioural changes, additional tests, ..).\r\n\r\nBut it is true that we could revert more. Eg specifically revert the full \"validation of the passed values\" block that was added in #22486 (while keeping the code clean-up and additional tests). \r\nPersonally I think it would be nice to keep the better error *messages* (not necessarily the error *type*)\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/459791046",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-459791046",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 459791046,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTc5MTA0Ng==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-01T16:57:44Z",
    "updated_at": "2019-02-01T16:57:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @TomAugspurger: What are the pertinent differences between the 0.23.4 implementation and this implementation?\r\n\r\nComparing to 0.23.4 / pre-#22486, the whole inspection part below is new (which does nothing but raise better errors, rather than just plonking whatever into `frame[col]`)\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/794f61d4d77d075b37e40144ed3adbda669ace64/pandas/core/frame.py#L4149-L4181\r\n\r\nThe part where the values are then collected has been cleaned up, but basically only very minor changes.\r\nhttps://github.com/pandas-dev/pandas/blob/794f61d4d77d075b37e40144ed3adbda669ace64/pandas/core/frame.py#L4198-L4216\r\n\r\nCompare with (last [commit](https://github.com/pandas-dev/pandas/commits/0.23.x) of 23.4):\r\nhttps://github.com/pandas-dev/pandas/blob/0409521665bd436a10aea7e06336066bf07ff057/pandas/core/frame.py#L3889-L3913\r\n\r\nUsing `set` in the following was added (part of solving #22484):\r\nhttps://github.com/pandas-dev/pandas/blob/794f61d4d77d075b37e40144ed3adbda669ace64/pandas/core/frame.py#L4225-L4227\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/459792232",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-459792232",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 459792232,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTc5MjIzMg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-01T17:01:15Z",
    "updated_at": "2019-02-01T17:01:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Can you take a look at that Will? Any concerns?\n\n> On Feb 1, 2019, at 10:57, h-vetinari <notifications@github.com> wrote:\n> \n> @TomAugspurger: What are the pertinent differences between the 0.23.4 implementation and this implementation?\n> \n> Comparing to 0.23.4 / pre-#22486, the whole inspection part below is new (which does nothing but raise better errors, rather than just plonking whatever into frame[col])\n> \n> https://github.com/pandas-dev/pandas/blob/794f61d4d77d075b37e40144ed3adbda669ace64/pandas/core/frame.py#L4149-L4181\n> \n> The part where the values are then collected has been cleaned up, but basically only very minor changes.\n> https://github.com/pandas-dev/pandas/blob/794f61d4d77d075b37e40144ed3adbda669ace64/pandas/core/frame.py#L4198-L4216\n> \n> Compare with (last commit of 23.4):\n> https://github.com/pandas-dev/pandas/blob/0409521665bd436a10aea7e06336066bf07ff057/pandas/core/frame.py#L3889-L3913\n> \n> Using set in the following was added (part of solving #22484):\n> https://github.com/pandas-dev/pandas/blob/794f61d4d77d075b37e40144ed3adbda669ace64/pandas/core/frame.py#L4225-L4227\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/459792778",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-459792778",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 459792778,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTc5Mjc3OA==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-01T17:02:59Z",
    "updated_at": "2019-02-01T17:02:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @WillAyd: IIUC a lot of the churn here started with #22486 which improved error messaging in some fringe cases.\r\n\r\nThat custom types got excluded was indeed an oversight (cf. lack of testing), but the churn had to do with the orthogonal review requirement to allow all list-likes (against my goals for the PR, and in spite of warnings about the ambiguity of the tuple case). I pointed this out again in other discussions #22225 / #24046, which lead to removing those list-likes again with #24762.\r\n\r\nIOW, I don't quite agree that the improved errors were \"fringe\", and I will reject blame for the fact that these PRs caused churn. Rather, I was proactively trying to rectify/improve the situation before a release - also with this PR.\r\n\r\nOTOH, I agree with you about not supporting these custom cases, and would have preferred to deprecate them already for 0.24.1. However, the prevailing consensus is to fix the regression first, so I tried to achieve that, and to provide another (IMO better) option than just reverting."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/459793695",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-459793695",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 459793695,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTc5MzY5NQ==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-01T17:05:47Z",
    "updated_at": "2019-02-01T17:05:47Z",
    "author_association": "MEMBER",
    "body": "@h-vetinari want to be clear not blaming you or that PR for anything - this kind of stuff just happens :-)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/459798525",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-459798525",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 459798525,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTc5ODUyNQ==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-01T17:20:55Z",
    "updated_at": "2019-02-01T17:20:55Z",
    "author_association": "MEMBER",
    "body": "I still think Jeff's approach on how to move forward is the best in this situation. OK with whatever you ultimately decide though"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/459821201",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-459821201",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 459821201,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTgyMTIwMQ==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-01T18:29:42Z",
    "updated_at": "2019-02-01T18:29:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @jorisvandenbossche: Note that this PR is *mostly* doing that, reverting to 0.23.4 behaviour.\r\n\r\nFor some reason, your post hadn't popped up in my tab before I wrote the detailed code comparison, but you're right. After the back-and-forth with list-likes, the only thing that is now changed compared to 0.23.4 is better errors and more tests. \r\n\r\n> We could also actually 'git revert' #22486 [...]\r\n\r\nNot that I don't understand the reluctance to keep adding more PRs on top...\r\n\r\nIn order to do a full revert, one would have to also (and first) revert #24762. If that's the consensus, this could be done on the 0.24.x-branch without touching master, I'm guessing? Naturally, I would prefer the error improvements here though."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/459824627",
    "html_url": "https://github.com/pandas-dev/pandas/pull/24984#issuecomment-459824627",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/24984",
    "id": 459824627,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1OTgyNDYyNw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-01T18:40:23Z",
    "updated_at": "2019-02-01T19:55:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "@WillAyd do you have a chance to take a look through \r\nhttps://github.com/pandas-dev/pandas/pull/24984#issuecomment-459791046?\r\n\r\nand here's a diff of the `set_index` implementation prior to #22486 and this PR\r\n\r\n<details>\r\n\r\n```diff\r\ndiff --git a/a b/b\r\nindex 5db9299..ed97d58 100644\r\n--- a/a\r\n+++ b/b\r\n@@ -1,7 +1,46 @@\r\n         inplace = validate_bool_kwarg(inplace, 'inplace')\r\n+\r\n+        err_msg = ('The parameter \"keys\" may be a column key, one-dimensional '\r\n+                   'array, or a list containing only valid column keys and '\r\n+                   'one-dimensional arrays.')\r\n+\r\n         if not isinstance(keys, list):\r\n             keys = [keys]\r\n \r\n+        missing = []\r\n+        for col in keys:\r\n+            if (is_scalar(col) or isinstance(col, tuple)):\r\n+                # if col is a valid column key, everything is fine\r\n+                # tuples are always considered keys, never as list-likes\r\n+                if col not in self:\r\n+                    missing.append(col)\r\n+            elif isinstance(col, (ABCIndexClass, ABCSeries,\r\n+                                  np.ndarray, list)):\r\n+                # arrays are fine as long as they are one-dimensional\r\n+                if getattr(col, 'ndim', 1) > 1:\r\n+                    raise ValueError(err_msg)\r\n+            elif is_list_like(col) and not hasattr(col, '__len__'):\r\n+                # various iterators/generators are hashable, but should not\r\n+                # raise a KeyError; we identify them by their lack of __len__.\r\n+                # hashable listlikes with __len__ get tested as keys below.\r\n+                tipo = type(col)\r\n+                raise TypeError(err_msg + ' Received column of '\r\n+                                'type {}'.format(tipo))\r\n+            else:\r\n+                # everything else gets tried as a key; see GH 24969\r\n+                try:\r\n+                    found = col in self.columns\r\n+                except TypeError:\r\n+                    tipo = type(col)\r\n+                    raise TypeError(err_msg + ' Received column of '\r\n+                                    'type {}'.format(tipo))\r\n+                else:\r\n+                    if not found:\r\n+                        missing.append(col)\r\n+\r\n+        if missing:\r\n+            raise KeyError('{}'.format(missing))\r\n+\r\n         if inplace:\r\n             frame = self\r\n         else:\r\n@@ -11,7 +50,7 @@\r\n         names = []\r\n         if append:\r\n             names = [x for x in self.index.names]\r\n-            if isinstance(self.index, MultiIndex):\r\n+            if isinstance(self.index, ABCMultiIndex):\r\n                 for i in range(self.index.nlevels):\r\n                     arrays.append(self.index._get_level_values(i))\r\n             else:\r\n@@ -19,29 +58,23 @@\r\n \r\n         to_remove = []\r\n         for col in keys:\r\n-            if isinstance(col, MultiIndex):\r\n-                # append all but the last column so we don't have to modify\r\n-                # the end of this loop\r\n-                for n in range(col.nlevels - 1):\r\n+            if isinstance(col, ABCMultiIndex):\r\n+                for n in range(col.nlevels):\r\n                     arrays.append(col._get_level_values(n))\r\n-\r\n-                level = col._get_level_values(col.nlevels - 1)\r\n                 names.extend(col.names)\r\n-            elif isinstance(col, Series):\r\n-                level = col._values\r\n-                names.append(col.name)\r\n-            elif isinstance(col, Index):\r\n-                level = col\r\n+            elif isinstance(col, (ABCIndexClass, ABCSeries)):\r\n+                # if Index then not MultiIndex (treated above)\r\n+                arrays.append(col)\r\n                 names.append(col.name)\r\n-            elif isinstance(col, (list, np.ndarray, Index)):\r\n-                level = col\r\n+            elif isinstance(col, (list, np.ndarray)):\r\n+                arrays.append(col)\r\n                 names.append(None)\r\n+            # from here, col can only be a column label\r\n             else:\r\n-                level = frame[col]._values\r\n+                arrays.append(frame[col]._values)\r\n                 names.append(col)\r\n                 if drop:\r\n                     to_remove.append(col)\r\n-            arrays.append(level)\r\n \r\n         index = ensure_index_from_sequences(arrays, names)\r\n \r\n@@ -50,7 +83,8 @@\r\n             raise ValueError('Index has duplicate keys: {dup}'.format(\r\n                 dup=duplicates))\r\n \r\n-        for c in to_remove:\r\n+        # use set to handle duplicate column names gracefully in case of drop\r\n+        for c in set(to_remove):\r\n             del frame[c]\r\n \r\n         # clear up memory usage\r\n```\r\n\r\n</details>\r\n\r\nAnd as @h-vetinari says, a simple revert of #22486 may very-well turn up dependent issues.\r\n"
  }
]
