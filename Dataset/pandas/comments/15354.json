[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/278669018",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15354#issuecomment-278669018",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15354",
    "id": 278669018,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODY2OTAxOA==",
    "user": {
      "login": "max-sixty",
      "id": 5635139,
      "node_id": "MDQ6VXNlcjU2MzUxMzk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/max-sixty",
      "html_url": "https://github.com/max-sixty",
      "followers_url": "https://api.github.com/users/max-sixty/followers",
      "following_url": "https://api.github.com/users/max-sixty/following{/other_user}",
      "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions",
      "organizations_url": "https://api.github.com/users/max-sixty/orgs",
      "repos_url": "https://api.github.com/users/max-sixty/repos",
      "events_url": "https://api.github.com/users/max-sixty/events{/privacy}",
      "received_events_url": "https://api.github.com/users/max-sixty/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-09T15:07:03Z",
    "updated_at": "2017-02-09T15:07:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "If you're using 'standard' functions, these are vectorized, and so v fast (`ts.rolling(5).max().dropna()[::2]`). \r\n\r\nIIUC the saving here would come from only applying the function a fraction of the time (e.g. every nth value). But is there a case where that makes a practical difference?\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/278676420",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15354#issuecomment-278676420",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15354",
    "id": 278676420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODY3NjQyMA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-09T15:31:55Z",
    "updated_at": "2017-02-09T15:31:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "this could be done, but i would like to see a usecase where this matters. This would break the 'return same size as input' API as well. Though I don't think this is actually hard to implement (though would involve a number of changes in the implementation). We use marginal windows (IOW, compute the window and as you advance drop off the points that are leaving and add points that you are gaining). So still would have to compute everthing, but you just wouldn't output it."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/278821133",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15354#issuecomment-278821133",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15354",
    "id": 278821133,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODgyMTEzMw==",
    "user": {
      "login": "alexlouden",
      "id": 1332954,
      "node_id": "MDQ6VXNlcjEzMzI5NTQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1332954?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexlouden",
      "html_url": "https://github.com/alexlouden",
      "followers_url": "https://api.github.com/users/alexlouden/followers",
      "following_url": "https://api.github.com/users/alexlouden/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexlouden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexlouden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexlouden/subscriptions",
      "organizations_url": "https://api.github.com/users/alexlouden/orgs",
      "repos_url": "https://api.github.com/users/alexlouden/repos",
      "events_url": "https://api.github.com/users/alexlouden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexlouden/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-10T00:26:58Z",
    "updated_at": "2017-02-10T00:26:58Z",
    "author_association": "NONE",
    "body": "Thanks for your replies!\r\n\r\n> IIUC the saving here would come from only applying the function a fraction of the time (e.g. every nth value). But is there a case where that makes a practical difference?\r\n\r\nMy use case is running aggregation functions (not just max) over some large timeseries dataframes - 400 columns, hours of data at 5-25Hz. I've also done a similar thing (feature engineering on sensor data) in the past with data up to 20kHz. Running 30 second windows with a 5 second step saves a big chunk of processing - e.g. at 25Hz with a 5s step it's 1/125th of the work, which makes the difference between it running in 1 minute or 2 hours.\r\n\r\nI can obviously fall back to numpy, but it'd be nice if there was a higher level API for doing this. I just thought it was worth the suggestion in case others would find it useful too - I don't expect you to build a feature just for me!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/278826389",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15354#issuecomment-278826389",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15354",
    "id": 278826389,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODgyNjM4OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-10T00:58:53Z",
    "updated_at": "2017-02-10T00:58:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "you can try resamplimg to a higher frequency interval first then rolling\r\n\r\nsomething like\r\n\r\ndf = df.resample('30s')\r\ndf.rolling(..).max() (or whatever function)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/278855117",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15354#issuecomment-278855117",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15354",
    "id": 278855117,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODg1NTExNw==",
    "user": {
      "login": "alexlouden",
      "id": 1332954,
      "node_id": "MDQ6VXNlcjEzMzI5NTQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1332954?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexlouden",
      "html_url": "https://github.com/alexlouden",
      "followers_url": "https://api.github.com/users/alexlouden/followers",
      "following_url": "https://api.github.com/users/alexlouden/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexlouden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexlouden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexlouden/subscriptions",
      "organizations_url": "https://api.github.com/users/alexlouden/orgs",
      "repos_url": "https://api.github.com/users/alexlouden/repos",
      "events_url": "https://api.github.com/users/alexlouden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexlouden/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-10T04:31:36Z",
    "updated_at": "2017-02-10T04:31:36Z",
    "author_association": "NONE",
    "body": "Hey @jreback, thanks for the suggestion.\r\n\r\nThis would work if I was just running `max` on my data (resample needs a reduction function, otherwise it defaults to `mean`, right?):\r\n\r\n```python\r\ndf.resample('1s').max().rolling(30).max()\r\n```\r\n\r\nHowever I'd like to run my reduction function on 30 seconds of data, then move forward 1 second, and run it on the next 30 seconds of data, etc. The method above applies a function on 1 second of data, and then another function on 30 results of the first function.\r\n\r\nHere's a quick example - running a peak to peak calculation doesn't work running twice (obviously):\r\n\r\n```python\r\n# 10 minutes of data at 5Hz\r\nn = 5 * 60 * 10\r\nrng = pandas.date_range('1/1/2017', periods=n, freq='200ms')\r\nnp.random.seed(0)\r\nd = np.cumsum(np.random.randn(n), axis=0)\r\ns = pandas.Series(d, index=rng)\r\n\r\n# Peak to peak\r\ndef p2p(d):\r\n    return d.max() - d.min()\r\n\r\ndef p2p_arr(d):\r\n    return d.max(axis=1) - d.min(axis=1)\r\n\r\ndef rolling_with_step(s, window, step, func):\r\n    # See https://ga7g08.github.io/2015/01/30/Applying-python-functions-in-moving-windows/\r\n    vert_idx_list = np.arange(0, s.size - window, step)\r\n    hori_idx_list = np.arange(window)\r\n    A, B = np.meshgrid(hori_idx_list, vert_idx_list)\r\n    idx_array = A + B\r\n    x_array = s.values[idx_array]\r\n    idx = s.index[vert_idx_list + int(window/2.)]\r\n    d = func(x_array)\r\n    return pandas.Series(d, index=idx)\r\n\r\n# Plot data\r\nax = s.plot(figsize=(12, 8), legend=True, label='Data')\r\n\r\n# Plot resample then rolling (obviously does not work)\r\ns.resample('1s').apply(p2p).rolling(window=30, center=True).apply(p2p).plot(ax=ax, label='1s p2p, roll 30 p2p', legend=True)\r\n\r\n# Plot rolling window with step\r\nrolling_with_step(s, window=30 * 5, step=5, func=p2p_arr).plot(ax=ax, label='Roll 30, step 1s', legend=True)\r\n```\r\n\r\n![rolling window](https://cloud.githubusercontent.com/assets/1332954/22814116/d4cb2004-ef8b-11e6-898a-e47c105a635f.png)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/278956578",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15354#issuecomment-278956578",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15354",
    "id": 278956578,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODk1NjU3OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-10T14:36:57Z",
    "updated_at": "2017-02-10T14:36:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "@alexlouden from your original description I think something like\r\n\r\n``df.resample('5s').max().rolling('30s').mean()`` (or whatever reductions) is more in-line with what you want\r\n\r\nIOW, take whatever is in a 5s bin, then reduce it to a single point, then roll over those bins. This general idea is that you have lots of data that can be summarized at a short timescale, but you actually want the rolling of this at a higher level.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/279288462",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15354#issuecomment-279288462",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15354",
    "id": 279288462,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3OTI4ODQ2Mg==",
    "user": {
      "login": "alexlouden",
      "id": 1332954,
      "node_id": "MDQ6VXNlcjEzMzI5NTQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1332954?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexlouden",
      "html_url": "https://github.com/alexlouden",
      "followers_url": "https://api.github.com/users/alexlouden/followers",
      "following_url": "https://api.github.com/users/alexlouden/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexlouden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexlouden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexlouden/subscriptions",
      "organizations_url": "https://api.github.com/users/alexlouden/orgs",
      "repos_url": "https://api.github.com/users/alexlouden/repos",
      "events_url": "https://api.github.com/users/alexlouden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexlouden/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-13T03:48:27Z",
    "updated_at": "2017-02-13T03:48:27Z",
    "author_association": "NONE",
    "body": "Hey @jreback, I actually want to run a function over 30 seconds of data, every 5 seconds. See the rolling_with_step function in my previous example. The additional step of max/mean doesn't work for my use case."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/284162996",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15354#issuecomment-284162996",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15354",
    "id": 284162996,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDE2Mjk5Ng==",
    "user": {
      "login": "Murmuria",
      "id": 5497806,
      "node_id": "MDQ6VXNlcjU0OTc4MDY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5497806?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Murmuria",
      "html_url": "https://github.com/Murmuria",
      "followers_url": "https://api.github.com/users/Murmuria/followers",
      "following_url": "https://api.github.com/users/Murmuria/following{/other_user}",
      "gists_url": "https://api.github.com/users/Murmuria/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Murmuria/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Murmuria/subscriptions",
      "organizations_url": "https://api.github.com/users/Murmuria/orgs",
      "repos_url": "https://api.github.com/users/Murmuria/repos",
      "events_url": "https://api.github.com/users/Murmuria/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Murmuria/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-04T16:36:54Z",
    "updated_at": "2017-03-04T16:49:13Z",
    "author_association": "NONE",
    "body": "@jreback, there is a real need for the step function that hasn't been brought out in this discussion yet. I second everything that @alexlouden has described, but I would like to add more use cases. \r\n\r\nSuppose that we are doing time-series analysis with input data sampled approximately 3 to 10 milliseconds. We are interested in frequency domain features. The first step in constructing them would be to find out the Nyquist frequency. Suppose by domain knowledge we know that is 10 Hz (once every 100 ms). That means, we need the data to have a frequency of at least 20 Hz (once every 50 ms), if the features should capture the input signal well. We cannot resample to a lower frequency than that. Ultimately here are the computations we do:\r\n\r\n`df.resample('50ms').mean().rolling(window=32).aggregate(power_spectrum_coeff)`\r\n\r\nHere we chose a window size in multiples of 8, and choosing 32 makes the window size to be 1.6 seconds. The aggregate function returns the single-sided frequency domain coefficients and without the first mean component (the fft function is symmetric and with mean value at 0th element). Following is the sample aggregate function:\r\n```\r\ndef power_spectrum_coeff():\r\n    def power_spectrum_coeff_(x):\r\n        return np.fft.fft(x)[1 : int(len(x) / 2 + 1)]\r\n\r\n    power_spectrum_coeff_.__name__ = 'power_spectrum_coeff'\r\n    return power_spectrum_coeff_\r\n```\r\nNow, we would like to repeat this in a sliding window of, say, every 0.4 seconds or every 0.8 seconds. There is no point in wasting computations and calculating FFT every 50 ms instead and then slicing later. Further, resampling down to 400 ms is not an option, because 400 ms is just 2.5 Hz, which is much lower than Nyquist frequency and doing so will result in all information being lost from the features. \r\n\r\nThis was frequency domain features, which has applications in many time-series related scientific experiments. However, even simpler time-domain aggregate functions such as standard deviation cannot be supported effectively by resampling. \r\n\r\n> Though I don't think this is actually hard to implement (though would involve a number of changes in the implementation). We use marginal windows (IOW, compute the window and as you advance, drop off the points that are leaving and add points that you are gaining). So still would have to compute everything, but you just wouldn't output it.\r\n\r\nHaving the 'step' parameter and being able to reduce actual computations by using it has to be the future goal of Pandas. If the step parameter only returns fewer points, then it's not worth doing, because we can slice the output anyhow. Perhaps given the work involved in doing this, we might just recommend all projects with these needs to use Numpy. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/284164797",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15354#issuecomment-284164797",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15354",
    "id": 284164797,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDE2NDc5Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-04T17:00:18Z",
    "updated_at": "2017-03-04T17:00:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Murmuria you are welcome to submit a pull-request to do this. Its actually not that difficult."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/326131446",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15354#issuecomment-326131446",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15354",
    "id": 326131446,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjEzMTQ0Ng==",
    "user": {
      "login": "mrullmi",
      "id": 3583775,
      "node_id": "MDQ6VXNlcjM1ODM3NzU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3583775?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrullmi",
      "html_url": "https://github.com/mrullmi",
      "followers_url": "https://api.github.com/users/mrullmi/followers",
      "following_url": "https://api.github.com/users/mrullmi/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrullmi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrullmi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrullmi/subscriptions",
      "organizations_url": "https://api.github.com/users/mrullmi/orgs",
      "repos_url": "https://api.github.com/users/mrullmi/repos",
      "events_url": "https://api.github.com/users/mrullmi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrullmi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-30T21:59:30Z",
    "updated_at": "2017-08-31T17:05:55Z",
    "author_association": "NONE",
    "body": "While I second the request for a `step` parameter in `rolling()`, I'd like to point out that it is possible to get the desired result with the `base` parameter in `resample()`, *if the step size is an integer fraction of the window size*. Using @alexlouden 's example:\r\n\r\n```python\r\npandas.concat([\r\n    s.resample('30s', label='left', loffset=pandas.Timedelta(15, unit='s'), base=i).agg(p2p) \r\n    for i in range(30)\r\n]).sort_index().plot(ax=ax, label='Solution with resample()', legend=True, style='k:')\r\n```\r\n\r\nWe get the same result (note that the line extends by 30 sec. on both sides):\r\n![rolling_with_step_using_resample](https://user-images.githubusercontent.com/3583775/29896508-1d7cc5d8-8d92-11e7-9c45-c80661faa704.png)\r\n\r\nThis is still somewhat wasteful, depending on the type of aggregation. For the particular case of peak-to-peak calculation as in @alexlouden 's example, `p2p_arr()` is almost 200x faster because it rearranges the series to a 2-D matrix and then uses a single call to `max()` and `min()`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/340559939",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15354#issuecomment-340559939",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15354",
    "id": 340559939,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0MDU1OTkzOQ==",
    "user": {
      "login": "AlexS12",
      "id": 6061587,
      "node_id": "MDQ6VXNlcjYwNjE1ODc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6061587?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AlexS12",
      "html_url": "https://github.com/AlexS12",
      "followers_url": "https://api.github.com/users/AlexS12/followers",
      "following_url": "https://api.github.com/users/AlexS12/following{/other_user}",
      "gists_url": "https://api.github.com/users/AlexS12/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AlexS12/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AlexS12/subscriptions",
      "organizations_url": "https://api.github.com/users/AlexS12/orgs",
      "repos_url": "https://api.github.com/users/AlexS12/repos",
      "events_url": "https://api.github.com/users/AlexS12/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AlexS12/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-30T19:37:18Z",
    "updated_at": "2017-10-30T19:37:18Z",
    "author_association": "NONE",
    "body": "The step parameter in rolling would also allow using this feature without a datetime index. Is there anyone already working on it?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/374648074",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15354#issuecomment-374648074",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15354",
    "id": 374648074,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDY0ODA3NA==",
    "user": {
      "login": "tsando",
      "id": 13929456,
      "node_id": "MDQ6VXNlcjEzOTI5NDU2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13929456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tsando",
      "html_url": "https://github.com/tsando",
      "followers_url": "https://api.github.com/users/tsando/followers",
      "following_url": "https://api.github.com/users/tsando/following{/other_user}",
      "gists_url": "https://api.github.com/users/tsando/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tsando/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tsando/subscriptions",
      "organizations_url": "https://api.github.com/users/tsando/orgs",
      "repos_url": "https://api.github.com/users/tsando/repos",
      "events_url": "https://api.github.com/users/tsando/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tsando/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-20T15:47:47Z",
    "updated_at": "2018-03-20T15:47:47Z",
    "author_association": "NONE",
    "body": "@alexlouden above said this:\r\n\r\n> I can obviously fall back to numpy, but it'd be nice if there was a higher level API for doing this. \r\n\r\nCan @alexlouden or anyone else who knows please share some insight as to how to do this with numpy? From my research so far, it seems it is not trivial to do this either in numpy. In fact, there's an open issue about it here https://github.com/numpy/numpy/issues/7753\r\n\r\nThanks"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/374929330",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15354#issuecomment-374929330",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15354",
    "id": 374929330,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDkyOTMzMA==",
    "user": {
      "login": "alexlouden",
      "id": 1332954,
      "node_id": "MDQ6VXNlcjEzMzI5NTQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1332954?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexlouden",
      "html_url": "https://github.com/alexlouden",
      "followers_url": "https://api.github.com/users/alexlouden/followers",
      "following_url": "https://api.github.com/users/alexlouden/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexlouden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexlouden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexlouden/subscriptions",
      "organizations_url": "https://api.github.com/users/alexlouden/orgs",
      "repos_url": "https://api.github.com/users/alexlouden/repos",
      "events_url": "https://api.github.com/users/alexlouden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexlouden/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-21T13:04:53Z",
    "updated_at": "2018-03-21T13:04:53Z",
    "author_association": "NONE",
    "body": "Hi @tsando - did the function `rolling_with_step` I used above not work for you?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/374933716",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15354#issuecomment-374933716",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15354",
    "id": 374933716,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDkzMzcxNg==",
    "user": {
      "login": "tsando",
      "id": 13929456,
      "node_id": "MDQ6VXNlcjEzOTI5NDU2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13929456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tsando",
      "html_url": "https://github.com/tsando",
      "followers_url": "https://api.github.com/users/tsando/followers",
      "following_url": "https://api.github.com/users/tsando/following{/other_user}",
      "gists_url": "https://api.github.com/users/tsando/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tsando/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tsando/subscriptions",
      "organizations_url": "https://api.github.com/users/tsando/orgs",
      "repos_url": "https://api.github.com/users/tsando/repos",
      "events_url": "https://api.github.com/users/tsando/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tsando/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-21T13:20:52Z",
    "updated_at": "2018-03-21T13:20:52Z",
    "author_association": "NONE",
    "body": "@alexlouden thanks, just checked that function and it seems to still depend on pandas (takes a series as an input and also uses the series index). I was wondering if there's a purely numpy approach on this. In the thread i mentioned https://github.com/numpy/numpy/issues/7753 they propose a function which uses numpy strides, but they are hard to understand and translate to window and step inputs."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/374965003",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15354#issuecomment-374965003",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15354",
    "id": 374965003,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDk2NTAwMw==",
    "user": {
      "login": "alexlouden",
      "id": 1332954,
      "node_id": "MDQ6VXNlcjEzMzI5NTQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1332954?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexlouden",
      "html_url": "https://github.com/alexlouden",
      "followers_url": "https://api.github.com/users/alexlouden/followers",
      "following_url": "https://api.github.com/users/alexlouden/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexlouden/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexlouden/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexlouden/subscriptions",
      "organizations_url": "https://api.github.com/users/alexlouden/orgs",
      "repos_url": "https://api.github.com/users/alexlouden/repos",
      "events_url": "https://api.github.com/users/alexlouden/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexlouden/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-21T14:52:01Z",
    "updated_at": "2018-03-21T14:52:01Z",
    "author_association": "NONE",
    "body": "@tsando [Here's a PDF](https://github.com/pandas-dev/pandas/files/1833593/2015-30-01-Applying-python-functions-in-moving-windows.pdf) of the blog post I linked to above - looks like the author has changed his Github username and hasn't put [his site](https://github.com/GregoryAshton/ga7g08.github.io/blob/master/_posts/2015-01-30-Applying-python-functions-in-moving-windows.html\r\n) up again. (I just ran it locally to convert it to PDF).\r\n\r\nMy function above was me just converting his last example to work with Pandas - if you wanted to use numpy directly you could do something like this: https://gist.github.com/alexlouden/e42f1d96982f7f005e62ebb737dcd987 \r\n\r\nHope this helps!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/375004581",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15354#issuecomment-375004581",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15354",
    "id": 375004581,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTAwNDU4MQ==",
    "user": {
      "login": "tsando",
      "id": 13929456,
      "node_id": "MDQ6VXNlcjEzOTI5NDU2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13929456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tsando",
      "html_url": "https://github.com/tsando",
      "followers_url": "https://api.github.com/users/tsando/followers",
      "following_url": "https://api.github.com/users/tsando/following{/other_user}",
      "gists_url": "https://api.github.com/users/tsando/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tsando/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tsando/subscriptions",
      "organizations_url": "https://api.github.com/users/tsando/orgs",
      "repos_url": "https://api.github.com/users/tsando/repos",
      "events_url": "https://api.github.com/users/tsando/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tsando/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-21T16:24:39Z",
    "updated_at": "2018-03-21T16:24:39Z",
    "author_association": "NONE",
    "body": "@alexlouden thanks! I just tried it on an array of shape `(13, 1313)` but it gave me this error:\r\n\r\n![image](https://user-images.githubusercontent.com/13929456/37722488-09addda8-2d24-11e8-8b6a-559ec22878c3.png)\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/446577441",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15354#issuecomment-446577441",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15354",
    "id": 446577441,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjU3NzQ0MQ==",
    "user": {
      "login": "Pierre-Bartet",
      "id": 24455641,
      "node_id": "MDQ6VXNlcjI0NDU1NjQx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/24455641?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Pierre-Bartet",
      "html_url": "https://github.com/Pierre-Bartet",
      "followers_url": "https://api.github.com/users/Pierre-Bartet/followers",
      "following_url": "https://api.github.com/users/Pierre-Bartet/following{/other_user}",
      "gists_url": "https://api.github.com/users/Pierre-Bartet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Pierre-Bartet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Pierre-Bartet/subscriptions",
      "organizations_url": "https://api.github.com/users/Pierre-Bartet/orgs",
      "repos_url": "https://api.github.com/users/Pierre-Bartet/repos",
      "events_url": "https://api.github.com/users/Pierre-Bartet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Pierre-Bartet/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-12T12:52:01Z",
    "updated_at": "2018-12-12T12:52:01Z",
    "author_association": "NONE",
    "body": "\"this could be done, but i would like to see a usecase where this matters.\"\r\n\r\nWhatever the project I worked on using pandas, I almost always missed this feature, it is usefull everytime you need to compute the apply only once in a while but still need good resolution inside each window."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/446645600",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15354#issuecomment-446645600",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15354",
    "id": 446645600,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NjY0NTYwMA==",
    "user": {
      "login": "tsando",
      "id": 13929456,
      "node_id": "MDQ6VXNlcjEzOTI5NDU2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13929456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tsando",
      "html_url": "https://github.com/tsando",
      "followers_url": "https://api.github.com/users/tsando/followers",
      "following_url": "https://api.github.com/users/tsando/following{/other_user}",
      "gists_url": "https://api.github.com/users/tsando/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tsando/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tsando/subscriptions",
      "organizations_url": "https://api.github.com/users/tsando/orgs",
      "repos_url": "https://api.github.com/users/tsando/repos",
      "events_url": "https://api.github.com/users/tsando/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tsando/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-12T16:14:53Z",
    "updated_at": "2018-12-12T16:14:53Z",
    "author_association": "NONE",
    "body": "I agree and support this feature too"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/460022333",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15354#issuecomment-460022333",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15354",
    "id": 460022333,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ2MDAyMjMzMw==",
    "user": {
      "login": "ellsaking",
      "id": 13976017,
      "node_id": "MDQ6VXNlcjEzOTc2MDE3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/13976017?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ellsaking",
      "html_url": "https://github.com/ellsaking",
      "followers_url": "https://api.github.com/users/ellsaking/followers",
      "following_url": "https://api.github.com/users/ellsaking/following{/other_user}",
      "gists_url": "https://api.github.com/users/ellsaking/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ellsaking/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ellsaking/subscriptions",
      "organizations_url": "https://api.github.com/users/ellsaking/orgs",
      "repos_url": "https://api.github.com/users/ellsaking/repos",
      "events_url": "https://api.github.com/users/ellsaking/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ellsaking/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-02-03T04:32:09Z",
    "updated_at": "2019-02-03T04:32:09Z",
    "author_association": "NONE",
    "body": "Need it almost every time when dealing with time series, the feature could give much better control for generating time series features for both visualization and analysis. Strongly support this idea!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/479377404",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15354#issuecomment-479377404",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15354",
    "id": 479377404,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3OTM3NzQwNA==",
    "user": {
      "login": "wangweichao0403",
      "id": 25580998,
      "node_id": "MDQ6VXNlcjI1NTgwOTk4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/25580998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wangweichao0403",
      "html_url": "https://github.com/wangweichao0403",
      "followers_url": "https://api.github.com/users/wangweichao0403/followers",
      "following_url": "https://api.github.com/users/wangweichao0403/following{/other_user}",
      "gists_url": "https://api.github.com/users/wangweichao0403/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wangweichao0403/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wangweichao0403/subscriptions",
      "organizations_url": "https://api.github.com/users/wangweichao0403/orgs",
      "repos_url": "https://api.github.com/users/wangweichao0403/repos",
      "events_url": "https://api.github.com/users/wangweichao0403/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wangweichao0403/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-03T07:44:18Z",
    "updated_at": "2019-04-03T07:44:18Z",
    "author_association": "NONE",
    "body": "agree and support this feature too"
  }
]
