[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/371164685",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20007#issuecomment-371164685",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20007",
    "id": 371164685,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTE2NDY4NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-07T14:57:01Z",
    "updated_at": "2018-03-07T14:57:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "you can add ``.fillna(0, downcast='infer')``if you want.\r\n\r\nThis is just adding more complexity to an already very complex ``pd.merge``. we already have ``.fillna`` for this purpose."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441228303",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20007#issuecomment-441228303",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20007",
    "id": 441228303,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTIyODMwMw==",
    "user": {
      "login": "GSanchis",
      "id": 1153028,
      "node_id": "MDQ6VXNlcjExNTMwMjg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1153028?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GSanchis",
      "html_url": "https://github.com/GSanchis",
      "followers_url": "https://api.github.com/users/GSanchis/followers",
      "following_url": "https://api.github.com/users/GSanchis/following{/other_user}",
      "gists_url": "https://api.github.com/users/GSanchis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GSanchis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GSanchis/subscriptions",
      "organizations_url": "https://api.github.com/users/GSanchis/orgs",
      "repos_url": "https://api.github.com/users/GSanchis/repos",
      "events_url": "https://api.github.com/users/GSanchis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GSanchis/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-23T12:24:28Z",
    "updated_at": "2018-11-23T12:39:28Z",
    "author_association": "NONE",
    "body": "So I just stumbled into this thread looking for the solution the OP is asking.\r\n\r\nI have a different case, in which I have a `DataFrame` with NaNs, which should remain NaNs, which I need to merge with another `DataFrame` which has only partial information for the first `DataFrame`:\r\n\r\n```\r\ndf1 = pd.read_csv(\"all.csv\")\r\ndf2 = pd.read_csv(\"activity.csv\")\r\ndf3 = df1.merge(df2, left_on='dealId', right_on='dealId')\r\ndf3.fillna(0)\r\n```\r\n\r\nIn this example, `all.csv` contains missing information in some columns, some rows, and I don't want to make up some fake value for them (and later on I will most likely want to filter out those rows, only in some cases, and depending on whether I am selecting that column with NaNs or not). `activity.csv` contains activity data for only _some_ of the `dealId`s in `all.csv`, and I do want the `dealId`s that are not in `activity.csv` to be filled up with 0 (no activity). However, if I use the code above I will end up with a `DataFrame` where the NaNs in the original `all.csv` `DataFrame` are replaced by 0, which is not what I intend to do.\r\n\r\nOne possible workaround would be something like this:\r\n\r\n```\r\nsome_very_odd_value=123123123123123123\r\ndf1 = pd.read_csv(\"all.csv\").fillna(some_very_odd_value)\r\ndf2 = pd.read_csv(\"activity.csv\")\r\ndf3 = df1.merge(df2, left_on='dealId', right_on='dealId')\r\ndf3.replace(some_very_odd_value, np.nan)\r\n```\r\n\r\nBut this feels like something I should not be doing."
  }
]
