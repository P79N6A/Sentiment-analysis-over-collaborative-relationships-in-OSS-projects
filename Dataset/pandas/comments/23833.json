[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/440594017",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23833#issuecomment-440594017",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23833",
    "id": 440594017,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDU5NDAxNw==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-21T09:24:23Z",
    "updated_at": "2018-11-21T09:24:23Z",
    "author_association": "MEMBER",
    "body": "Sounds like a plan.  Go for it!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/442627734",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23833#issuecomment-442627734",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23833",
    "id": 442627734,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjYyNzczNA==",
    "user": {
      "login": "h-vetinari",
      "id": 33685575,
      "node_id": "MDQ6VXNlcjMzNjg1NTc1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/33685575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/h-vetinari",
      "html_url": "https://github.com/h-vetinari",
      "followers_url": "https://api.github.com/users/h-vetinari/followers",
      "following_url": "https://api.github.com/users/h-vetinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/h-vetinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/h-vetinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/h-vetinari/subscriptions",
      "organizations_url": "https://api.github.com/users/h-vetinari/orgs",
      "repos_url": "https://api.github.com/users/h-vetinari/repos",
      "events_url": "https://api.github.com/users/h-vetinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/h-vetinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-28T22:22:25Z",
    "updated_at": "2018-11-28T22:22:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "An extract of the bugs found by #23982. They are not closed by that PR, but should be solved in a follow-up.\r\n```\r\n>>> import numpy as np\r\n>>> from pandas.core.dtypes.cast import maybe_promote\r\n>>>\r\n>>> # should be int16, not int32\r\n>>> maybe_promote(np.dtype('int8'), np.iinfo('int8').max + 1)\r\n(dtype('int32'), 128)\r\n>>>\r\n>>> # should be object, not raise\r\n>>> maybe_promote(np.dtype(int), np.iinfo('uint64').max + 1)\r\nTraceback (most recent call last):\r\n[...]\r\nOverflowError: Python int too large to convert to C long\r\n>>>\r\n>>> # should stay signed, not switch to unsigned\r\n>>> maybe_promote(np.dtype('uint8'), np.iinfo('uint8').max + 1)\r\n(dtype('int32'), 256)\r\n>>>\r\n>>> # should cast to int16, not int32\r\n>>> maybe_promote(np.dtype('uint8'), np.iinfo('int8').min - 1)\r\n(dtype('int32'), -129)\r\n>>> \r\n>>> # should stay int\r\n>>> maybe_promote(np.dtype('int64'), np.array([1]))\r\n(<class 'numpy.float64'>, nan)\r\n>>>\r\n>>> # should upcast to object, not float\r\n>>> maybe_promote(np.dtype('int64'), np.array([np.iinfo('int64').max + 1]))\r\n(<class 'numpy.float64'>, nan)\r\n>>>\r\n>>> # should only upcast to float32\r\n>>> maybe_promote(np.dtype('int8'), np.array([1], dtype='float32'))\r\n(<class 'numpy.float64'>, nan)\r\n>>>\r\n>>> # should upcast to float64\r\n>>> maybe_promote(np.dtype('float32'), np.finfo('float32').max * 1.1)\r\n(dtype('float32'), 3.7431058130238175e+38)\r\n>>>\r\n>>> # should only upcast to complex64, not complex128\r\n>>> maybe_promote(np.dtype('float32'), 1 + 1j)\r\n(<class 'numpy.complex128'>, (1+1j))\r\n>>>\r\n>>> # should not upcast\r\n>>> maybe_promote(np.dtype('bool'), np.array([True]))\r\n(<class 'numpy.object_'>, nan)\r\n>>>\r\n>>> # should still return nan, not iNaT\r\n>>> maybe_promote(np.dtype('bool'), np.array([1], dtype=np.dtype('datetime64[ns]')))\r\n(<class 'numpy.object_'>, -9223372036854775808)\r\n>>>\r\n>>> # inconsistently transforms fill_value\r\n>>> maybe_promote(np.dtype('datetime64[ns]'), True)\r\n(<class 'numpy.object_'>, nan)\r\n>>>\r\n>>> # should upcast to object\r\n>>> maybe_promote(np.dtype('datetime64[ns]'), np.array([True]))\r\n(dtype('<M8[ns]'), -9223372036854775808)\r\n>>>\r\n>>> # should upcast to object\r\n>>> maybe_promote(np.dtype('bytes'), np.array([True]))\r\n(dtype('S'), nan)\r\n>>>\r\n>>> # inconsistently transforms fill_value\r\n>>> maybe_promote(np.dtype('datetime64[ns]'), np.datetime64(1, 'ns'))\r\n(dtype('<M8[ns]'), 1)\r\n>>>\r\n>>> # should (IMO) cast to object (cf below)\r\n>>> maybe_promote(np.dtype('datetime64[ns]'), 1e10)\r\n(dtype('<M8[ns]'), 10000000000)\r\n>>>\r\n>>> # inconsistently transforms fill_value\r\n>>> maybe_promote(np.dtype('datetime64[ns]'), 1e20)\r\n(<class 'numpy.object_'>, nan)\r\n>>>\r\n>>> # does not upcast correctly (but implicitly turns string to int)\r\n>>> maybe_promote(np.dtype('timedelta64[ns]'), '1')\r\n(dtype('<m8[ns]'), 1)\r\n>>>\r\n>>> # should upcast to object\r\n>>> maybe_promote(np.dtype('int64'), np.timedelta64(1, 'ns'))\r\n(dtype('<m8[ns]'), numpy.timedelta64(1,'ns'))\r\n>>>\r\n>>> # should upcast to object\r\n>>> maybe_promote(np.dtype('float64'), np.timedelta64(1, 'ns'))\r\n(dtype('float64'), numpy.timedelta64(1,'ns'))\r\n>>>\r\n>>> # should upcast to object\r\n>>> maybe_promote(np.dtype('int64'), np.array([1], dtype=str))\r\n(<class 'numpy.float64'>, nan)\r\n>>>\r\n>>> # should upcast to object\r\n>>> maybe_promote(np.dtype(bytes), np.nan)\r\n(dtype('S'), nan)\r\n>>>\r\n>>> # falsely mangles None into NaN\r\n>>> maybe_promote(np.dtype(object), None)\r\n(<class 'numpy.object_'>, nan)\r\n```"
  }
]
