[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/438451990",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23664#issuecomment-438451990",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23664",
    "id": 438451990,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzODQ1MTk5MA==",
    "user": {
      "login": "alimcmaster1",
      "id": 16733618,
      "node_id": "MDQ6VXNlcjE2NzMzNjE4",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16733618?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alimcmaster1",
      "html_url": "https://github.com/alimcmaster1",
      "followers_url": "https://api.github.com/users/alimcmaster1/followers",
      "following_url": "https://api.github.com/users/alimcmaster1/following{/other_user}",
      "gists_url": "https://api.github.com/users/alimcmaster1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alimcmaster1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alimcmaster1/subscriptions",
      "organizations_url": "https://api.github.com/users/alimcmaster1/orgs",
      "repos_url": "https://api.github.com/users/alimcmaster1/repos",
      "events_url": "https://api.github.com/users/alimcmaster1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alimcmaster1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-13T21:52:42Z",
    "updated_at": "2018-11-15T01:32:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think we should be able to do something like @ikonst suggests [here](https://gist.github.com/peterhurford/09f7dcda0ab04b95c026c60fa49c2a68), I can give this a try.\r\n\r\n@TomAugspurger \r\nUpdate: what is the preferred way of doing this (a) copying useful fixture into a new pytest-pandas project -  similar to [flask](https://github.com/pytest-dev/pytest-flask), [django,](https://github.com/pytest-dev/pytest-django) or (b) exposing the fixtures as part of pandas and allowing users to import directly similar to the example above?\r\n\r\nUseful PyTest-Plugins Doc: [here](https://docs.pytest.org/en/2.7.3/plugins.html?highlight=re)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/439208666",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23664#issuecomment-439208666",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23664",
    "id": 439208666,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTIwODY2Ng==",
    "user": {
      "login": "ikonst",
      "id": 1186084,
      "node_id": "MDQ6VXNlcjExODYwODQ=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1186084?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ikonst",
      "html_url": "https://github.com/ikonst",
      "followers_url": "https://api.github.com/users/ikonst/followers",
      "following_url": "https://api.github.com/users/ikonst/following{/other_user}",
      "gists_url": "https://api.github.com/users/ikonst/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ikonst/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ikonst/subscriptions",
      "organizations_url": "https://api.github.com/users/ikonst/orgs",
      "repos_url": "https://api.github.com/users/ikonst/repos",
      "events_url": "https://api.github.com/users/ikonst/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ikonst/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-15T22:10:11Z",
    "updated_at": "2018-11-15T22:10:26Z",
    "author_association": "NONE",
    "body": "In fact, I wouldn't suggest that anymore, as per [pytest manual](https://docs.pytest.org/en/latest/writing_plugins.html#requiring-plugins-in-non-root-conftests). Instead, I'd import the fixtures into my conftest.py.\r\n\r\nHere's how I import fixtures recursively in one of my projects (the `fixtures` directory is where I keep all my fixtures):\r\n```py\r\nfrom pkgutil import walk_packages\r\n\r\nfrom . import fixtures\r\n\r\nfor package in walk_packages(fixtures.__path__, prefix=fixtures.__name__ + '.'):\r\n    module = package.module_finder.find_module(package.name).load_module()\r\n    globals().update({k: v for k, v in vars(module).items() if not k.startswith('_')})\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/439436659",
    "html_url": "https://github.com/pandas-dev/pandas/issues/23664#issuecomment-439436659",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23664",
    "id": 439436659,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTQzNjY1OQ==",
    "user": {
      "login": "fjetter",
      "id": 8629629,
      "node_id": "MDQ6VXNlcjg2Mjk2Mjk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8629629?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjetter",
      "html_url": "https://github.com/fjetter",
      "followers_url": "https://api.github.com/users/fjetter/followers",
      "following_url": "https://api.github.com/users/fjetter/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjetter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjetter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjetter/subscriptions",
      "organizations_url": "https://api.github.com/users/fjetter/orgs",
      "repos_url": "https://api.github.com/users/fjetter/repos",
      "events_url": "https://api.github.com/users/fjetter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjetter/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-16T15:52:19Z",
    "updated_at": "2018-11-16T15:52:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "The way @alimcmaster1 suggested is also similar to how `dask.distributed` is doing it. There the fixtures and all util functions to construct them are exposed as a separate module. See https://github.com/dask/distributed/blob/master/distributed/utils_test.py\r\n\r\nFor example:\r\n\r\n```\r\nfrom distributed.utils_test import cluster_fixture\r\ndef test_something(cluster_fixture):\r\n    assert True\r\n```\r\n\r\nor construct your own\r\n\r\n```\r\nimport pytest\r\nfrom distributed.utils_test import cluster\r\n@pytest.fixture(scope='session')\r\ndef session_scoped_cluster():\r\n    with cluster() as (scheduler, workers):\r\n        yield (scheduler, workers)\r\n```"
  }
]
