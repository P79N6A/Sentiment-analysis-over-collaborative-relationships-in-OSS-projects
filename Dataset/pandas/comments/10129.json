[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101851528",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-101851528",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 101851528,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTg1MTUyOA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-13T23:47:17Z",
    "updated_at": "2015-05-13T23:47:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "I really like how simple the implementation is. No PEPs, no hacking on CPython, others should be able to implement the same protocol.\n\nOne (maybe) drawback is that we must rely on people to be responsible and not modify the `self` being passed in. But that's a very pythonic sort of \"problem\". Anyone, I look forward to the discussion :)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101851801",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-101851801",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 101851801,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTg1MTgwMQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-13T23:49:39Z",
    "updated_at": "2015-05-13T23:49:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "http://toolz.readthedocs.org/en/latest/api.html#toolz.functoolz.pipe\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101854097",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-101854097",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 101854097,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTg1NDA5Nw==",
    "user": {
      "login": "mrocklin",
      "id": 306380,
      "node_id": "MDQ6VXNlcjMwNjM4MA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrocklin",
      "html_url": "https://github.com/mrocklin",
      "followers_url": "https://api.github.com/users/mrocklin/followers",
      "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
      "organizations_url": "https://api.github.com/users/mrocklin/orgs",
      "repos_url": "https://api.github.com/users/mrocklin/repos",
      "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrocklin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-13T23:56:52Z",
    "updated_at": "2015-05-13T23:56:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "I like the idea of our community establishing and using protocols more heavily.  Will ponder this one for a while.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101854234",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-101854234",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 101854234,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTg1NDIzNA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-13T23:58:14Z",
    "updated_at": "2015-05-13T23:58:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback I've used that in the past, and this would be very similar. `toolz.pipe` is less convenient for interactive use though, I think. You need to define each function ahead of time, including simple functions to get the data to pipe into the correct position for functions that don't expect `data` as the first argument. We'll still have to do that with `df.pipe`, but I think it's easier to do as you work through the chain.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101855347",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-101855347",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 101855347,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTg1NTM0Nw==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-14T00:02:58Z",
    "updated_at": "2015-05-14T00:03:12Z",
    "author_association": "MEMBER",
    "body": "We might also extend `pipe` to allow functions to customize which argument is used for chaining. This would be useful for seaborn, which currently takes dataframes in the `data` keyword argument:\n\n``` python\n# in pandas\ndef pipe(self, func, *args, **kwargs):\n    if hasattr(func, 'pipe_arg'):\n        kwargs[func.pipe_arg] = self\n        return func(*args, **kwargs)\n    return func(self, *args, **kwargs)\n\n# in seaborn (personally, I would probably implement this with a decorator)\nsns.violinplot.pipe_arg = 'data'\n\n# in user code\ndf.pipe(sns.violinplot, x='species', y='sepal_ratio')\n```\n\nAlternatively, we could just ask @mwaskom to break Seaborn's API again ;).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101855428",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-101855428",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 101855428,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTg1NTQyOA==",
    "user": {
      "login": "mrocklin",
      "id": 306380,
      "node_id": "MDQ6VXNlcjMwNjM4MA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrocklin",
      "html_url": "https://github.com/mrocklin",
      "followers_url": "https://api.github.com/users/mrocklin/followers",
      "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
      "organizations_url": "https://api.github.com/users/mrocklin/orgs",
      "repos_url": "https://api.github.com/users/mrocklin/repos",
      "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrocklin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-14T00:03:10Z",
    "updated_at": "2015-05-14T00:03:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "I agree that we can probably make something more pandas-y than `toolz.pipe` which, while convenient in its own way, doesn't jive particularly well with the pandas flow.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101865178",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-101865178",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 101865178,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTg2NTE3OA==",
    "user": {
      "login": "datnamer",
      "id": 8646471,
      "node_id": "MDQ6VXNlcjg2NDY0NzE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8646471?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/datnamer",
      "html_url": "https://github.com/datnamer",
      "followers_url": "https://api.github.com/users/datnamer/followers",
      "following_url": "https://api.github.com/users/datnamer/following{/other_user}",
      "gists_url": "https://api.github.com/users/datnamer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/datnamer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/datnamer/subscriptions",
      "organizations_url": "https://api.github.com/users/datnamer/orgs",
      "repos_url": "https://api.github.com/users/datnamer/repos",
      "events_url": "https://api.github.com/users/datnamer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/datnamer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-14T00:33:00Z",
    "updated_at": "2015-05-14T00:33:00Z",
    "author_association": "NONE",
    "body": "Is it possible to get infix syntax using a decorator? https://github.com/JulienPalard/Pipe \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101883921",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-101883921",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 101883921,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTg4MzkyMQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-14T02:24:33Z",
    "updated_at": "2015-05-14T02:24:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "That's done by overriding `__or__` though, right? I wouldn't feel comfortable doing that in library code.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101883989",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-101883989",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 101883989,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTg4Mzk4OQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-14T02:25:42Z",
    "updated_at": "2015-05-14T02:26:45Z",
    "author_association": "MEMBER",
    "body": "@datnamer Yes, but not satisfactorily without macros. The problem is that to get `df >> sns.violinplot('x', 'y')` to work properly, you need to allow `sns.violinplot('x', 'y')`, even though that would usually raise an error because the required `data` argument is not provided.\n\nSo turning functions into pipe objects means that their non-piped usability is compromised. There are ways around this, e.g., using tuples like dask: `df >> (sns.violinplot, 'x', 'y')`, but `>>` (with the spaces) is only one less character than `.pipe` (which is much more explicit).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/101887022",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-101887022",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 101887022,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMTg4NzAyMg==",
    "user": {
      "login": "mrocklin",
      "id": 306380,
      "node_id": "MDQ6VXNlcjMwNjM4MA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/306380?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrocklin",
      "html_url": "https://github.com/mrocklin",
      "followers_url": "https://api.github.com/users/mrocklin/followers",
      "following_url": "https://api.github.com/users/mrocklin/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrocklin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrocklin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrocklin/subscriptions",
      "organizations_url": "https://api.github.com/users/mrocklin/orgs",
      "repos_url": "https://api.github.com/users/mrocklin/repos",
      "events_url": "https://api.github.com/users/mrocklin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrocklin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-14T02:36:59Z",
    "updated_at": "2015-05-14T02:36:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "This isn't a viable candidate for a Pandas solution, but I thought I'd point out [`toolz.curry`](http://toolz.readthedocs.org/en/latest/curry.html#id1) which lives in the same space.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102028411",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-102028411",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 102028411,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjAyODQxMQ==",
    "user": {
      "login": "sinhrks",
      "id": 1696302,
      "node_id": "MDQ6VXNlcjE2OTYzMDI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1696302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sinhrks",
      "html_url": "https://github.com/sinhrks",
      "followers_url": "https://api.github.com/users/sinhrks/followers",
      "following_url": "https://api.github.com/users/sinhrks/following{/other_user}",
      "gists_url": "https://api.github.com/users/sinhrks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sinhrks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sinhrks/subscriptions",
      "organizations_url": "https://api.github.com/users/sinhrks/orgs",
      "repos_url": "https://api.github.com/users/sinhrks/repos",
      "events_url": "https://api.github.com/users/sinhrks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sinhrks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-14T12:56:29Z",
    "updated_at": "2015-05-14T12:58:20Z",
    "author_association": "MEMBER",
    "body": "Following is a list of pipes which R's `magrittr` package provides (the package is used by dplyr).\n\nhttp://cran.r-project.org/web/packages/magrittr/vignettes/magrittr.html\n- pipe: current example (and main usecase). `%>%` in magrittr.\n- tee: apply the function to left value, and return the left value as it is. `%T>%` in magrittr.\n- pipe and assignment: corresponding to panda's `inplace` option, `%<>%`  in magrittr.\n\nIf any of them is useful, preparing an separate kw (or method) might be an option.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102040681",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-102040681",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 102040681,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjA0MDY4MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-14T13:40:16Z",
    "updated_at": "2015-05-14T13:40:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "`tee` should be quite easy as a separate method. Just apply `func` and return `self`.\n\n``` python\ndf.tee(sns.violinplot, x='x', y='y')\n    .pipe(sm.OLS.from_formula('y ~ x'))\n```\n\nI do consider this experimental though. My initial thought was to start slow and see how things go so I didn't include that in the initial proposal.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102558979",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-102558979",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 102558979,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjU1ODk3OQ==",
    "user": {
      "login": "tacaswell",
      "id": 199813,
      "node_id": "MDQ6VXNlcjE5OTgxMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tacaswell",
      "html_url": "https://github.com/tacaswell",
      "followers_url": "https://api.github.com/users/tacaswell/followers",
      "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
      "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
      "organizations_url": "https://api.github.com/users/tacaswell/orgs",
      "repos_url": "https://api.github.com/users/tacaswell/repos",
      "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tacaswell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-16T01:15:17Z",
    "updated_at": "2015-05-16T01:15:17Z",
    "author_association": "CONTRIBUTOR",
    "body": ":+1: I like this in general as an alternative to the current `df.plot`.  It also fits pretty well with where I (speaking only for me) want to push the mpl API. \n\n`tee` worries me a bit as you lose the ability to get the Artists back which is important if you want to do anything interactive.\n\nInstead of pushing the decorator out to other libraries, I think it would be better to encourage end user to decorate on the fly, ex\n\n``` python\npd_violin = pd.pipeify(sns.violin)\nartists = df.pipe(pd_violin, x='foo', y='bar')\n```\n\nor to give `pipe` a reserved kwarg like `_pipe_target` so\n\n``` python\ndef pipe(self, func, _pipe_target=None, *args, **kwargs):\n    if pipe_target is not None:\n        kwargs[_pipe_target] = self\n        return func(*args, **kwargs)\n    else:\n        return func(self, *args, **kwargs)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102631633",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-102631633",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 102631633,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjYzMTYzMw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-16T14:05:25Z",
    "updated_at": "2015-05-17T01:37:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Another drawback is that libraries wishing to support pandas <0.17 will need to implement there own `pipeable` decorator. I've got one in `pandas/util/decorators.py`\n\n``` python\ndef pipeable(pipe_arg):\n    def decorate(func):\n        setattr(func, 'pipe_arg', pipe_arg)\n\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            return func(*args, **kwargs)\n        return wrapper\n    return decorate\n```\n\nIt's not difficult, but it's **essential** that everyone agrees on the name for `pipe_arg`. This is a point in favor of @tacaswell's suggestion, but I'm pretty attached to simply being able to write `df.pipe(sns.violinplot, 'x', 'y')` :)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102646785",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-102646785",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 102646785,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjY0Njc4NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-16T16:20:43Z",
    "updated_at": "2015-05-16T16:20:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "@josef-pkt would statsmodels be interested in adding the decorators to support this? I see it working quite nicely with the formula API. I'll send over a PR if you want. I believe you're hoping to have a release in the not too distant future? It'd be nice to lay the groundwork in statsmodels 0.7. Even if that comes out before the next version of pandas, adding the decorators should entirely transparent to pre 0.17 pandas and just work for pandas >= 0.17.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102656062",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-102656062",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 102656062,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjY1NjA2Mg==",
    "user": {
      "login": "mwaskom",
      "id": 315810,
      "node_id": "MDQ6VXNlcjMxNTgxMA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/315810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mwaskom",
      "html_url": "https://github.com/mwaskom",
      "followers_url": "https://api.github.com/users/mwaskom/followers",
      "following_url": "https://api.github.com/users/mwaskom/following{/other_user}",
      "gists_url": "https://api.github.com/users/mwaskom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mwaskom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mwaskom/subscriptions",
      "organizations_url": "https://api.github.com/users/mwaskom/orgs",
      "repos_url": "https://api.github.com/users/mwaskom/repos",
      "events_url": "https://api.github.com/users/mwaskom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mwaskom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-16T17:12:41Z",
    "updated_at": "2015-05-16T17:12:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Another drawback with this API is that the user must be a bit more disciplined about positional arguments vs kwargs. Assuming df.pipe and that seaborn's violin plot has been decorated.\n\nHm, tricky. Though, `FacetGrid.map` works the same way, so there's precedent.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102669015",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-102669015",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 102669015,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjY2OTAxNQ==",
    "user": {
      "login": "josef-pkt",
      "id": 440735,
      "node_id": "MDQ6VXNlcjQ0MDczNQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/440735?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/josef-pkt",
      "html_url": "https://github.com/josef-pkt",
      "followers_url": "https://api.github.com/users/josef-pkt/followers",
      "following_url": "https://api.github.com/users/josef-pkt/following{/other_user}",
      "gists_url": "https://api.github.com/users/josef-pkt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/josef-pkt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/josef-pkt/subscriptions",
      "organizations_url": "https://api.github.com/users/josef-pkt/orgs",
      "repos_url": "https://api.github.com/users/josef-pkt/repos",
      "events_url": "https://api.github.com/users/josef-pkt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/josef-pkt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-16T19:36:59Z",
    "updated_at": "2015-05-16T19:36:59Z",
    "author_association": "NONE",
    "body": "What's the difference between\n`model = df.pipe(sm.OLS.from_formula('y ~ x'))` and \n`model = sm.OLS.from_formula('y ~ x', df)` ?\n\nWould this be worth the increased complexity and fragility and possibly reduced flexibility?\n\nIt might be more useful in standalone function like some plots, or hypothesis tests or data transformations.\nAlso, I guess more useful than getting a model could be a wrapper for something like prediction, (assuming we are not interested in other results statistics):\n\n`predicted = smf.ols('y ~ x', df).fit().predict(df2)`    returns currently a numpy array\nor\n`fitted = sm.OLS.from_formula('y ~ x', df).fit().fittedvalues`     returns a pandas.Series\n\nThe main problem I see is that statsmodels is largely model centric and not data centric like pandas and seaborn. The other design issue is that statsmodels has little functional code, I just spend most of two weeks chaining models and results through multiple inheritance and similar. (We need to modify or chain 3 to 7 methods of a Maximum Likelihood Model.)\n\nPersonally, I find `magrittr` code pretty ugly, since my tradition is in repeated assignments to temporaries a la matlab/numpy.\n\nNevertheless, the best user interfaces, pandas wrapper and formulas, were included without my involvement. And we do have quite a bit of non-model functions.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102670204",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-102670204",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 102670204,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjY3MDIwNA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-16T19:47:17Z",
    "updated_at": "2015-05-16T19:47:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "@josef-pkt No functional difference between those first two. And readabilty-wise they're pretty much the same.\n\nThe (potential) benefit comes in chains, but that case is admittedly weaker for statsmodels since it's typically the last step in the chain, and you'll probably want to have a reference to the DataFrame that went into the model.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102677024",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-102677024",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 102677024,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjY3NzAyNA==",
    "user": {
      "login": "josef-pkt",
      "id": 440735,
      "node_id": "MDQ6VXNlcjQ0MDczNQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/440735?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/josef-pkt",
      "html_url": "https://github.com/josef-pkt",
      "followers_url": "https://api.github.com/users/josef-pkt/followers",
      "following_url": "https://api.github.com/users/josef-pkt/following{/other_user}",
      "gists_url": "https://api.github.com/users/josef-pkt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/josef-pkt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/josef-pkt/subscriptions",
      "organizations_url": "https://api.github.com/users/josef-pkt/orgs",
      "repos_url": "https://api.github.com/users/josef-pkt/repos",
      "events_url": "https://api.github.com/users/josef-pkt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/josef-pkt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-16T20:12:56Z",
    "updated_at": "2015-05-16T20:12:56Z",
    "author_association": "NONE",
    "body": "@TomAugspurger   We are holding on to the dataframe right now because we use it for some optional methods. I also see more benefits in other functions like in my examples where statsmodels is not necessarily the last step in the chain.\n\nIn some cases the main advantage in interactive work of having a method available is that I don't need an explicit import. That's one advantage of a plot method, since most of the time I don't import matplotlib automatically.\n\nJust an idea: instead of a pipe we could add (monkey patch) a method on pandas.DataFrame, like `df.sm(...)` which automatically uses the function or class in the `sm` namespace and replaces the `data` argument with `df`. I guess we don't have enough consistent usage of a `data` argument yet to make that work consistently. `df.sns('violinplot', ...)` ?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102716301",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-102716301",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 102716301,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjcxNjMwMQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-17T00:49:04Z",
    "updated_at": "2015-05-17T00:49:04Z",
    "author_association": "MEMBER",
    "body": "@TomAugspurger Hmm -- I'm not seeing issue you've described with seaborn. Are you sure you're running the latest dev version? Here's my example notebook, in which each of `iris.pipe(sns.violinplot, 'species', 'sepal_width')` and `iris.pipe(sns.violinplot, x='species', y='sepal_width')` work: http://nbviewer.ipython.org/gist/shoyer/3f73dc7ffa03883d3a43\n\nI suppose we can include a utility function for decorating functions as pipeable, but really it's even easier than you think. For example, you can just add the attribute directly: `sns.violinplot.pip_arg = 'data'`. Or if you prefer a decorator, you can use something even simpler:\n\n``` python\ndef pipeable(pipe_arg):\n    def decorate(func):\n        func.pipe_arg = pipe_arg\n        return func\n    return decorate\n```\n\n@josef-pkt To clarify, your first example should actually be: `model = df.pipe(sm.OLS.from_formula, 'y ~ x')`\n\nComing back to the API design discussion, one of my favorite things about the original, simple version of pipe is that it is entirely explicit and there is absolutely no magic:\n\n``` python\ndef pipe(self, func, *args, **kwargs):\n    return func(self, *args, **kwargs)\n```\n\nSo no, I don't think it's a good idea to encourage monkey patching DataFrame from external libraries. It's not explicit and very much goes against the norms of idiomatic Python.\n\nSimilarly, as much as I want `sns.violinplot` to be pipeable, I'm not convinced it's actually a good idea to encourage library authors to decorate their functions to denote pipe targets. This adds a whole additional level of complexity which effectively needs to be documented as part of the function signature, but which isn't actually part of the function signature and thus will be far less discoverable. We could do it, but I would only recommend that library authors use it with extreme reservations -- it's far better to just accept `data` as the first argument to any functions that you want to be pipeable.\n\nSo something like @tacaswell's suggestion might be the better way to go. A few other options:\n1. Pipe automatically uses the `data` argument if present, as determined by inspecting the function signature (with `inspect.getargspec`). Unfortunately, the inspect module is quite fragile.\n2. `df.pipe.data(sns.violinplot, 'x', 'y')` or `df.pipe['data'](sns.violinplot, 'x', 'y')`. These aren't very pretty and would have a much more complex implementation.\n3. We allow the first argument of pipe to be a string, in which case it's used to specify the target argument: `df.pipe('data', sns.violinplot, 'x', 'y')`. This is also messy to implement.\n4. We use some sort of sentinel object to signal the pipe argument: `df.pipe(sns.violinplot, 'x', 'y', data=pipe.HERE)`. But now pipe needs to import a shared module instead of simply being a protocol.\n\nOf these, I think my favorite is @tacaswell's original suggestion `df.pipe(sns.violinplot, 'x', 'y', _target='data')`. Or sticking with the simple implementation, and encouraging use of `lambda`: `df.pipe(lambda df: sns.violinplot('x', 'y', data=df))`\n\n@mwaskom can you remind us why you don't want to keep `data` as the first argument to `sns.violinplot`? I guess it's because it's the only way to make `sns.FacetGrid.map` work reliability without any magic? This is basically the same problem I'm trying to avoid here (to avoid implementing `pipe_arg`). On the plus side, at least `pipe` will already pair well with the explicit `sns.FacetGrid` API.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102720332",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-102720332",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 102720332,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjcyMDMzMg==",
    "user": {
      "login": "josef-pkt",
      "id": 440735,
      "node_id": "MDQ6VXNlcjQ0MDczNQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/440735?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/josef-pkt",
      "html_url": "https://github.com/josef-pkt",
      "followers_url": "https://api.github.com/users/josef-pkt/followers",
      "following_url": "https://api.github.com/users/josef-pkt/following{/other_user}",
      "gists_url": "https://api.github.com/users/josef-pkt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/josef-pkt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/josef-pkt/subscriptions",
      "organizations_url": "https://api.github.com/users/josef-pkt/orgs",
      "repos_url": "https://api.github.com/users/josef-pkt/repos",
      "events_url": "https://api.github.com/users/josef-pkt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/josef-pkt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-17T01:35:20Z",
    "updated_at": "2015-05-17T01:39:54Z",
    "author_association": "NONE",
    "body": "I just realized that method or functions that take a dataframe as a first argument will work without any changes (even if the data argument is called exog)\n\nwith the original proposed `pipe`\n\n```\nimport pandas as pd\nimport numpy as np\nimport statsmodels.formula.api as smf\n\ndf = pd.DataFrame(np.random.randn(10, 3))\ndf.columns = [\"a\", \"b\", \"c\"]\nresult = smf.ols('a ~ b', df).fit()\n\ndef pipe(self, func, *args, **kwargs):\n    return func(self, *args, **kwargs)\n\n# monkey to get the example to work\npd.DataFrame.pipe = pipe\n\npredicted = df.pipe(result.predict)\nprint(predicted)\nprint(df[df['a'] < 0].pipe(result.predict))\n```\n\n```\n>>> df.pipe(result.predict)\narray([ 0.77901375,  0.95606063,  0.72349671,  0.96823813,  1.33929812,\n        0.42730606,  0.57528495,  0.47756362,  0.52891164,  0.40572964])\n>>> df[df['a'] < 0].pipe(result.predict)\narray([ 0.77901375,  0.42730606,  0.57528495])\n```\n\nor with a lambda function\n\n(edited to fix typos)\n\n```\n>>> pt = lambda data, formula: smf.ols(formula, data).fit().summary2().tables[1]\n\n>>> df.pipe(pt, 'a ~ b')\n              Coef.  Std.Err.         t     P>|t|    [0.025    0.975]\nIntercept  0.560831  0.430557  1.302571  0.228965 -0.432035  1.553698\nb          0.369255  0.490102  0.753426  0.472782 -0.760921  1.499431\n\n>>> df.pipe(pt, 'a ~ c')\n              Coef.  Std.Err.         t     P>|t|    [0.025    0.975]\nIntercept  0.780714  0.392976  1.986672  0.082195 -0.125490  1.686917\nc          0.375825  0.593915  0.632793  0.544528 -0.993745  1.745395\n\n>>> df.pipe(pt, 'a ~ b + c')\n              Coef.  Std.Err.         t     P>|t|    [0.025    0.975]\nIntercept  0.561965  0.422812  1.329111  0.225494 -0.437828  1.561757\nb          0.657157  0.543692  1.208693  0.266020 -0.628471  1.942784\nc          0.742642  0.652395  1.138331  0.292437 -0.800028  2.285312\n```\n\nand\n\n```\n>>> df[df['a'] < 0].pipe(pt, 'a ~ b')\n              Coef.  Std.Err.          t     P>|t|    [0.025    0.975]\nIntercept -0.653352  0.048054 -13.596207  0.046739 -1.263935 -0.042768\nb          0.088062  0.119958   0.734112  0.596857 -1.436143  1.612267\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102720425",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-102720425",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 102720425,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjcyMDQyNQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-17T01:39:37Z",
    "updated_at": "2015-05-17T01:39:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer I must have had a bug in mine. It works both with named and positional arguments.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102726499",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-102726499",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 102726499,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjcyNjQ5OQ==",
    "user": {
      "login": "mwaskom",
      "id": 315810,
      "node_id": "MDQ6VXNlcjMxNTgxMA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/315810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mwaskom",
      "html_url": "https://github.com/mwaskom",
      "followers_url": "https://api.github.com/users/mwaskom/followers",
      "following_url": "https://api.github.com/users/mwaskom/following{/other_user}",
      "gists_url": "https://api.github.com/users/mwaskom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mwaskom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mwaskom/subscriptions",
      "organizations_url": "https://api.github.com/users/mwaskom/orgs",
      "repos_url": "https://api.github.com/users/mwaskom/repos",
      "events_url": "https://api.github.com/users/mwaskom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mwaskom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-17T02:37:21Z",
    "updated_at": "2015-05-17T02:37:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @mwaskom can you remind us why you don't want to keep data as the first argument to sns.violinplot? I guess it's because it's the only way to make sns.FacetGrid.map work reliability without any magic? This is basically the same problem I'm trying to avoid here (to avoid implementing pipe_arg). On the plus side, at least pipe will already pair well with the explicit sns.FacetGrid API.\n\nRight, one of the motivations for the change was to allow things to work better with `FacetGrid`, but also to bring `boxplot` and `violinplot` in line with most of the rest of the package. I guess there could be some argument that all seaborn function should take `data` first (like ggplot), but that would be an even more dramatic change. Also, for almost all the functions, `data` is optional and the positional arguments are happy to take vectors directly; I think originally I had the mindset of extending the basic matplotlib api and then adding the ability to name variables in a `data` object later, rather than orienting everything around a common dataframe representation...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102732663",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-102732663",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 102732663,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjczMjY2Mw==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-17T03:33:09Z",
    "updated_at": "2015-05-17T03:33:09Z",
    "author_association": "MEMBER",
    "body": "@mwaskom OK, fair enough. I agree that for Seaborn, for which DataFrames are optional, it makes sense for `data` not to be the first argument.\n\nI suppose another option would be to support an alternative API in Seaborn itself, e.g., `sns.pipeable.violinplot`. This seems nicer than the other explicit options we've seen. Again I'm still torn about whether or not `pipe_arg` is a good idea.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102734090",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-102734090",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 102734090,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjczNDA5MA==",
    "user": {
      "login": "mwaskom",
      "id": 315810,
      "node_id": "MDQ6VXNlcjMxNTgxMA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/315810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mwaskom",
      "html_url": "https://github.com/mwaskom",
      "followers_url": "https://api.github.com/users/mwaskom/followers",
      "following_url": "https://api.github.com/users/mwaskom/following{/other_user}",
      "gists_url": "https://api.github.com/users/mwaskom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mwaskom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mwaskom/subscriptions",
      "organizations_url": "https://api.github.com/users/mwaskom/orgs",
      "repos_url": "https://api.github.com/users/mwaskom/repos",
      "events_url": "https://api.github.com/users/mwaskom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mwaskom/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-17T03:56:57Z",
    "updated_at": "2015-05-17T03:56:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I suppose another option would be to support an alternative API in Seaborn itself, e.g., sns.pipeable.violinplot. This seems nicer than the other explicit options we've seen. Again I'm still torn about whether or not pipe_arg is a good idea.\n\nThis would be reasonably easy to implement on my end, especially for the categorical plots, so that would be fine. Though, for the user, that approach probably ends up involving almost as much extra typing as just making an intermediate dataframe :)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102799350",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-102799350",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 102799350,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjc5OTM1MA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-17T12:38:48Z",
    "updated_at": "2015-05-17T12:38:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "So, attempting a summary.\n- People are +1 to the idea of a `.pipe` method in general (modulo details)\n- There's been no discussion of the name, which I take to mean `.pipe` is the correct name(?)\n- The contention is on how to pipe data to the correct position in `func`. Do we\n  - 1: Have users pass in a `lambda _: func(a, b, _)`\n  - 2: Include a special `_pipe_target` keyword in `.pipe` indicating where to go\n  - 3: Have library authors / users decorate their functions (and rewrite docs / examples).\n\n---\n\nFWIW, I'm coming around to 1 (maybe 2). Taking things slowly and seeing how the community responds could be good. The nice thing about 1 is it gives us the most flexibility in the future if we see something that needs to change, without breaking anyones code. With 2 and especially 3 we only get one shot.\n\nside note: I'm moving this week so I won't have much time for this other than today. I've written a section in the release notes and `basics.rst`. I plan to go through the rest of the docs today looking for places where `.pipe` would be appropriate (there may not be much / any). So I'll open up a PR this afternoon or if someone beats me to it I can do a PR against their branch for the docs.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102823592",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-102823592",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 102823592,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjgyMzU5Mg==",
    "user": {
      "login": "tacaswell",
      "id": 199813,
      "node_id": "MDQ6VXNlcjE5OTgxMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tacaswell",
      "html_url": "https://github.com/tacaswell",
      "followers_url": "https://api.github.com/users/tacaswell/followers",
      "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
      "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
      "organizations_url": "https://api.github.com/users/tacaswell/orgs",
      "repos_url": "https://api.github.com/users/tacaswell/repos",
      "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tacaswell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-17T17:10:26Z",
    "updated_at": "2015-05-17T17:10:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Another idea I have been noodling with but have not written out anywhere yet is for pandas to provide an 'unpack' decorator to throwing data at non-panadas aware code (note really silly name given because I don't want to think about a good name right now)\n\n``` python\n\ndef unpackify_decorator(func):\n    def wrapped(df, column_map, *args, **kwargs):\n        for k, v in column_map.items():\n            if k in kwargs:\n                raise ValueError()\n            kwargs[k] = df[v].values\n        return func(*args, **kwargs)\n    return wrapped\n```\n\nor something similar so the usage with pipe would look like\n\n``` python\nawarified = unpackify_decorator(ax.scatter)\ndf.pipe(awarififed, {'x': 'age', 'y': 'total_commit', 'c': 'number_of_projects', 's': 'net_LoC'}, cmap='gray')\n```\n\nHaving written this out it might also make sense to have this logic be part of the `pipe` method.\n\n``` python\ndef pipe(self, func, _pipe_target=None, *args, **kwargs):\n    if is_string(_pipe_target):\n        kwargs[_pipe_target] = self\n        return func(*args, **kwargs)\n    elif is_dict(_pipe_target):\n        for k, v in _pipe_target.items():\n           if k in kwargs:\n                raise ValueError()\n            kwargs[k] = self[v].values\n        return func(*args, **kwargs)\n    elif is_tuple(_pipe_target):\n        args = tuple(self[k] for k in _pipe_target) + args\n        return func(*args, **kwargs)\n    else:\n        return func(self, *args, **kwargs)\n```\n\nso the uasge would look like\n\n``` python\ndf.pipe(ax.scatter, {'x': 'age', 'y': 'total_commit', 'c': 'net_LoC', 's': 'number_of_projects'}, cmap='gray')\n```\n\nor\n\n``` python\ndf.pipe(ax.scatter, ('age', 'total_commit', 'net_LoC', 'number_of_projects'), cmap='gray')\n```\n\nIt is a bit verbose (but I picked a complicated example mapping 4 columns and used really descriptive column names), but it I think captures all of the simple cases for functions.  If you want to mix the order of user supplied args and data extracted from `df` you still have to write a `lambda`, but doing that in a general way would be ugly to write and very difficult to use.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102828478",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-102828478",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 102828478,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjgyODQ3OA==",
    "user": {
      "login": "tacaswell",
      "id": 199813,
      "node_id": "MDQ6VXNlcjE5OTgxMw==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tacaswell",
      "html_url": "https://github.com/tacaswell",
      "followers_url": "https://api.github.com/users/tacaswell/followers",
      "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
      "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
      "organizations_url": "https://api.github.com/users/tacaswell/orgs",
      "repos_url": "https://api.github.com/users/tacaswell/repos",
      "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tacaswell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-17T17:59:23Z",
    "updated_at": "2015-05-17T17:59:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "And thinking about this a bit more, having `pipe` as a stand-alone top-level function `broadcast_labeled_data(dict_like, function,  _target, *args, **kwargs)` is probably a useful thing to have and I want to have a version of that available in mpl.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102833543",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-102833543",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 102833543,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjgzMzU0Mw==",
    "user": {
      "login": "njsmith",
      "id": 609896,
      "node_id": "MDQ6VXNlcjYwOTg5Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/njsmith",
      "html_url": "https://github.com/njsmith",
      "followers_url": "https://api.github.com/users/njsmith/followers",
      "following_url": "https://api.github.com/users/njsmith/following{/other_user}",
      "gists_url": "https://api.github.com/users/njsmith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/njsmith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/njsmith/subscriptions",
      "organizations_url": "https://api.github.com/users/njsmith/orgs",
      "repos_url": "https://api.github.com/users/njsmith/repos",
      "events_url": "https://api.github.com/users/njsmith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/njsmith/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-17T18:33:07Z",
    "updated_at": "2015-05-17T18:33:07Z",
    "author_association": "NONE",
    "body": "I think I agree with @TomAugspurger's [suggestion](https://github.com/pydata/pandas/issues/10129#issuecomment-102799350) to avoid defining a protocol for now, but I just want to suggest that if we do define a protocol, then instead of looking for a magic `pipe_arg` attribute it would be more elegant to look for a `pipe_fn(pipe_arg, *args, **kwargs)` method that can then whatever we want. It's strictly more flexible and seems more in keeping with other protocols in python.\n\nI'd also like to strongly suggest that someone try and get other Python communities that use method chaning involved in the discussion (e.g. SQLAlchemy?), by contacting them directly and/or by posting to python-ideas, b/c more eyes and broader buy-in can only help make de facto standards better.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/102870043",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10129#issuecomment-102870043",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10129",
    "id": 102870043,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjg3MDA0Mw==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-17T23:26:22Z",
    "updated_at": "2015-05-17T23:26:22Z",
    "author_association": "MEMBER",
    "body": "@njsmith Indeed, those are both great ideas. So the protocol version looks like:\n\n``` python\ndef pipe(self, func, *args, **kwargs):\n    pipe_func = getattr(func, '__pipe_func__', func)\n    return pipe_func(self, *args, **kwargs)\n```\n\nThis nicely opens the door to handling complex use cases like those @tacaswell suggests without putting that complexity in the `pipe` method itself.\n\nLet's update the first post in this thread (@TomAugspurger is it OK if I do that?); then I'll post to [r/Python](http://www.reddit.com/r/python) and potentially Python ideas.\n"
  }
]
