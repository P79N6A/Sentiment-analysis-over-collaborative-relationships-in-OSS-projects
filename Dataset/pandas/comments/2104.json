[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/9677245",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2104#issuecomment-9677245",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2104",
    "id": 9677245,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2NzcyNDU=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-22T19:32:17Z",
    "updated_at": "2012-10-22T19:32:17Z",
    "author_association": "MEMBER",
    "body": "I haven't looked carefully yet, but it looks like this is decoding _all_ strings (e.g. those contained in a Series or DataFrame index) to Unicode? The cost of this in Python 2.x would be pretty extraordinary if so. Have to look some more when I have some more time.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/9677790",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2104#issuecomment-9677790",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2104",
    "id": 9677790,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2Nzc3OTA=",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-22T19:48:02Z",
    "updated_at": "2012-10-22T19:48:02Z",
    "author_association": "NONE",
    "body": "yes, this one is a lot more aggresive then the previous two. perhaps too much.\ncould be just as an option disabled by default.\n\nDoesn't python3 have to do just as much decoding upfront? (Although without traversal)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/9682228",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2104#issuecomment-9682228",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2104",
    "id": 9682228,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2ODIyMjg=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-22T21:52:00Z",
    "updated_at": "2012-10-22T21:52:00Z",
    "author_association": "MEMBER",
    "body": "Probably, but most people running pandas in production where performance (and memory use) matters are on 2.x. Foisting unicode on them seems like probably an undue burden. Making it globally configurable may not be a bad idea though. I would need to do some testing to see, anyway\n\nI'll have to think about what to do in the c-parser branch, because Python3 and unicode handling there is a bit of an unknown. I think the fast-parser is going to have to be bytes-only for a while until a mysterious superhero wants to do a lot of C hacking with unicode. The performance parsing bytes is going to be the maximum, and that represents the majority of real-world use cases. Perhaps only parsing unicode via the pure-Python interface for now makes sense\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/9690759",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2104#issuecomment-9690759",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2104",
    "id": 9690759,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2OTA3NTk=",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-23T05:06:47Z",
    "updated_at": "2012-10-23T05:07:16Z",
    "author_association": "NONE",
    "body": "Fair enough.\n\nI use pandas with modest datasets where unicode is a problem and perf.\nis not.  So having such an option would be a win.\n\nIMO, for pandas to be \"Unicode-safe\" something like this is needed.\nThe responsebility for being consistent can be put on the user (want unicode? \npass in unicode) or enforced by  something like this. But the code should stop \ntrying to support mixing unicode with encoded byte-strings. \n\nThe code actually does more work then strictly needed, because \nit tries to preserve pure ascii as bytes. I have to think more if that's a good\nor bad idea.\n\nIf #2097 or something to that end is merged, I'll make sure everything can be turned\non/off by the user. and the default can be chosen after doing some benchmarks\n(but it looks like off is the way to go).\n\nLet me know what changes you think are needed.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/9691692",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2104#issuecomment-9691692",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2104",
    "id": 9691692,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk2OTE2OTI=",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-23T06:15:37Z",
    "updated_at": "2012-10-23T06:15:37Z",
    "author_association": "NONE",
    "body": "Regarding `c-parser`, is it bytes-only or ascii-only? I'm assuming you're still calling \ninto the python constructors to actually build the pandas objects, so if the parser can handle utf-8\nbytes, It may actually not be a challange to wrap (again - aside from performance).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/9712891",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2104#issuecomment-9712891",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2104",
    "id": 9712891,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3MTI4OTE=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-23T18:38:19Z",
    "updated_at": "2012-10-23T18:38:19Z",
    "author_association": "MEMBER",
    "body": "The tokenizer is written assuming you are receiving chunks of data as `char*`. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/9728096",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2104#issuecomment-9728096",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2104",
    "id": 9728096,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3MjgwOTY=",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-24T05:10:47Z",
    "updated_at": "2012-10-24T05:10:47Z",
    "author_association": "NONE",
    "body": "@wesm, I  think this might be easier then you think.  The way you've built this is very flexible.\n\n`parser.pyx` accepts file-like objects. `codecs` can provide online decoding-encoding from\nthe source encoding into utf-8 for consumption by c-parser (and pandas already does this\nin some places).\n\nutf-8 leaves ascii (specifically digits and punctuation) untouched, so the inferencers\nare unaffected, and utf-8 strings are passed through just like ascii strings.\nat that point, the decode framework from this PR would process the data \nwhen you call in to DataFrame or what have you and make whatever is needed into unicode. \nhey presto.\n\nI did a quick test with the unicode_series.csv file from pandas/tests/data\n(which uses _latin-1_ encoding) , and got utf-8 data back like a champ. I think this\nis pretty much working out of the box right now.\n\nhere's the snippet for testing:\n\n``` python\nfrom pandas._parser import TextReader\nimport codecs\nf=open(\"pandas/tests/data/unicode_series.csv\",\"rb\")\nf2=codecs.EncodedFile(f,\"utf-8\",\"latin-1\") # read in latin-1, convert to utf-8\nr=TextReader(f2)\nres=r.read()\ns= res[1][-3].decode('utf-8')\nprint s\ntype(s) == unicode\n```\n\nGoing even further: If I understand the code correctly, the fallback inferencer in `parser.pyx`\n`_string_box_factorize` is responsible for boxing strings into python objects. It's easy enough\nat that point to decode things from utf-8 byte strings into unicode objects, so that there is\nno need for the clumsy (but general) approach used by this PR, with traversal over the entire \ndata structure, checking types and looking for strings to decode. most fields are usually numbers \nanyway, so this is very inefficient. I think doing that would actually keep the massive speedup \nof the new code AND have `unicode()` representations internally.\n\nIf that's true, then the performace issues of incorporating this PR as on by default fall away,\nbecause large datasets, where performance really matters, will practically always be read \nfrom files, and if that is kept fast, everything else can afford to do things less optimally.\n\nAll very encouraging I think.\n\nAs a sidenote- I noticed that parser.c has convert_infer, does not seem to be  used anywhere \n(commented it out and everything works, grep showed no usage), and It looks like that's the \nonly path to using  `_inference_order` and the c-native inferencers. looks like all the inferencing \nis actually done by the cython in parser.pyx. please correct me if I'm wrong.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/9728170",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2104#issuecomment-9728170",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2104",
    "id": 9728170,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3MjgxNzA=",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-24T05:16:29Z",
    "updated_at": "2012-10-24T05:16:29Z",
    "author_association": "NONE",
    "body": "And you get to unify all the csv readers into one. bonus.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/9743808",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2104#issuecomment-9743808",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2104",
    "id": 9743808,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3NDM4MDg=",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-24T15:29:36Z",
    "updated_at": "2012-10-24T15:29:36Z",
    "author_association": "NONE",
    "body": "I ran some benchmarks against the datasets from the blog: `zeros.csv` and `matrix.csv`.\nIt looks like the brute-force approach here gives roughly a 10x performance hit. no good.\n\nstill need to check if converting  `_string_box_factorize` to emit unicode yields \nsomething more reasonable.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/9833152",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2104#issuecomment-9833152",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2104",
    "id": 9833152,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk4MzMxNTI=",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-27T06:38:19Z",
    "updated_at": "2012-10-29T08:42:00Z",
    "author_association": "NONE",
    "body": "FIlling in the **Memory use** aspect of the issue:\n\nIn py2.x , 3.1/3.2 python might use ucs-2 or ucs-4 ([check](http://stackoverflow.com/questions/1446347/how-to-find-out-if-python-is-compiled-with-ucs-2-or-ucs-4) with\nsys.maxunicode), and so use up either 2x or 4x the memory,\nrespectively, over pure ascii or a legacy codepage that use one byte\nper character.  (on my debian system, the default python uses ucs-4).\n\nOn 3.3 which implemented [pep-393](http://www.python.org/dev/peps/pep-0393/) the in-memory representation is\nadaptive in order to save memory, and will use one byte per character\nfor ascii, and 2 bytes for most other codepoints you would care about\n(those in the BMP).\n\n[pep-393](http://www.python.org/dev/peps/pep-0393/) suggests that, like py3.3, py2.7 (earlier?) uses just 1\nbyte per character to represent ascii strings, though the [docs](http://docs.python.org/howto/unicode.html) do not\nmention this. \n\n**update**: This is not the case, ascii stored as unicodein 2.7 suffers from the same bloat, It's just\nthat on 2.7 you have the option of using str() rather the unicode, an option removed by the 3.x branch, \n3.3 does however provide the goods described in 393 and is much more efficient.\n\nIf you are using utf-8 to store your non-ascii data and keeping it\nmemory as an encoded byte string, the equivalent unicode\nrepresentation would most likely use either the same amount of memory (\npython with ucs-2) or 2x the memory (ucs-4), since utf-8 itself uses 2 bytes \nfor most non-ascii characters.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/9835414",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2104#issuecomment-9835414",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2104",
    "id": 9835414,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk4MzU0MTQ=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-27T13:28:02Z",
    "updated_at": "2012-10-27T13:28:02Z",
    "author_association": "MEMBER",
    "body": "I don't think making everything unicode by default is going to work because of the memory usage (and resulting performance, in some places) issue. The question is how to indicate to the parser that it _should_ decode utf-8 (or whichever encoding) to unicode in the string boxing function. I'm planning a better strategy for handling strings in pandas in general, so what's \"under the hood\" may change at some point in the future\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/9844510",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2104#issuecomment-9844510",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2104",
    "id": 9844510,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk4NDQ1MTA=",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-28T10:42:42Z",
    "updated_at": "2012-10-29T08:43:08Z",
    "author_association": "NONE",
    "body": "I was surprised by how performant #2130 actually is, and I don't see the case for memory \nbeing a problem in RL, as long as it's true that ascii stored as unicode objects has no significant\noverhead ( **update**: which turns out not to be true, so...). Having said that, I'd be perfectly happy with opt-in unicode, \nas long as it's easy to switch on and that the rest of pandas then behaves as expected.\n\nNow that c-parser has raised the bar, unicode users would be truely penalized without something \nlike #2130 being available for use.\n\nI'm curious to see the next step as far as string handling is concerned, I'll leave unicode alone till\nthen. This PR was an interesting experiment but, Ultimately, just too hideous to really merge. oh well.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/9875713",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2104#issuecomment-9875713",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2104",
    "id": 9875713,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk4NzU3MTM=",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-29T16:44:21Z",
    "updated_at": "2012-10-29T16:44:21Z",
    "author_association": "NONE",
    "body": "@wesm,  61f3405  for your cherry-picking consideration.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/9959659",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2104#issuecomment-9959659",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2104",
    "id": 9959659,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk5NTk2NTk=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-10-31T19:57:25Z",
    "updated_at": "2012-10-31T19:57:25Z",
    "author_association": "MEMBER",
    "body": "@y-p goign to cherry pick that one. I worked on the c-parser branch a bunch today and yesterday. Works on Python 3 and has an encoding option (so that all strings will be decoded to unicode). Unicode input (e.g. in a StringIO) will get encoded to UTF-8 when passed to the parser; I guess this could be configured\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10016869",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2104#issuecomment-10016869",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2104",
    "id": 10016869,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDE2ODY5",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-02T14:56:21Z",
    "updated_at": "2012-11-02T14:56:21Z",
    "author_association": "MEMBER",
    "body": "I have to undo 61f3405 immediately. All the sudden `Index.__getattribute__` is dogging the performance of tons of things:\n\n```\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.081    0.081   25.520   25.520 <string>:1(<module>)\n        1    0.369    0.369   25.404   25.404 groupby.py:242(apply)\n        1    0.369    0.369   25.035   25.035 groupby.py:418(_python_apply_general)\n        1    0.000    0.000    9.713    9.713 groupby.py:1671(_wrap_applied_output)\n        1    0.001    0.001    9.713    9.713 groupby.py:445(_concat_objects)\n        1    0.000    0.000    9.693    9.693 merge.py:828(concat)\n    48001    0.095    0.000    9.402    0.000 groupby.py:531(get_iterator)\n    48000    0.468    0.000    8.944    0.000 frame.py:2584(take)\n        1    0.014    0.014    6.346    6.346 merge.py:950(get_result)\n        1    0.135    0.135    6.321    6.321 merge.py:976(_get_concatenated_data)\n    96002    0.398    0.000    5.587    0.000 frame.py:331(__init__)\n        5    0.489    0.098    5.585    1.117 merge.py:1052(_concat_single_item)\n    48000    0.121    0.000    5.134    0.000 <string>:1(<lambda>)\n    48000    0.675    0.000    5.013    0.000 frame.py:3660(shift)\n3120099/1776071    2.901    0.000    4.978    0.000 index.py:308(__getattribute__)\n   240000    0.245    0.000    4.158    0.000 internals.py:826(get)\n        1    0.055    0.055    3.347    3.347 merge.py:888(__init__)\n    96002    0.301    0.000    3.200    0.000 internals.py:484(__init__)\n    48000    0.272    0.000    3.131    0.000 frame.py:477(_init_ndarray)\n        1    0.000    0.000    2.929    2.929 merge.py:1093(_get_new_axes)\n        1    0.029    0.029    2.883    2.883 merge.py:1129(_get_concat`\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10017686",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2104#issuecomment-10017686",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2104",
    "id": 10017686,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDE3Njg2",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-02T15:21:23Z",
    "updated_at": "2012-11-02T15:21:23Z",
    "author_association": "NONE",
    "body": "I suppose that outweighs the \"correctness\" win. too bad.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/10018739",
    "html_url": "https://github.com/pandas-dev/pandas/pull/2104#issuecomment-10018739",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2104",
    "id": 10018739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDE4NzM5",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-11-02T15:49:36Z",
    "updated_at": "2012-11-02T15:49:36Z",
    "author_association": "MEMBER",
    "body": "The Index object needs some work; I will definitely keep this in mind\n"
  }
]
