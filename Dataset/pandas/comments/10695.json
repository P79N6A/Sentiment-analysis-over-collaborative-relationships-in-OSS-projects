[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/125925503",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-125925503",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 125925503,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTkyNTUwMw==",
    "user": {
      "login": "sinhrks",
      "id": 1696302,
      "node_id": "MDQ6VXNlcjE2OTYzMDI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1696302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sinhrks",
      "html_url": "https://github.com/sinhrks",
      "followers_url": "https://api.github.com/users/sinhrks/followers",
      "following_url": "https://api.github.com/users/sinhrks/following{/other_user}",
      "gists_url": "https://api.github.com/users/sinhrks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sinhrks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sinhrks/subscriptions",
      "organizations_url": "https://api.github.com/users/sinhrks/orgs",
      "repos_url": "https://api.github.com/users/sinhrks/repos",
      "events_url": "https://api.github.com/users/sinhrks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sinhrks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-29T11:35:27Z",
    "updated_at": "2015-07-29T11:35:27Z",
    "author_association": "MEMBER",
    "body": "Thanks for the report. Can you attach the script which include the sample data preparation?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/125926162",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-125926162",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 125926162,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTkyNjE2Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-29T11:38:15Z",
    "updated_at": "2015-07-29T11:39:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "this is discussed tagentially in #10549 \n\nthis is the discussion is `.loc` like `.reindex` Or not. Or somewhere in between (where we are now). If you have a single element at least that matches you get like a `.reindex`; if you have NO elements matching you get a `KeyError`.\n\nSome want to always make it a key error if not ALL elements match. This I think is too restrictive and makes bugs very hard to find.\n\nThe other way is also a problem as if you have no matches it would silenty skip a fairly common error condition IMHO.\n\nNote that you are discussing `.ix`, but it is very unlikely we will change this behavior AT ALL. If anything gets changed it would be `.loc` which is much more strict and deterministic w/o respect to the type of the index data (IOW, `.ix` has lots and lots of edge cases)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/125933423",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-125933423",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 125933423,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTkzMzQyMw==",
    "user": {
      "login": "filmackay",
      "id": 1817552,
      "node_id": "MDQ6VXNlcjE4MTc1NTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1817552?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/filmackay",
      "html_url": "https://github.com/filmackay",
      "followers_url": "https://api.github.com/users/filmackay/followers",
      "following_url": "https://api.github.com/users/filmackay/following{/other_user}",
      "gists_url": "https://api.github.com/users/filmackay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/filmackay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/filmackay/subscriptions",
      "organizations_url": "https://api.github.com/users/filmackay/orgs",
      "repos_url": "https://api.github.com/users/filmackay/repos",
      "events_url": "https://api.github.com/users/filmackay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/filmackay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-29T12:14:38Z",
    "updated_at": "2015-07-29T12:22:07Z",
    "author_association": "NONE",
    "body": "@sinhrks: yes of course (apologies), how about this:\n\n```\n>>> df = pd.DataFrame(np.random.randint(10,size=(8,8)),index=pd.MultiIndex.from_product([['bar', 'baz', 'foo', 'qux'], ['one', 'two']],names=['first','second']))\n>>> df \n              0  1  2  3  4  5  6  7\nfirst second                        \nbar   one     0  5  5  5  6  2  6  8\n      two     2  6  9  0  3  6  7  9\nbaz   one     9  0  9  9  2  5  7  4\n      two     4  8  1  2  9  2  8  1\nfoo   one     2  7  3  6  5  5  5  2\n      two     3  4  6  2  7  7  1  2\nqux   one     0  8  5  9  5  5  7  3\n      two     7  4  0  7  3  6  8  6\n\n# works great:\n>>> df.loc[['bar']]\n              0  1  2  3  4  5  6  7\nfirst second\nbar   one     9  4  6  0  9  2  0  6\n      two     0  2  0  4  2  6  5  4\n\n# not so much:\n>>> df.loc[['ba']]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/Users/fil/anaconda/lib/python3.4/site-packages/pandas/core/indexing.py\", line 1189, in __getitem__\n    return self._getitem_axis(key, axis=0)\n  File \"/Users/fil/anaconda/lib/python3.4/site-packages/pandas/core/indexing.py\", line 1323, in _getitem_axis\n    return self._getitem_iterable(key, axis=axis)\n  File \"/Users/fil/anaconda/lib/python3.4/site-packages/pandas/core/indexing.py\", line 972, in _getitem_iterable\n    raise KeyError(\"cannot index a multi-index axis with these keys\")\nKeyError: 'cannot index a multi-index axis with these keys'\n\n# my workaround: (but this is not \"type safe\")\n>>> df.loc[df.reset_index()['first'].isin(['ba']).values]\nEmpty DataFrame\nColumns: [0, 1, 2, 3, 4, 5, 6, 7]\nIndex: []\n\n# still works for valid values:\n>>> df.loc[df.reset_index()['first'].isin(['bar']).values]\n              0  1  2  3  4  5  6  7\nfirst second\nbar   one     9  4  6  0  9  2  0  6\n      two     0  2  0  4  2  6  5  4\n```\n\n@jreback : apologies I should have used `.loc`. Should I treat `.ix` as deprecated, and avoid use?\n\nI guess we could have three different indexers, depending on how you want missing values to be handled (`.xx_union[['bar','ba']]` / `.xx_intersect[['bar', 'ba']` / `.reindex(['bar', 'ba')`, or a parameter that specifies how to handle it (eg. `.xx(missing='error/intersect/union')[['bar', 'ba']]`).\n\nPerhaps `.reindex` could accept an error/intersect/union? Aren't `.reindex` and `.loc` fundamentally the same thing, or am I missing a key distinction? One distinction would be that `.loc` accepts boolean series: but instead the indexing values case.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/125935228",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-125935228",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 125935228,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTkzNTIyOA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-29T12:25:07Z",
    "updated_at": "2015-07-29T12:25:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "@filmackay adding ANOTHER indexer is a non-starter, too complicated already.\n\nhowever, adding a `missing='error'|'intersect'|'union'` to `.loc/.ix/.reindex` (in the function call) might be worthwhile\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/125935342",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-125935342",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 125935342,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTkzNTM0Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-29T12:25:52Z",
    "updated_at": "2015-07-29T12:25:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "`.ix` is not deprecated as it has a small set of cases where its useful, but for ore consistent behavior (in the presence of integer indexes), `.loc` is recommended\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/125936130",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-125936130",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 125936130,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNTkzNjEzMA==",
    "user": {
      "login": "filmackay",
      "id": 1817552,
      "node_id": "MDQ6VXNlcjE4MTc1NTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1817552?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/filmackay",
      "html_url": "https://github.com/filmackay",
      "followers_url": "https://api.github.com/users/filmackay/followers",
      "following_url": "https://api.github.com/users/filmackay/following{/other_user}",
      "gists_url": "https://api.github.com/users/filmackay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/filmackay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/filmackay/subscriptions",
      "organizations_url": "https://api.github.com/users/filmackay/orgs",
      "repos_url": "https://api.github.com/users/filmackay/repos",
      "events_url": "https://api.github.com/users/filmackay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/filmackay/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-29T12:30:46Z",
    "updated_at": "2015-07-29T12:30:46Z",
    "author_association": "NONE",
    "body": "Is it crazy to think that `.loc`, `.ix` and `.reindex` could be merged into a single indexer? Is it legacy difficult, or do you think it's fundamentally flawed to try to encompass all use cases?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/126510333",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-126510333",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 126510333,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNjUxMDMzMw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-30T22:33:51Z",
    "updated_at": "2015-07-30T22:33:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "`.ix` needs to stay like it is as there are a few edge cases which `.loc` won't ever support\ne.g. simultaneous indexing by location is one dim AND by position in another\n`df.ix[[1,3,5],[['A','B']]` where the index is say an object dtype. (otherwise you could use in this example `df.loc[[df.index[[1,3,5]],[['A','B']]`)\n\n`.reindex` and `.loc` are pretty equivalent. The discussion is basically to go back to where they are different, e.g.`.reindex` will give you all values that you asked for (but `NaN` them if they don't exist), and then `.loc` can raise `KeyError`). BUT the issue is that setting is different than getting.\n\nE.g. since you cannot use `.reindex` on the LHS of an expression, e.g. `df.reindex(...) = ...` is a python error, then doing:\n\n`df.loc[....] = ....` is the only method. So therefor you don't want to have a situation where you can get something in a different way then you can set something. So imagine you are setting an index value that doesn't exist, you simply set it, done (this is enlargement), but now should you raise when you get something non-existant? So these are tied.\n\nCurrently I think we are in a consistent state that is predictbile. `.reindex` is the same as `.loc`, and getting and setting are mirror images. Downside is that its very tricky for `.loc` to figure out when to raise (currently only when NOTHING matches).\n\nSo a proposal to add a `errors='strict|missing'` might make sense.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/152660866",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-152660866",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 152660866,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MjY2MDg2Ng==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-30T22:01:53Z",
    "updated_at": "2015-10-30T22:01:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have a similar issue with respect to the `.xs` method. I have a DataFrame `df1` indexed with 3 levels (A,B,C), and a column 'flow' and another DataFrame `df2` that is indexed by 2 levels (A,B) and a column 'balance'.  Note that there are values (a,b) in `df2` that are not present in `df1`. For each pair (a,b) in `df2`, I want to create a new column in `df2` with the values that correspond to `df1.xs[(a,b)].flow.sum() + df2.loc[(a,b)].balance` .  If (a,b) is not in `df1`, I want the sum to be zero, but you still get the balance value. Right now  `df1.xs[(a,b)].sum()` gives a key error, so I end up with some funky code to test if (a,b) is in `df1` when computing the sums.  If `.xs` would just return an empty DataFrame if (a,b) was not there, I'd have very clean code.\n\nI can create a new issue for this.  I can also provide an example.  Let me know if I need to do either.\n\nI would support an idea where adding `errors='strict|missing'` to `.xs` would solve the problem.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/166728176",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-166728176",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 166728176,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NjcyODE3Ng==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-22T20:59:21Z",
    "updated_at": "2015-12-22T20:59:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have an example that illustrates what I'd like to do, and a proposal.  Here's the example:\n\n``` python\ncitypairs = [('Miami', 'Boston'), ('Miami','New York'), ('New York', 'San Francisco'), \n             ('Boston', 'New York'), ('Boston', 'San Francisco')]\nindex = pd.MultiIndex.from_tuples(citypairs, names=['origin','dest'])\ns = pd.Series([i*10+10 for i in range(5)], index=index)\n# Compute all of the cities that appear as an origin or a destination\ncities = set(p[0] for p in citypairs).union(set(p[1] for p in citypairs))\nosums = { c : s.loc[c,:].sum() for c in cities}\ndsums = { c : s.loc[:,c].sum() for c in cities}\n```\n\nThe idea in this example is that I have data from a data source that has pairs of cities, and need to compute sums of the series for each city that appears by origin and by destination.  In the above code, the computation of `osums` fails with a `KeyError` (due to the empty slice for `'San Francisco'`) and the computation of `dsums` fails with an `IndexingError` (due to the empty slice for `'Miami'`). \nMy proposal is as follows.  Introduce a new indexer called `.sloc` (slicing loc) that has the **same exact behavior** as `.loc`, except that if an error occurs, an empty `Series`, `DataFrame`, or `Panel` is returned (dependent on what was being sliced). It is documented this way, with the warning that the user has to recognize that this could cause errors to get missed. Caveat Emptor\n@jreback I know you said above that you didn't want to introduce a new indexer, but this solution seems rather clean, and I'd be willing to try to implement it as it would really help my applications.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/166729292",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-166729292",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 166729292,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NjcyOTI5Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-22T21:05:31Z",
    "updated_at": "2015-12-22T21:05:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "this adds unneeded complexity\nthis is exactly what Categoricals get you \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/166754014",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-166754014",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 166754014,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2Njc1NDAxNA==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-22T22:43:24Z",
    "updated_at": "2015-12-22T22:43:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback  I tried with categoricals in a MultiIndex and still get an indexing problem if something is missing. It's because the categories aren't pushed down to the MultiIndex.  Here's the example.  Am I doing something wrong? \n\n``` python\ncitypairs = [('Miami', 'Boston'), ('Miami','New York'), ('New York', 'San Francisco'), \n             ('Boston', 'New York'), ('Boston', 'San Francisco')]\nvals = [i*10+10 for i in range(5)]\ndf = pd.DataFrame({ 'orig' : [p[0] for p in citypairs],\n                    'dest' : [p[1] for p in citypairs],\n                    'vals' : vals})\ndf['orig'] = df['orig'].astype(\"category\")\ndf['dest'] = df['dest'].astype(\"category\")\ncities = set(p[0] for p in citypairs).union(set(p[1] for p in citypairs))\ndf['orig'].cat.set_categories(cities)\ndf['dest'].cat.set_categories(cities)\ndf.set_index(['orig','dest'],inplace=True)\nosums = { c : df.loc[c,:].sum() for c in cities}\ndsums = { c : df.loc[:,c].sum() for c in cities}\n```\n\nNow the error is `KeyError: 'the label [San Francisco] is not in the [index]'`. \n\nI don't see how adding the extra `.sloc` adds complexity since it will work just like `.loc` but not fail. It makes codes like the one I initially wrote above quite clean.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/166874005",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-166874005",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 166874005,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2Njg3NDAwNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-23T11:57:35Z",
    "updated_at": "2015-12-23T11:57:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "this is what .reindex does\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/166901286",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-166901286",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 166901286,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NjkwMTI4Ng==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-23T13:59:42Z",
    "updated_at": "2015-12-23T13:59:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback I apologize for not understanding you, and it's likely I'm missing something, but I can't see how to make `.reindex` work and have \"clean\" code.  In my original example, I used a `MultiIndex`consisting of two columns that were strings. You suggested to use `Categoricals`.  I tried that, and I can't get that to work either. \n\nMy proposal for a `.sloc` would be implemented by subclassing the current `_LocationIndexer` and just catching the exception when `__getitem__` is called to return an empty object. So I don't see the complexity you refer to.  In my original example, if `.sloc` were implemented, then just using `.sloc` rather than `.loc` would produce nice looking code.\n\nIncidentally, here is what I want to do using dicts but not pandas, but the solution doesn't scale well when the index has lots of elements in the tuples.  The `if` tests are not nice looking.\n\n``` python\ncitypairs = [('Miami', 'Boston'), ('Miami','New York'), ('New York', 'San Francisco'), \n             ('Boston', 'New York'), ('Boston', 'San Francisco')]\nvals = [i*10+10 for i in range(5)]\nadict = { z[0] : z[1] for z in zip(citypairs, vals)}\ndictosums = { c : sum(adict[(c2,i)] for (c2,i) in adict.keys() if c==c2) for c in cities}\ndictdsums = { c : sum(adict[(i,c2)] for (i,c2) in adict.keys() if c==c2) for c in cities}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/166902553",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-166902553",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 166902553,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NjkwMjU1Mw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-23T14:07:19Z",
    "updated_at": "2015-12-23T14:07:19Z",
    "author_association": "MEMBER",
    "body": "@Dr-Irv Maybe not fully related to this discussion, but the summing for each of the levels that you are trying to do can also be achieved using `sum` and specifying the `level` to sum over:\n\n```\nIn [21]: df\nOut[21]:\n                        vals\norig     dest\nMiami    Boston           10\n         New York         20\nNew York San Francisco    30\nBoston   New York         40\n         San Francisco    50\n\nIn [26]: df.sum(level=0)\nOut[26]:\n          vals\norig\nBoston      90\nMiami       30\nNew York    30\n\nIn [27]: df.sum(level=1)\nOut[27]:\n               vals\ndest\nBoston           10\nNew York         60\nSan Francisco    80\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/166921431",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-166921431",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 166921431,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NjkyMTQzMQ==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-23T15:13:58Z",
    "updated_at": "2015-12-23T15:13:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche Thanks, but the issue is that the result of that sum does not include the zero values for the missing cities.  In the code that I wrote above using dictionaries, the results are:\n\n``` python\n{'Boston': 90, 'New York': 30, 'San Francisco': 0, 'Miami': 30}\n{'Boston': 10, 'New York': 60, 'San Francisco': 80, 'Miami': 0}\n```\n\nNote the zero values for `San Francisco` and `Miami` in the two respective sums.\n\nThe reason the zero values are needed is because there is other code that needs the sums for all cities.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/166950154",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-166950154",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 166950154,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2Njk1MDE1NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-23T17:28:06Z",
    "updated_at": "2015-12-23T17:28:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Dr-Irv you can simply fully expand the index levels via `.reindex` if you want. you must specify the full scheme, as this is not automatic and not obvious how  you want to do this.\n\nThen you can do whatever you want, including using `.fillna(0)` if you want to preserve values.\n\n```\nIn [61]: df.reindex(index=pd.MultiIndex.from_product([list(cities),list(cities)]))\nOut[61]: \n                             vals\nNew York      New York        NaN\n              San Francisco    30\n              Miami           NaN\n              Boston          NaN\nSan Francisco New York        NaN\n              San Francisco   NaN\n              Miami           NaN\n              Boston          NaN\nMiami         New York         20\n              San Francisco   NaN\n              Miami           NaN\n              Boston           10\nBoston        New York         40\n              San Francisco    50\n              Miami           NaN\n              Boston          NaN\n```\n\ncreating another indexer is a complete non-starter as it would make indexing even MORE confusing (we already have `[]`,`.ix`,`.iloc`,`.loc`,`.at`,`.iat`. This is WAY more than enough.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/166953312",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-166953312",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 166953312,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2Njk1MzMxMg==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-23T17:40:26Z",
    "updated_at": "2015-12-23T17:40:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback The problem with your solution is when there are 1000 different cities, but the original data has 10,000 city pairs. (The example data comes from the representation of a graph).  Your solution above creates a `DataFrame` with 1,000,000 entries, most of which are unnecessary. \n\nI understand the potential confusion of adding another indexer, but that then brings us back to the possibility of adding the `errors=strict|missing` optional argument to `.loc`. Or, how about doing this via a pandas option that determines the behavior of `.loc` in terms of whether it does the things the current way (reporting `KeyError`) or just returns empty objects when the key is missing.  Having an option might be more elegant, otherwise, you end up with `errors=missing` code in lots of places. I'd be willing to give this a try in terms of implementing it.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/166953676",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-166953676",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 166953676,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2Njk1MzY3Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-23T17:42:15Z",
    "updated_at": "2015-12-23T17:43:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Dr-Irv you can't have it both ways, either you have a sparse repr which is what a `MultiIndex` is, or you don't. Try to solve your problem with existing machinery, rather than resorting to looping and creating new APIs.\n\nTo be honest pandas is not very good at representing graphs. Trying to shove things in like this are non-starters.\n\nNot to mention your code above in non-performant.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/166960317",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-166960317",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 166960317,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2Njk2MDMxNw==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-23T18:05:49Z",
    "updated_at": "2015-12-23T18:05:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback But this brings us back to the original problem (which started the discussion above by @filmackay), which is that I have a sparse representation using `MultiIndex`, but if I slice with a key that is not there, I get an error, as opposed to an empty `DataFrame` (which I can then apply `.sum` to). \n\nI think this might be related to the discussion in #4036, as I have use cases where there is a `MultiIndex` with lots of levels, where I need to do sums for different combinations of the keys (i.e., fixing the keys for some levels, and summing across another level), and there may be combinations that don't exist, so if the `.sum` over the slice would return 0, the code would be easy to understand and explain. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/166988451",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-166988451",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 166988451,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2Njk4ODQ1MQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-23T20:55:11Z",
    "updated_at": "2015-12-23T20:55:11Z",
    "author_association": "MEMBER",
    "body": "@Dr-Irv again specific for your problem: you can also do the reindex _after_ the summing for each level:\n\n```\nIn [54]: df.sum(level=0).reindex(list(cities))\nOut[54]:\n               vals\norig\nNew York         30\nSan Francisco   NaN\nMiami            30\nBoston           90\n```\n\nI think in this specific case, you will find a better and more performant solution as iterating through the dataframe. But nonetheless, the original question in this issue can still be relevant of course.\n\n@jreback I agree that adding yet another indexer is not the best way forward, but I was wondering if there would be room for a method (so not an indexer, and so only usable for getting values and not setting) to do this? Some kind of general 'getitem' method, and as this is a method it would be easier to add keyword arguments to eg specify what should happen if the label is not found. \nActually there is a `DataFrame.get`, but this is restricted to the info axis.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/166999136",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-166999136",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 166999136,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2Njk5OTEzNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-23T22:01:50Z",
    "updated_at": "2015-12-23T22:01:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "building on @jorisvandenbossche soln, I think this is what you want.\n\n```\nIn [4]: df.sum(level=0).reindex(index=list(cities)).fillna(0)\nOut[4]: \n               vals\norig               \nNew York         30\nSan Francisco     0\nMiami            30\nBoston           90\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/167005771",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-167005771",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 167005771,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NzAwNTc3MQ==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-23T23:01:08Z",
    "updated_at": "2015-12-23T23:01:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback @jorisvandenbossche Thank you very much for your response. While I appreciate your solution, it isn't as elegant as the one I propose. I'm trying to create something for teaching purposes that looks easy.  \n\nRegarding the comment about `DataFrame.get`, what would really be nice is to have something like that, but for the main (`axis=0`) axis, with all the same slicing that exists for `.loc`.  In other words, I'd like to be able to do something like `NDFrame.rows[a,b,:,d,e]` that would return just the rows corresponding to that slice. This would work the same way for `Series`, `DataFrame` and `Panel`.  It slices along the first dimension, where you're likely to have a `MultiIndex`. If it did that, and returned empty objects when the slices were empty, then I get back to clean code for my examples, and I think we address the main point of this issue that was originally raised.  Put another way, we create a method that is a shorthand for `.loc(axis=0)` and document that if a key is specified and is missing, then an empty object is returned.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/167006399",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-167006399",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 167006399,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NzAwNjM5OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-23T23:08:11Z",
    "updated_at": "2015-12-23T23:08:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Dr-Irv you iterating over values is not idiomatic at all\nand completely non performant\n\nyou have a very nice soln above - this is a very pandonic soln\nand esp if you are teaching this is the only way to go\n\nindividually indexing is NOT a soln\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/175910207",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-175910207",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 175910207,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NTkxMDIwNw==",
    "user": {
      "login": "pjcpjc",
      "id": 5625059,
      "node_id": "MDQ6VXNlcjU2MjUwNTk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5625059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pjcpjc",
      "html_url": "https://github.com/pjcpjc",
      "followers_url": "https://api.github.com/users/pjcpjc/followers",
      "following_url": "https://api.github.com/users/pjcpjc/following{/other_user}",
      "gists_url": "https://api.github.com/users/pjcpjc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pjcpjc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pjcpjc/subscriptions",
      "organizations_url": "https://api.github.com/users/pjcpjc/orgs",
      "repos_url": "https://api.github.com/users/pjcpjc/repos",
      "events_url": "https://api.github.com/users/pjcpjc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pjcpjc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-27T23:31:15Z",
    "updated_at": "2016-01-27T23:36:53Z",
    "author_association": "NONE",
    "body": "Respectfully, can I chime in and agree with Dr Irv?\n\nHis `.sloc` suggestion seems  reasonable.\n\n> The other way is also a problem as if you have no matches it would silenty skip a fairly common error condition IMHO.\n\nThe accuracy of this assumption depends on context. It seems reasonable that there are some programming contexts where returning the empty frame is the expected behavior. (For example, if the result is married with an aggregator like `sum`, which is the specific need here).\n\ndicts have both `get` and `[]` for that reason. When I see one, I know a missing entry is not an error, and when I see the other, I know it is. I'm not sure why this issue is different.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/175913705",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-175913705",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 175913705,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NTkxMzcwNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-27T23:46:08Z",
    "updated_at": "2016-01-27T23:46:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "@pjcpjc you can certainly comment!\n\nWe cannot extend this already way way too complicated API any more\n\nwe have: `[]`, `.ix`, `.iloc`, `.loc`, `.iat`, `at`.\n\nso you want another one? \n\nas I said above, a keyword argument would possibly be ok, but certainly not another indexer.\n\nWe have to have a default. This certainly may not work for everyone (and that is why we have\noptions).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/175915874",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-175915874",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 175915874,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NTkxNTg3NA==",
    "user": {
      "login": "pjcpjc",
      "id": 5625059,
      "node_id": "MDQ6VXNlcjU2MjUwNTk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5625059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pjcpjc",
      "html_url": "https://github.com/pjcpjc",
      "followers_url": "https://api.github.com/users/pjcpjc/followers",
      "following_url": "https://api.github.com/users/pjcpjc/following{/other_user}",
      "gists_url": "https://api.github.com/users/pjcpjc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pjcpjc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pjcpjc/subscriptions",
      "organizations_url": "https://api.github.com/users/pjcpjc/orgs",
      "repos_url": "https://api.github.com/users/pjcpjc/repos",
      "events_url": "https://api.github.com/users/pjcpjc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pjcpjc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-27T23:54:31Z",
    "updated_at": "2016-01-27T23:58:17Z",
    "author_association": "NONE",
    "body": "Or a keyword argument to `.loc` that does what Dr. Irvs `.sloc` does... with the default value for the keyword being consistent with the current behavior. \n\nWhatever you prefer.\n\n> We cannot extend this already way way too complicated API any more\n\nI think the spelling in this case is MOAR!! ;)\n\nBut seriously, I am familiar with the domain here (agruably I am an expert and Dr Irv is a guru) and he is right on the money in terms of identifying a context in which the natural result is an empty frame and not an error.  \n\nI don't think he is being non-performant. He can get what he wants (I think) with a helper function, but that will look awkward when trying to convince other people to jump over from their current legacy language.\n\nWe're not trying to make trouble - we're trying to bring optimization programming into the 21st century and use Python + pandas. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/358621040",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-358621040",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 358621040,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODYyMTA0MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-18T11:35:49Z",
    "updated_at": "2018-01-18T11:35:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "this closed by #15747. ``.loc`` and ``.reindex`` are distinct and have separate purposes."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/358740467",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10695#issuecomment-358740467",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10695",
    "id": 358740467,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODc0MDQ2Nw==",
    "user": {
      "login": "pjcpjc",
      "id": 5625059,
      "node_id": "MDQ6VXNlcjU2MjUwNTk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5625059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pjcpjc",
      "html_url": "https://github.com/pjcpjc",
      "followers_url": "https://api.github.com/users/pjcpjc/followers",
      "following_url": "https://api.github.com/users/pjcpjc/following{/other_user}",
      "gists_url": "https://api.github.com/users/pjcpjc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pjcpjc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pjcpjc/subscriptions",
      "organizations_url": "https://api.github.com/users/pjcpjc/orgs",
      "repos_url": "https://api.github.com/users/pjcpjc/repos",
      "events_url": "https://api.github.com/users/pjcpjc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pjcpjc/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-18T18:36:59Z",
    "updated_at": "2018-01-18T18:36:59Z",
    "author_association": "NONE",
    "body": "If anyone cares, I now regret some of the strong language I used above. I think pandas, while awesome, isn't the right vehicle for the sort of idioms that optimization people are accustomed to. Optimization people should either write pandas code pandonically or use different data structures. There are a small mountain of examples over at https://github.com/opalytics/opalytics-ticdat/tree/master/examples if anyone is interested, to include a pandonic example."
  }
]
