[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/418442652",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22591#issuecomment-418442652",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22591",
    "id": 418442652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODQ0MjY1Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-04T16:58:52Z",
    "updated_at": "2018-09-04T16:58:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "This is in https://github.com/pandas-dev/pandas/blob/3285bdc8e6e1b05d84b6cebea66fdd80fbb84400/pandas/_libs/tslibs/timestamps.pyx#L60 if you want to take a look.  There's a comment indicating that float precision has been a problem in the past."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/418521925",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22591#issuecomment-418521925",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22591",
    "id": 418521925,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODUyMTkyNQ==",
    "user": {
      "login": "miccoli",
      "id": 6403904,
      "node_id": "MDQ6VXNlcjY0MDM5MDQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6403904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/miccoli",
      "html_url": "https://github.com/miccoli",
      "followers_url": "https://api.github.com/users/miccoli/followers",
      "following_url": "https://api.github.com/users/miccoli/following{/other_user}",
      "gists_url": "https://api.github.com/users/miccoli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/miccoli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/miccoli/subscriptions",
      "organizations_url": "https://api.github.com/users/miccoli/orgs",
      "repos_url": "https://api.github.com/users/miccoli/repos",
      "events_url": "https://api.github.com/users/miccoli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/miccoli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-04T21:20:29Z",
    "updated_at": "2018-09-05T07:11:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "By inspecting the code I see further problems...\r\nE.g. <https://github.com/pandas-dev/pandas/blob/3285bdc8e6e1b05d84b6cebea66fdd80fbb84400/pandas/_libs/tslibs/timestamps.pyx#L83-L86> assumes that `unit` is a divisor of `1_000_000`.\r\n\r\nTherefore\r\n```python\r\n>>> a.round('27ns')\r\nTimestamp('2000-01-01 00:00:00.124999351')\r\n```\r\nis wrong. In fact I would expect `a.round('27ns').value  % 27 == 0` and *not* \r\n`a.round('27ns').value % 1_000_000 % 27 == 0` as per the current implementation.\r\n\r\nOf course the semantics of  `a.round('27ns')` are questionable, but the current implementation appears at least arbitrary.\r\n\r\n~I don't know if floating point arithmetic is used because it is considered *faster* than integer arithmetic, but it seems quite complex to retain full precision in all possible edge cases.~\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/418625966",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22591#issuecomment-418625966",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22591",
    "id": 418625966,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODYyNTk2Ng==",
    "user": {
      "login": "miccoli",
      "id": 6403904,
      "node_id": "MDQ6VXNlcjY0MDM5MDQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6403904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/miccoli",
      "html_url": "https://github.com/miccoli",
      "followers_url": "https://api.github.com/users/miccoli/followers",
      "following_url": "https://api.github.com/users/miccoli/following{/other_user}",
      "gists_url": "https://api.github.com/users/miccoli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/miccoli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/miccoli/subscriptions",
      "organizations_url": "https://api.github.com/users/miccoli/orgs",
      "repos_url": "https://api.github.com/users/miccoli/repos",
      "events_url": "https://api.github.com/users/miccoli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/miccoli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-05T07:20:35Z",
    "updated_at": "2018-09-09T20:26:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've just noticed that one costly bit of integer arithmetic is already present:\r\n<https://github.com/pandas-dev/pandas/blob/3285bdc8e6e1b05d84b6cebea66fdd80fbb84400/pandas/_libs/tslibs/timestamps.pyx#L78>\r\nIn fact once you compute `values % unit` floor and ceil are trivial:\r\n```python\r\nfloor = lambda values, unit: values - ( values % unit)\r\nceil = lambda values, unit: values + (-values % unit)\r\n```\r\nplus some code for handling under/overflow.\r\n\r\nRounding is a little bit more complicated, mainly because we first need to exactly define rounding semantics. If the maintainers confirm the present behaviour as a bug, (and not a feature), I can submit a PR."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/418648668",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22591#issuecomment-418648668",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22591",
    "id": 418648668,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODY0ODY2OA==",
    "user": {
      "login": "miccoli",
      "id": 6403904,
      "node_id": "MDQ6VXNlcjY0MDM5MDQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6403904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/miccoli",
      "html_url": "https://github.com/miccoli",
      "followers_url": "https://api.github.com/users/miccoli/followers",
      "following_url": "https://api.github.com/users/miccoli/following{/other_user}",
      "gists_url": "https://api.github.com/users/miccoli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/miccoli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/miccoli/subscriptions",
      "organizations_url": "https://api.github.com/users/miccoli/orgs",
      "repos_url": "https://api.github.com/users/miccoli/repos",
      "events_url": "https://api.github.com/users/miccoli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/miccoli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-05T08:40:45Z",
    "updated_at": "2018-09-05T08:40:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "same problem for `Timedelta`:\r\n<https://github.com/pandas-dev/pandas/blob/3285bdc8e6e1b05d84b6cebea66fdd80fbb84400/pandas/_libs/tslibs/timedeltas.pyx#L1161-L1167>\r\nbut of course precision loss is very unlikely in real world applications."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/418651171",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22591#issuecomment-418651171",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22591",
    "id": 418651171,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODY1MTE3MQ==",
    "user": {
      "login": "miccoli",
      "id": 6403904,
      "node_id": "MDQ6VXNlcjY0MDM5MDQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6403904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/miccoli",
      "html_url": "https://github.com/miccoli",
      "followers_url": "https://api.github.com/users/miccoli/followers",
      "following_url": "https://api.github.com/users/miccoli/following{/other_user}",
      "gists_url": "https://api.github.com/users/miccoli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/miccoli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/miccoli/subscriptions",
      "organizations_url": "https://api.github.com/users/miccoli/orgs",
      "repos_url": "https://api.github.com/users/miccoli/repos",
      "events_url": "https://api.github.com/users/miccoli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/miccoli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-05T08:49:15Z",
    "updated_at": "2018-09-09T20:14:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "This issue is exactly the same as #19206, only showing up on different edge case. Taking into account that the current code also patches #21262, I would suggest a entirely new implementation based on `int64` and to entirely drop floating point.\r\n\r\nA similar rounding bug due to floating point arithmetic is numpy/numpy#11881"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/419741026",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22591#issuecomment-419741026",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22591",
    "id": 419741026,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTc0MTAyNg==",
    "user": {
      "login": "miccoli",
      "id": 6403904,
      "node_id": "MDQ6VXNlcjY0MDM5MDQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6403904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/miccoli",
      "html_url": "https://github.com/miccoli",
      "followers_url": "https://api.github.com/users/miccoli/followers",
      "following_url": "https://api.github.com/users/miccoli/following{/other_user}",
      "gists_url": "https://api.github.com/users/miccoli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/miccoli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/miccoli/subscriptions",
      "organizations_url": "https://api.github.com/users/miccoli/orgs",
      "repos_url": "https://api.github.com/users/miccoli/repos",
      "events_url": "https://api.github.com/users/miccoli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/miccoli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-09T20:01:20Z",
    "updated_at": "2018-09-09T20:01:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have a proof of concept implementation in  miccoli/pandas@1adfd41 \r\n\r\nBefore issuing a PR I would like to receive some comments on following aspects:\r\n\r\n- [ ] pure `int64` implementation (drops floating point and recourse to `np.round`, `np.floor`, `np.ceil`\r\n- [ ] tie breaking rule for halfway numbers\r\n   - I propose to break compatibility with the current floating point base rule, round to even, and opt in favour of a round towards -∞\r\n- [ ] should also time deltas use the same `int64` implementation?\r\n- [ ] general comments on the coding style.\r\n\r\nCurrent code seems to me badly broken, but things concerning rounding are really complex, therefore a review of the proposed new semantics is necessary."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/419743338",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22591#issuecomment-419743338",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22591",
    "id": 419743338,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTc0MzMzOA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-09T20:38:08Z",
    "updated_at": "2018-09-09T20:38:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "so does your soln break any tests?\r\n\r\nseems a lot simpler though pls don’t change actual rounding semantics\r\nfollow numpy exactly\r\n\r\nwhether using numpy functions or not doesn’t matter\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/419749070",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22591#issuecomment-419749070",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22591",
    "id": 419749070,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTc0OTA3MA==",
    "user": {
      "login": "miccoli",
      "id": 6403904,
      "node_id": "MDQ6VXNlcjY0MDM5MDQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6403904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/miccoli",
      "html_url": "https://github.com/miccoli",
      "followers_url": "https://api.github.com/users/miccoli/followers",
      "following_url": "https://api.github.com/users/miccoli/following{/other_user}",
      "gists_url": "https://api.github.com/users/miccoli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/miccoli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/miccoli/subscriptions",
      "organizations_url": "https://api.github.com/users/miccoli/orgs",
      "repos_url": "https://api.github.com/users/miccoli/repos",
      "events_url": "https://api.github.com/users/miccoli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/miccoli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-09T22:17:40Z",
    "updated_at": "2018-09-09T22:19:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, a few tests are broken, e.g.\r\n<pre>\r\n_____________ TestTimestampUnaryOps.test_round_frequencies[20130104 12:00:00-D-20130105] _____________\r\n\r\nself = <pandas.tests.scalar.timestamp.test_unary_ops.TestTimestampUnaryOps object at 0x133f9fd30>\r\ntimestamp = '20130104 12:00:00', freq = 'D', expected = Timestamp('2013-01-05 00:00:00')\r\n\r\n    @pytest.mark.parametrize('timestamp, freq, expected', [\r\n        ('20130101 09:10:11', 'D', '20130101'),\r\n        ('20130101 19:10:11', 'D', '20130102'),\r\n        ('20130201 12:00:00', 'D', '20130202'),\r\n        ('20130104 12:00:00', 'D', '20130105'),\r\n        ('2000-01-05 05:09:15.13', 'D', '2000-01-05 00:00:00'),\r\n        ('2000-01-05 05:09:15.13', 'H', '2000-01-05 05:00:00'),\r\n        ('2000-01-05 05:09:15.13', 'S', '2000-01-05 05:09:15')\r\n    ])\r\n    def test_round_frequencies(self, timestamp, freq, expected):\r\n        dt = Timestamp(timestamp)\r\n        result = dt.round(freq)\r\n        expected = Timestamp(expected)\r\n>       assert result == expected\r\nE       AssertionError: assert Timestamp('2013-01-04 00:00:00') == Timestamp('2013-01-05 00:00:00')\r\n\r\npandas/tests/scalar/timestamp/test_unary_ops.py:35: AssertionError\r\n</pre>\r\n\r\nThe reason for dropping default `numpy` rounding mode (which follows IEEE754) is that IMHO \"round to even\" does not makes much sense in the `Timestamp` context.\r\n- Current implementation:\r\n```python\r\n>>> pd.__version__\r\n'0.23.4'\r\n>>> pd.to_datetime('2018-01-01 12:00:00').round('1d')\r\nTimestamp('2018-01-01 00:00:00')\r\n>>> pd.to_datetime('2018-01-02 12:00:00').round('1d')\r\nTimestamp('2018-01-03 00:00:00')\r\n>>> pd.to_datetime('2018-01-03 12:00:00').round('1d')\r\nTimestamp('2018-01-03 00:00:00')\r\n>>> pd.to_datetime('2019-01-01 12:00:00').round('1d')\r\nTimestamp('2019-01-02 00:00:00')\r\n>>> pd.to_datetime('2019-01-02 12:00:00').round('1d')\r\nTimestamp('2019-01-02 00:00:00')\r\n>>> pd.to_datetime('2019-01-03 12:00:00').round('1d')\r\nTimestamp('2019-01-04 00:00:00')\r\n>>> d = pd.DatetimeIndex(start='2018-01-01 00:00:00', end='2018-12-31 23:59:59.999999999', freq='1h')\r\n>>> (d.round('1d') - d).values.sum() / np.timedelta64(1, 'D')\r\n-0.5\r\n```\r\n- Proposed implementation:\r\n```python\r\n>>> pd.__version__\r\n'0.24.0.dev0+564.g1adfd4155'\r\n>>> pd.to_datetime('2018-01-01 12:00:00').round('1d')\r\nTimestamp('2018-01-01 00:00:00')\r\n>>> pd.to_datetime('2018-01-02 12:00:00').round('1d')\r\nTimestamp('2018-01-02 00:00:00')\r\n>>> pd.to_datetime('2018-01-03 12:00:00').round('1d')\r\nTimestamp('2018-01-03 00:00:00')\r\n>>> pd.to_datetime('2019-01-01 12:00:00').round('1d')\r\nTimestamp('2019-01-01 00:00:00')\r\n>>> pd.to_datetime('2019-01-02 12:00:00').round('1d')\r\nTimestamp('2019-01-02 00:00:00')\r\n>>> pd.to_datetime('2019-01-03 12:00:00').round('1d')\r\nTimestamp('2019-01-03 00:00:00')\r\n>>> d = pd.DatetimeIndex(start='2018-01-01 00:00:00', end='2018-12-31 23:59:59.999999999', freq='1h')\r\n>>> (d.round('1d') - d).values.sum() / np.timedelta64(1, 'D')\r\n-182.5\r\n```\r\n\r\nHere you see that noon is rounded up or down to the midnight of the same or the following day depending on whether the day number (counted starting from the unix epoch '1970-01-01') is odd or even. On the contrary with my proposed implementation noon is always rounded down to midnight of the same day, which is more intuitive.\r\n\r\nOf course a rigorous assessment of merits or demerits of both rounding modes requires an analysis of all the possible settings in which `Datetime.round` will be used. I would tend to favour an intuitive and predictable result over the reduction of the bias toward -∞. It is also debatable if in this context bias towards even is preferable with respect to bias toward -∞, but frankly I do not have an answer here, it is (for now) just a matter of taste.\r\n\r\nI understand the need for not breaking compatibility with previous behaviour, so I will implement also the `RoundTo.NEAREST_HALF_EVEN` mode, to make a more informed decision possible."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/423453540",
    "html_url": "https://github.com/pandas-dev/pandas/issues/22591#issuecomment-423453540",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/22591",
    "id": 423453540,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzQ1MzU0MA==",
    "user": {
      "login": "miccoli",
      "id": 6403904,
      "node_id": "MDQ6VXNlcjY0MDM5MDQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6403904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/miccoli",
      "html_url": "https://github.com/miccoli",
      "followers_url": "https://api.github.com/users/miccoli/followers",
      "following_url": "https://api.github.com/users/miccoli/following{/other_user}",
      "gists_url": "https://api.github.com/users/miccoli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/miccoli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/miccoli/subscriptions",
      "organizations_url": "https://api.github.com/users/miccoli/orgs",
      "repos_url": "https://api.github.com/users/miccoli/repos",
      "events_url": "https://api.github.com/users/miccoli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/miccoli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-21T08:18:27Z",
    "updated_at": "2018-09-21T08:18:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have miccoli/pandas@0416b0675d65d75fd8894c42bc58c08f7385d3ac almost ready for PR, implementing a rounding mode compatible with the current flawed implementation which is based on floating point rounding semantics and [`numpy.around`](https://docs.scipy.org/doc/numpy/reference/generated/numpy.around.html).\r\n\r\nI have just a point I'm unable to resolve: I'm using [`numpy.divmod`](https://docs.scipy.org/doc/numpy/reference/generated/numpy.divmod.html#numpy-divmod) which was introduced in numpy version 1.13.0, while the current pandas requirement is \r\n<https://github.com/pandas-dev/pandas/blob/4612a828244725dab1ff928b71cf92d04b40cd04/setup.py#L27>\r\n\r\nCan I leave the faster `numpy.divmod` or should I stick to the 1.9.0 version?"
  }
]
