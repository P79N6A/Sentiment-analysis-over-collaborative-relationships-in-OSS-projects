[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/74077425",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9472#issuecomment-74077425",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9472",
    "id": 74077425,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MDc3NDI1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-12T14:18:55Z",
    "updated_at": "2015-02-12T14:18:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "You are proposing a function to do this\n\n```\nIn [1]: dat = pd.Series(index=list(\"abcde\"), data=[0, 1, 2, \"3\", False])\n\nIn [2]: dat\nOut[2]: \na        0\nb        1\nc        2\nd        3\ne    False\ndtype: object\n\nIn [6]: dat.index[dat.values.nonzero()[0]]\nOut[6]: Index([u'b', u'c', u'd'], dtype='object')\n```\n\nWhy wouldn't a user simply do this?\n\n```\nIn [7]: dat[dat!=0]\nOut[7]: \nb    1\nc    2\nd    3\ndtype: object\n\nIn [8]: dat[dat!=0].index\nOut[8]: Index([u'b', u'c', u'd'], dtype='object')\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/74181746",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9472#issuecomment-74181746",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9472",
    "id": 74181746,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MTgxNzQ2",
    "user": {
      "login": "bthyreau",
      "id": 590921,
      "node_id": "MDQ6VXNlcjU5MDkyMQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/590921?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bthyreau",
      "html_url": "https://github.com/bthyreau",
      "followers_url": "https://api.github.com/users/bthyreau/followers",
      "following_url": "https://api.github.com/users/bthyreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/bthyreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bthyreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bthyreau/subscriptions",
      "organizations_url": "https://api.github.com/users/bthyreau/orgs",
      "repos_url": "https://api.github.com/users/bthyreau/repos",
      "events_url": "https://api.github.com/users/bthyreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bthyreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-13T00:17:13Z",
    "updated_at": "2015-02-13T00:17:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "For the same reason that nonzero is used in the first place, even though boolean masking works well: different usage pattern.\n\nOn non-trivial filters (e.g. `dfB.loc[dfA.groupby([\"some\", \"criterions\"]).count().idxnonzero()]` ), using the bracket masking syntax requires to define a new temporary variable [or worse, define a whole new function when affectation is forbidden (think list comprehension, groupby...)] with no real semantic value. In some cases, those temporaries variables reduce the code readability.\nAnd on interactive ipython sessions, where a lot of trial and error occurs when forging/analysing frames, it was more comfortable after i added this idxnonzero() shortcut.\n\nThe current pandas nonzero matches the raw numpy version for compatibility purpose, so i think altering it would be difficult and not necessary better. Thus the new suggested function, which is really a small one-liner with a quite-explicit name, therefore no risk of cluttering pandas api IMHO.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/74184519",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9472#issuecomment-74184519",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9472",
    "id": 74184519,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MTg0NTE5",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-13T00:41:03Z",
    "updated_at": "2015-02-13T00:41:03Z",
    "author_association": "MEMBER",
    "body": "I'm not _strongly_ opposed to adding this method, but it's not something that I've missed. I think @jreback's alternative is pretty nice.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/74192105",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9472#issuecomment-74192105",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9472",
    "id": 74192105,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MTkyMTA1",
    "user": {
      "login": "bthyreau",
      "id": 590921,
      "node_id": "MDQ6VXNlcjU5MDkyMQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/590921?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bthyreau",
      "html_url": "https://github.com/bthyreau",
      "followers_url": "https://api.github.com/users/bthyreau/followers",
      "following_url": "https://api.github.com/users/bthyreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/bthyreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bthyreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bthyreau/subscriptions",
      "organizations_url": "https://api.github.com/users/bthyreau/orgs",
      "repos_url": "https://api.github.com/users/bthyreau/repos",
      "events_url": "https://api.github.com/users/bthyreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bthyreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-13T01:58:22Z",
    "updated_at": "2015-02-13T01:58:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "Well, for the trivial case above, obviously `dat[dat != 0]` is the most natural syntax. But on cases where \"dat\" doesn't exist as such (e.g. is the result of a call), it requires to affect it to a new temporary variable, with all the drawback stated above.\n\nI propose this PR because i saw the benefit often on my work pattern. I'm not proposing that idxnonzero should be used instead of masking, more i'm proposing to improve pandas.nonzero() for those case where it fits.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/74259717",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9472#issuecomment-74259717",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9472",
    "id": 74259717,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MjU5NzE3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-13T14:18:57Z",
    "updated_at": "2015-02-13T14:20:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "@bthyreau you have a nice idea but I think more general soln might be to do this. It is slightly more verbose, but more general.\n\nwe add a new method `.select_data()` and just deprecate `.select()` for now (and really change it in the next version - this would be a hard break).\n\n`.select()`, this is just a wrapper around `.reindex()` and `.filter()` is currently a good way to do everything it does (`.filter()` technically uses `.select()` but this is easily fixed)\nRight now there are 2 + ways to limit columns/items (`.filter/.select/reindex/.loc`) which is way too many.\n\n```\ndef select_data(self, f, axis=0)\n\"\"\" select the data according to the provided criteria, return the new data \"\"\"\n```\n\nand usage (in this case)\n\n`.select_data(lambda x: x[x!=0].index)`\n\nso you can generically do chained selection (this is analagous to the new metthod `.assign()` in #9239), or using your example:\n`dfB.loc[dfA.groupby([\"some\", \"criterions\"]).count().select_data(lambda x: x[x!=0].index)]`\n\n@shoyer \n@jorisvandenbossche \n\nnote: we could technically just do this with `.loc()`, not sure if that is too magical!\n`dfB.loc[dfA.groupby([\"some\", \"criterions\"]).count().loc(lambda x: x[x!=0].index)]`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/74262186",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9472#issuecomment-74262186",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9472",
    "id": 74262186,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MjYyMTg2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-13T14:35:57Z",
    "updated_at": "2015-02-13T14:36:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "see also #8717 \n\nwe could call this `.having(...)` which is a nice clean name for this \n\nwhich could work for both groupby and series/frames\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/74262837",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9472#issuecomment-74262837",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9472",
    "id": 74262837,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0MjYyODM3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-13T14:40:04Z",
    "updated_at": "2015-02-13T14:40:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thinking again about this, we already have `.where()` (and the related discussion in #8717 was about extending groupby to have a `.where()` to do exactly this.....\n\nWe could extend `.where()` to accept a callable (making up the syntax below a bit)\n\n```\nIn [12]: (s<10).where(lambda x: x!=0).dropna().index\nOut[12]: Index([u'b', u'c', u'd'], dtype='object')\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/74822475",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9472#issuecomment-74822475",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9472",
    "id": 74822475,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc0ODIyNDc1",
    "user": {
      "login": "bthyreau",
      "id": 590921,
      "node_id": "MDQ6VXNlcjU5MDkyMQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/590921?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bthyreau",
      "html_url": "https://github.com/bthyreau",
      "followers_url": "https://api.github.com/users/bthyreau/followers",
      "following_url": "https://api.github.com/users/bthyreau/following{/other_user}",
      "gists_url": "https://api.github.com/users/bthyreau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bthyreau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bthyreau/subscriptions",
      "organizations_url": "https://api.github.com/users/bthyreau/orgs",
      "repos_url": "https://api.github.com/users/bthyreau/repos",
      "events_url": "https://api.github.com/users/bthyreau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bthyreau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-18T07:12:02Z",
    "updated_at": "2015-02-18T07:12:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "few more thought, after hiting that use case a few more times this morning.\n\nThe point of having `idxnonzero()` (or `idxtrue`) is to avoid the heavy generic machinery on the specific - but common - case of getting the index of TRUE entries from a Series. A functionally-equivalent alternative for me would be a `.dropfalse()`, (similar to `dropna()`), or `.dropvalue(condition)`, which would be a bit similar to the `where+dropna` suggestion above, but more practical. \n\nIt was surprised to read that it was not missed, but i noticed that i need that function mostly during IPython data exploration and analysis sessions, not when writting a full, final program/notebook (for eg. interactively working out a new filtering condition currently need to go through affect+mask+see at every change). \n\nThe proposal for a generic `select_data` could be convenient for some cases, yet i'm not sure yet what that would be adding to the existing pandas functions, such as boolean masking, df.query(), the dropna() trick, etc. They are already powerful, generic mechanism. From my POV of course.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/100509514",
    "html_url": "https://github.com/pandas-dev/pandas/pull/9472#issuecomment-100509514",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9472",
    "id": 100509514,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDUwOTUxNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-09T16:00:15Z",
    "updated_at": "2015-05-09T16:00:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "closing pls reopen if/when updated\n"
  }
]
