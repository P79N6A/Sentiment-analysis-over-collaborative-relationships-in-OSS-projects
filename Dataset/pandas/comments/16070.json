[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/295767406",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16070#issuecomment-295767406",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16070",
    "id": 295767406,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NTc2NzQwNg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-20T14:57:33Z",
    "updated_at": "2017-04-20T14:57:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "How would this work with multiple shared columns?, e.g.\r\n\r\n```python\r\nleft = pd.DataFrame({'key': list(\"abcd\"), 'value': [1, 2, 3, 4], 'value2': list('aaaa')})\r\nright = pd.DataFrame({'key': list(\"aceb\"), 'value': [5, 6, 7, 8], 'value2': list('aaaa')})\r\n ```\r\n\r\nI could see two options:\r\n\r\n1. The `x`, `y` passed are either 1-d arrays or Series (what's the index? `key`?), and `combine` can be a single function called on each pair, or a dictionary -> function API like `{'value': lambda x, y: x + y, 'value2': lambda x, y: ...}`\r\n2. The `x` and `y` passed is a DataFrame of all the cols from `left` and `right` that have overlap"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/295792745",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16070#issuecomment-295792745",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16070",
    "id": 295792745,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NTc5Mjc0NQ==",
    "user": {
      "login": "chrisaycock",
      "id": 453745,
      "node_id": "MDQ6VXNlcjQ1Mzc0NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/453745?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisaycock",
      "html_url": "https://github.com/chrisaycock",
      "followers_url": "https://api.github.com/users/chrisaycock/followers",
      "following_url": "https://api.github.com/users/chrisaycock/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisaycock/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisaycock/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisaycock/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisaycock/orgs",
      "repos_url": "https://api.github.com/users/chrisaycock/repos",
      "events_url": "https://api.github.com/users/chrisaycock/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisaycock/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-20T16:03:22Z",
    "updated_at": "2017-04-20T16:03:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger I like the first option. If the user just gives a single function, then that function is applied to all columns; a dict means applying the specified function to the given column."
  }
]
