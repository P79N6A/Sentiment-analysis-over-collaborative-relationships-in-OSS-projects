[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/54761558",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8208#issuecomment-54761558",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8208",
    "id": 54761558,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzYxNTU4",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-07T21:35:20Z",
    "updated_at": "2014-09-07T21:35:39Z",
    "author_association": "MEMBER",
    "body": "@jreback What are potential side-effects of doing such a `astype(object)`? \n\nEg I noticed that `datetime64` columns are converted to `datetime.datetime` (which I find a bit strange), and `timedelta64` columns to ints. \nIs there a rationale of what can be expected of `astype(object)`?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/54761867",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8208#issuecomment-54761867",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8208",
    "id": 54761867,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzYxODY3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-07T21:45:53Z",
    "updated_at": "2014-09-07T21:45:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "`astype(object)` if very specific. (in that the conversions are what you are seeing - not that `Timedelta` will coerce to `timedelta`, simlar to `Timestamp` -> `datetime`).\n\nI wrote in your other thread that you might simply want to create a direct ndarray of the column and then just process it how you need.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/54762198",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8208#issuecomment-54762198",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8208",
    "id": 54762198,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzYyMTk4",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-07T21:55:56Z",
    "updated_at": "2014-09-07T21:55:56Z",
    "author_association": "MEMBER",
    "body": "Yes, we now do `np.asscalar(i)` on every individual value when iterating over the dataframe to insert in the database (see https://github.com/pydata/pandas/blob/master/pandas/io/sql.py#L601 and https://github.com/pydata/pandas/blob/master/pandas/io/sql.py#L641). \nBut actually, just doing `astype(object)` (which already seems to convert it from numpy types to native python types) and then not anymore the `asscalar` checking, seems to be a lot faster (for a float column about 25% faster)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/54762439",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8208#issuecomment-54762439",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8208",
    "id": 54762439,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzYyNDM5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-07T22:05:05Z",
    "updated_at": "2014-09-07T22:05:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche yep, you might be better off inferring columns that are `object` to start (you know all other columns dtypes already, so you know what to do). Then treating those which are inferred in a weird way (e.g. `mixed` or something) specially (which normally you shouldn't have anyhow, and maybe you should just raise on weirdness like that anyhow).\n\nI know you guys did `itertuples` but that is by definition very slow.\n\nI would like to see you go block by block and create a numpy array (or even a list) of the values you are going to insert. Then you can chunk on that.\n\nSee here: https://github.com/pydata/pandas/blob/master/pandas/core/format.py#L1416\n\nThis is almost exactly what you need to do (except that `to_native_types` converts to a string, but similar idea). Then the writer takes the block order and writes it in the column order (its a simple transformation).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/54808795",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8208#issuecomment-54808795",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8208",
    "id": 54808795,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODA4Nzk1",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-08T12:10:40Z",
    "updated_at": "2014-09-08T12:10:40Z",
    "author_association": "MEMBER",
    "body": "@jreback Thanks for the pointers. It's actually the first time that I go a bit into the internals of pandas, so some questions:\n- Is `itertuples` that slow if you actually need tuples? (in fact: we need a dict, not a tuple)\n  \n  ```\n  data_list = []\n  for t in frame.iloc[start_i:end_i].itertuples():\n      data = dict((k, v) for k, v in zip(keys, t[1:]))\n      data_list.append(data)\n  ```\n  \n  vs\n  \n  ```\n  data_list = [dict((k, v) for k, v in zip(keys, row)) for row in frame.values[start_i:end_i]]\n  ```\n  \n  It is indeed a bit faster to directly iterate the array, but not that much.\n- What is the advantage of going block by block? (instead of just making the list of dicts directly from the `frame.values`? Speed? Or also something else? \n  Using a block by block approach to create the list of arrays and then list of dicts:\n  \n  ```\n  ncols = len(keys)\n  col_list = [None] * ncols\n  blocks = frame._data.blocks\n  \n  for i in range(len(blocks)):\n      b = blocks[i]\n      d = np.array(b.values, dtype=object)\n      mask = pd.isnull(d)\n      d[mask] = None\n  \n      for col_loc, col in zip(b.mgr_locs, d):\n          col_list[col_loc] = col\n  \n  data_list = [dict((k, v) for k, v in zip(keys, row)) for row in zip(*col_list)]\n  ```\n  \n  is indeed somewhat faster than \n  \n  ```\n  frame = frame.astype(object)\n  data_list = [dict((k, v) for k, v in zip(keys, row)) for row in frame.values]\n  ```\n  \n  or\n  \n  ```\n  frame = frame.astype(object)\n  \n  col_list = []\n  for col in frame:\n      col_list.append(frame[col].values)\n  \n  data_list = [dict((k, v) for k, v in zip(keys, row)) for row in zip(*col_list)]\n  ```\n- But the advantage of the two above approaches instead of going block by block, is that `frame.astype(object)` seems to do the thing I need (numpy numeric types to native types, datetime64 to datetime.datetime, ..), while `values.astype(object)` (witch in fact happens with the block approach, as it works there with numpy arrays) does not really do the same. \n  Example (assuming `df` a mixed dtype dataframe with a datetime64 column 'date'):\n  \n  ```\n  In [177]: df['date'].astype(object).values\n  Out[177]: \n  array([datetime.datetime(2012, 1, 1, 0, 0),\n       datetime.datetime(2012, 1, 2, 0, 0),\n       datetime.datetime(2012, 1, 3, 0, 0),\n       datetime.datetime(2012, 1, 4, 0, 0),\n       datetime.datetime(2012, 1, 5, 0, 0)], dtype=object)\n  \n  In [178]: df['date'].values.astype(object)\n  Out[178]: \n  array([1325376000000000000L, 1325462400000000000L, 1325548800000000000L,\n       1325635200000000000L, 1325721600000000000L], dtype=object)\n  ```\n  \n  So if I am going through the data block by block I will have to special case the handling of the data based on the dtype/blocktype.\n  \n  To make the complexity complete (for me at least), if you do `.values` on the whole dataframe, you even get a third result (no int or datetime.datetime, but Timestamps):\n  \n  ```\n  In [183]: df.values\n  Out[183]: \n  array([[0.0, Timestamp('2012-01-01 00:00:00')],\n       [5.2, Timestamp('2012-01-02 00:00:00')],\n       [63.2, Timestamp('2012-01-03 00:00:00')],\n       [25.0, Timestamp('2012-01-04 00:00:00')],\n       [12.2, Timestamp('2012-01-05 00:00:00')]], dtype=object)\n  ```\n\nThe main speed-up will be of not having to call the `maybe_asscalar` anymore on each individual value:\n\n```\ndef maybe_asscalar(self, i):\n    try:\n        return np.asscalar(i)\n    except AttributeError:\n        return i\n```\n\nAs this is not needed anymore if I cast to `object` somewhere as above (are there case where this will not be equivalent?).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/54811684",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8208#issuecomment-54811684",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8208",
    "id": 54811684,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODExNjg0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-08T12:42:32Z",
    "updated_at": "2014-09-08T12:42:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche so depends on what you need for different dtypes.\n\nIn pytables, the requirements were this:\n\nneed specific conversions for a particular dtype, but don't want/need to go thru `object` dtype and/or numpy does NOT do the righ thing. E.g. `datetime64[ns]` -> `int64` (maybe with some tz conversions and such). strings -> a fixed length numpy string dtype. So block-by-block makes sense. Of course I had to present this to `PyTables` as a rec-array so this makes it easy (no point in going to tuples / other python structures). \n\nin csv, was slightly different. Perf is really everything here. The actual conversions are not time consuming (e.g. replaceing NaT to 'NaT' and stringifying). The actual writing is the bottlneck, so that's in cython. Its indexing list-of-list with preallocation (so not constantly creating/destroying memory). \n\nSo nothing wrong with tuples/dicts. It that's what you need in the final format for passing to the driver then nothing you can do. That said it _may_ make sense to convert by dtype (block). You can do whatever you need at that point (e.g. using numpy directly or whatever). The only thing I would caution is this, using `df.values` essentially copies everything an coerces everything to `object`). Much better to do thsi block by block (and convert each dtype individually).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/54818127",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8208#issuecomment-54818127",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8208",
    "id": 54818127,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODE4MTI3",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-08T13:38:54Z",
    "updated_at": "2014-09-08T13:38:54Z",
    "author_association": "MEMBER",
    "body": "What I need in the end for the sql insert `execute`: a list of dicts (like records in `to_dict(outtype='records')`. So I need to do something like `[dict((k, v) for k, v in zip(keys, row)) for row in zip(*col_list)]` I think, the question is how to create the `col_list` or similar.  \nWhat conversions I need: all numpy dtypes should be converted to native python types (for this reason `np.asscalar` (`.item()`) was used). Am I correct to assume that `astype(object)` does the same on a numpy array? (I can't really find this somewhere in the docs, but the fact that `np.asscalar` is not vectorized is one of the bottlenecks, and `astype(object)` _seems_ to do the right thinkg but much faster)\n\nYou say \"The only thing I would caution is this, using `df.values` essentially copies everything and coerces everything to object). Much better to do this block by block (and convert each dtype individually).\". Is this different for `df.astype(object)` (it gives another result!) or for `block.values.astype(object)` or `np.array(block.values, dtype=object)` (what I do in the block by block version above)? \n\nActually, the reason that `df['date'].values.astype(object)` gave ints, is that this is an array with `datetime64[ns]` nanosecond resolution. If you first convert this to microseconds `[us]` then it gets coerced to `datetime.datetime` (datetime.datetime has no nanoseconds). But still, I find it a bit strange that `df.values` gives something else than `df.astype(object).values` (as you say that `df.values` coerces everything to object)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/54818563",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8208#issuecomment-54818563",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8208",
    "id": 54818563,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODE4NTYz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-08T13:42:26Z",
    "updated_at": "2014-09-08T13:42:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "`df.astype(object).values` and `df.values` are not necessary the same thing because the first goes thru the `asobject` mechanism (which coerces for example `Timestamp` -> `datetime`). While the second just takes the object (whatever it is and puts in in a numpy object array). So the `Timestamps` are not changed.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/54819771",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8208#issuecomment-54819771",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8208",
    "id": 54819771,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODE5Nzcx",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-08T13:50:37Z",
    "updated_at": "2014-09-08T13:50:42Z",
    "author_association": "MEMBER",
    "body": "OK, I get that. \nAnother question, assuming a DatetimeBlock `block`, to get an array of values to insert in sql, I can do `block.astype(object).values` (gives datetime.datetime) or `block.values.astype(object)` (gives ints, so have to do `astype('M8[us]').astype(object)` to get datetimes. Or something else?). Any difference between both?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/54820191",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8208#issuecomment-54820191",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8208",
    "id": 54820191,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0ODIwMTkx",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-08T13:53:36Z",
    "updated_at": "2014-09-08T13:53:36Z",
    "author_association": "MEMBER",
    "body": "In any case `b.values.astype('M8[us]').astype(object)` is a lot faster as `block.astype(object).values`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55381688",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8208#issuecomment-55381688",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8208",
    "id": 55381688,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1MzgxNjg4",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-12T09:45:13Z",
    "updated_at": "2014-09-12T09:45:13Z",
    "author_association": "MEMBER",
    "body": "@jreback can you have a look? I tried to get the data to insert in sql using blocks. I still have to run the vbenches, but normally it should be a good bit faster.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55397923",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8208#issuecomment-55397923",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8208",
    "id": 55397923,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1Mzk3OTIz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-12T12:51:05Z",
    "updated_at": "2014-09-12T12:51:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche minor comment, but looks good!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55506470",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8208#issuecomment-55506470",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8208",
    "id": 55506470,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTA2NDcw",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-13T20:55:18Z",
    "updated_at": "2014-09-13T20:55:18Z",
    "author_association": "MEMBER",
    "body": "I ran the vbenches:\n\n```\n-------------------------------------------------------------------------------\nTest name                                    | head[ms] | base[ms] |  ratio   |\n-------------------------------------------------------------------------------\nsql_write_fallback                           | 106.5431 | 258.0450 |   0.4129 |\nsql_string_write_fallback                    |  58.3140 | 121.6860 |   0.4792 |\npackers_write_sql                            | 2607.6457 | 5189.1503 |   0.5025 |\nsql_datetime_write_sqlalchemy                | 178.1230 | 328.7040 |   0.5419 |\nsql_string_write_sqlalchemy                  |  92.7503 | 162.8133 |   0.5697 |\nsql_float_write_fallback                     |  61.7257 | 104.0957 |   0.5930 |\nsql_write_sqlalchemy                         | 237.5257 | 392.7880 |   0.6047 |\nsql_float_write_sqlalchemy                   | 105.4697 | 139.4690 |   0.7562 |\nsql_float_read_query_sqlalchemy              |  13.4517 |  14.5890 |   0.9220 |\npackers_read_sql                             | 510.0226 | 545.4030 |   0.9351 |\nsql_read_table_sqlalchemy                    |  39.6350 |  41.5033 |   0.9550 |\nsql_read_query_fallback                      |  27.3767 |  28.3880 |   0.9644 |\nsql_read_query_sqlalchemy                    |  35.5783 |  36.1260 |   0.9848 |\nsql_datetime_read_as_native_sqlalchemy       |  27.8057 |  28.0294 |   0.9920 |\nsql_datetime_read_and_parse_sqlalchemy       |  23.1274 |  22.9696 |   1.0069 |\nsql_float_read_table_sqlalchemy              |  16.0140 |  15.1150 |   1.0595 |\nsql_float_read_query_fallback                |   7.5050 |   6.9203 |   1.0845 |\n```\n\nSo all 'write' vbenches are between 0.41 and 0.76. And the time for the general `packers_to_sql` has halved!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55506524",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8208#issuecomment-55506524",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8208",
    "id": 55506524,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTA2NTI0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-13T20:57:21Z",
    "updated_at": "2014-09-13T20:57:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche awesome!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55506666",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8208#issuecomment-55506666",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8208",
    "id": 55506666,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTA2NjY2",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-13T21:02:40Z",
    "updated_at": "2014-09-13T21:04:59Z",
    "author_association": "MEMBER",
    "body": "Still slower than the other packers, but at this moment, about 60% (sqlite3 fallback) to 75% (sqlalchemy engine) is spent by sqlite3/sqlalchmey execute itself, so something we can't speed up ourselves.\n"
  }
]
