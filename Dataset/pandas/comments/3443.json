[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16934234",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-16934234",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 16934234,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTM0MjM0",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-24T14:29:22Z",
    "updated_at": "2013-04-24T14:29:22Z",
    "author_association": "NONE",
    "body": "My suspicion is that you're going for more complex instead of simplifying.\nHowever, there is the NDpanel if you want it, and you _can_ do:\n\n```\nIn [26]: import pandas as pd\n    ...: f=lambda : np.random.random((3,3))\n    ...: s=pd.Series([f() for i in range(10)], dtype='O')\n\nIn [27]: s.iloc[0]\nOut[27]: \narray([[ 0.90986552,  0.30234529,  0.98927833],\n       [ 0.40467537,  0.17912555,  0.06101674],\n       [ 0.6623446 ,  0.69192764,  0.39398118]])\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16934447",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-16934447",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 16934447,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTM0NDQ3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-24T14:32:26Z",
    "updated_at": "2013-04-24T14:32:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "@alexbw but keep in mind, this is really not efficient (in numpy or pandas), as this is now an object array, which is not able to vectorize things. Your are much better off keeping your scalar data from your images. (I believe we went thru an exercise in saving these to/from HDF a while ago).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16935544",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-16935544",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 16935544,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTM1NTQ0",
    "user": {
      "login": "alexbw",
      "id": 161935,
      "node_id": "MDQ6VXNlcjE2MTkzNQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/161935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexbw",
      "html_url": "https://github.com/alexbw",
      "followers_url": "https://api.github.com/users/alexbw/followers",
      "following_url": "https://api.github.com/users/alexbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexbw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexbw/subscriptions",
      "organizations_url": "https://api.github.com/users/alexbw/orgs",
      "repos_url": "https://api.github.com/users/alexbw/repos",
      "events_url": "https://api.github.com/users/alexbw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexbw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-24T14:48:04Z",
    "updated_at": "2013-04-24T14:48:04Z",
    "author_association": "NONE",
    "body": "Yep, your suggestions are now in production here, and it's working fine\nkeeping scalars and higher-D arrays separate.\nJust checking in to see if any of the dtype improvements might make my\nuse-case a little more feasible. Doesn't seem so.\n\nOn Wed, Apr 24, 2013 at 10:32 AM, jreback notifications@github.com wrote:\n\n> @alexbw https://github.com/alexbw but keep in mind, this is really not\n> efficient (in numpy or pandas), as this is now an object array, which is\n> not able to vectorize things. Your are much better off keeping your scalar\n> data from your images. (I believe we went thru an exercise in saving these\n> to/from HDF a while ago).\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/pydata/pandas/issues/3443#issuecomment-16934447\n> .\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16935832",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-16935832",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 16935832,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTM1ODMy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-24T14:52:14Z",
    "updated_at": "2013-04-24T14:52:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't know if i pointed this out before, this _might_ work for you: http://pandas.pydata.org/pandas-docs/dev/dsintro.html#panel4d-experimental (again the data doesn't have to be homogenous in dtype, but homogeneous in shape, which may or may not help)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16936231",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-16936231",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 16936231,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTM2MjMx",
    "user": {
      "login": "alexbw",
      "id": 161935,
      "node_id": "MDQ6VXNlcjE2MTkzNQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/161935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexbw",
      "html_url": "https://github.com/alexbw",
      "followers_url": "https://api.github.com/users/alexbw/followers",
      "following_url": "https://api.github.com/users/alexbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexbw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexbw/subscriptions",
      "organizations_url": "https://api.github.com/users/alexbw/orgs",
      "repos_url": "https://api.github.com/users/alexbw/repos",
      "events_url": "https://api.github.com/users/alexbw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexbw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-24T14:58:26Z",
    "updated_at": "2013-04-24T14:58:26Z",
    "author_association": "NONE",
    "body": "Each data stream (image, velocity, temperature) is homogeneous _within\nitself_, but they're all different sizes. That's the clincher, and it seems\nlike it's not on the horizon to be supported here. Blaze seems to be going\nin this direction, supporting heterogeneous data shapes.\n\nOn Wed, Apr 24, 2013 at 10:52 AM, jreback notifications@github.com wrote:\n\n> I don't know if i pointed this out before, this _might_ work for you:\n> http://pandas.pydata.org/pandas-docs/dev/dsintro.html#panel4d-experimental(again the data doesn't have to be homogenous in dtype, but homogeneous in\n> shape, which may or may not help)\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/pydata/pandas/issues/3443#issuecomment-16935832\n> .\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16936562",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-16936562",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 16936562,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTM2NTYy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-24T15:03:29Z",
    "updated_at": "2013-04-24T15:03:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "heteregoenous data shapes are non-trivial. Blaze does seem headed in that direction, but not sure when will happen.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16936845",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-16936845",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 16936845,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTM2ODQ1",
    "user": {
      "login": "alexbw",
      "id": 161935,
      "node_id": "MDQ6VXNlcjE2MTkzNQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/161935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexbw",
      "html_url": "https://github.com/alexbw",
      "followers_url": "https://api.github.com/users/alexbw/followers",
      "following_url": "https://api.github.com/users/alexbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexbw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexbw/subscriptions",
      "organizations_url": "https://api.github.com/users/alexbw/orgs",
      "repos_url": "https://api.github.com/users/alexbw/repos",
      "events_url": "https://api.github.com/users/alexbw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexbw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-24T15:07:40Z",
    "updated_at": "2013-04-24T15:07:40Z",
    "author_association": "NONE",
    "body": "Ok. And here, by \"non-trivial\", do you mean that Pandas has no plans to\nsupport a feature like this?\n\nOn Wed, Apr 24, 2013 at 11:03 AM, jreback notifications@github.com wrote:\n\n> heteregoenous data shapes are non-trivial. Blaze does seem headed in that\n> direction, but not sure when will happen.\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/pydata/pandas/issues/3443#issuecomment-16936562\n> .\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16939454",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-16939454",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 16939454,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTM5NDU0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-24T15:30:25Z",
    "updated_at": "2013-04-24T15:30:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "what I mean is to be efficient about ti you would have to have a structure that is essentially a dictionary of 'stuff', where stuff could be heteregenous shaped. This is really best done in a class, and it application specific. You _can_ do it with a frame/panel whatever as @y-p shows above, but it is not 'effeicient', in that numpy holds onto the dtype as 'object'.\n\nWhen I say efficient I mean that you can move operations down to a lower level (c-level) in order to do things. I am not even sure Blaze will do this, its really quite specific (they are about supporting chunks and operating on those, but those chunks are actually the same shapes, except for 1 dim where the chunking occurs).\n\nThere is a tradeoff in code complexity & runtime-efficiency & generality. You basically have to choose where you are on that 3-d surface. Pandas has moderate complexity & generality and high runtime-efficiency. I would say numpy is lower complexity, lower generality with a simiilar runtime-efficiency. I would guess that Blaze is going to be more complex, higher efficiiency (in cases of out-of-core datasets) and about the same generality as numpy (as they are aiming to _replace_ numpy)\n\nSo even if someone had the urge to create what you are doing, they are going to have to create a new structure to hold it. \n\nIt comes to do what are your bottlenecks, maybe getting more specific will help\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/17138611",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-17138611",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 17138611,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTM4NjEx",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-28T18:04:49Z",
    "updated_at": "2013-04-28T18:04:49Z",
    "author_association": "MEMBER",
    "body": "@jreback Just out of curiosity what is the long term goal of pandas in this vein? If blaze is to replace numpy will pandas diverge from numpy altogether, or will it use blaze as the backend? I see talk about making Series ind. of ndarray in the near future for pkl support and other reasons.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/17139776",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-17139776",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 17139776,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTM5Nzc2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-28T18:28:30Z",
    "updated_at": "2013-04-28T18:28:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't see pandas incompatible via blaze at all. my understanding (and just from reading the blog). is. that blaze is supposed to be the next gen numpy. I think their API will necessarily be very similar to what it is now, and thus be pretty transparent to pandas.\n\nmy concerns now are availability and esp compatibility of their product, as it has a fairly complicated build scheme.\nIn addition they seem to want to incorporate index like features (kind of like labelled arrays). if they do great. I am sure pandas might use some of the infrastructure\n\nI think pandas fills a somewhat higher level view of data right now (and will continue to do so)\n\nas far as your specific comments, I have pushed a PR to decouple series from ndarray (index also needs this addessed). thus pandas will be somewhat easier to modify its backend w/o front end (API) visibility. (so this is a good thing)\n\nsupporting arbitrary dshapes within pandas existing objects IMHO is not that useful right now\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/17140147",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-17140147",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 17140147,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3MTQwMTQ3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-28T18:50:55Z",
    "updated_at": "2013-04-28T18:50:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "@wesm chime in?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/22721439",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-22721439",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 22721439,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzIxNDM5",
    "user": {
      "login": "alexbw",
      "id": 161935,
      "node_id": "MDQ6VXNlcjE2MTkzNQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/161935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexbw",
      "html_url": "https://github.com/alexbw",
      "followers_url": "https://api.github.com/users/alexbw/followers",
      "following_url": "https://api.github.com/users/alexbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexbw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexbw/subscriptions",
      "organizations_url": "https://api.github.com/users/alexbw/orgs",
      "repos_url": "https://api.github.com/users/alexbw/repos",
      "events_url": "https://api.github.com/users/alexbw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexbw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-15T18:54:30Z",
    "updated_at": "2013-08-15T18:54:30Z",
    "author_association": "NONE",
    "body": "Any chance at all of this seeing some love?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/22723006",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-22723006",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 22723006,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzIzMDA2",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-15T19:18:18Z",
    "updated_at": "2013-08-15T19:23:25Z",
    "author_association": "MEMBER",
    "body": "I think something like a `RelationalDataFrame` or `RelationalSomethingOrOther` would be useful here. The idea would be to have a collection of `NDFrame`s that share one or more common axes (`Index` objects). That way you could keep things separate without the complexity of nd-dtypes. Of course, you now have the complexity of an in-memory relational database.\n\nIn this case you could have an object where all objects share the \"video frame axis\" possibly more if needed.\n\nmaybe it could have a `query` method similar to 0.13 `query` method that does something similar except the namespace would be expanded to include all the objects on the `RelationalThingaMaBob`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/22723701",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-22723701",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 22723701,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzIzNzAx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-15T19:29:10Z",
    "updated_at": "2013-08-15T19:29:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "@alexbw this is pretty non-trivial, mainly because numpy doesn't support it (ATM), though Blaze is suppopsed to.\n\n@cpcloud has a nice idea, essentially an object to hold `DataFrames` that has axes that are alignable (think of this as a Panel like), but you could have a mixture too, e.g. for each object only align on certain axes\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/22724384",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-22724384",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 22724384,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzI0Mzg0",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-15T19:39:11Z",
    "updated_at": "2013-08-15T19:39:11Z",
    "author_association": "MEMBER",
    "body": "I could maybe see this being implemented by a generalization of `BlockManager` where the blocks themselves are pandas objects.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/22784732",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-22784732",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 22784732,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzg0NzMy",
    "user": {
      "login": "alexbw",
      "id": 161935,
      "node_id": "MDQ6VXNlcjE2MTkzNQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/161935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexbw",
      "html_url": "https://github.com/alexbw",
      "followers_url": "https://api.github.com/users/alexbw/followers",
      "following_url": "https://api.github.com/users/alexbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexbw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexbw/subscriptions",
      "organizations_url": "https://api.github.com/users/alexbw/orgs",
      "repos_url": "https://api.github.com/users/alexbw/repos",
      "events_url": "https://api.github.com/users/alexbw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexbw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-16T18:29:22Z",
    "updated_at": "2013-08-16T18:29:22Z",
    "author_association": "NONE",
    "body": "@cpcloud I really like this idea of a `RelationalDataFrame`. Then, hopefully, we'd be able to do HDFStore-type `select` operations. This would have incredible power for a lot of applications in the biological and physical sciences (my field). \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/22787080",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-22787080",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 22787080,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzg3MDgw",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-16T19:06:01Z",
    "updated_at": "2013-08-16T19:06:01Z",
    "author_association": "MEMBER",
    "body": "I have thought about the nested dtype problem and how pandas could offer a solution for that. It's tricky because it doesn't really fit with the DataFrame data model and implementation. In some sense what is needed is a more rigid table data structure that sits someplace in between NumPy structured arrays and DataFrame. I have actually been building something like this in recent months but I will not be able to release the source code for a while. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/22787295",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-22787295",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 22787295,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzg3Mjk1",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-16T19:09:17Z",
    "updated_at": "2013-08-16T19:09:17Z",
    "author_association": "MEMBER",
    "body": "@wesm torture!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/22793556",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-22793556",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 22793556,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyNzkzNTU2",
    "user": {
      "login": "alexbw",
      "id": 161935,
      "node_id": "MDQ6VXNlcjE2MTkzNQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/161935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexbw",
      "html_url": "https://github.com/alexbw",
      "followers_url": "https://api.github.com/users/alexbw/followers",
      "following_url": "https://api.github.com/users/alexbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexbw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexbw/subscriptions",
      "organizations_url": "https://api.github.com/users/alexbw/orgs",
      "repos_url": "https://api.github.com/users/alexbw/repos",
      "events_url": "https://api.github.com/users/alexbw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexbw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-16T20:59:38Z",
    "updated_at": "2013-08-16T20:59:38Z",
    "author_association": "NONE",
    "body": "@wesm Looking forward to it, when it's ready.\n\nOn Fri, Aug 16, 2013 at 3:09 PM, Phillip Cloud notifications@github.comwrote:\n\n> @wesm https://github.com/wesm torture!\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/pydata/pandas/issues/3443#issuecomment-22787295\n> .\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/26845931",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-26845931",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 26845931,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2ODQ1OTMx",
    "user": {
      "login": "alexbw",
      "id": 161935,
      "node_id": "MDQ6VXNlcjE2MTkzNQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/161935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexbw",
      "html_url": "https://github.com/alexbw",
      "followers_url": "https://api.github.com/users/alexbw/followers",
      "following_url": "https://api.github.com/users/alexbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexbw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexbw/subscriptions",
      "organizations_url": "https://api.github.com/users/alexbw/orgs",
      "repos_url": "https://api.github.com/users/alexbw/repos",
      "events_url": "https://api.github.com/users/alexbw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexbw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-22T20:44:55Z",
    "updated_at": "2013-10-22T20:44:55Z",
    "author_association": "NONE",
    "body": "Any thoughts on this, @cpcloud ?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/52281401",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-52281401",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 52281401,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjgxNDAx",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-15T07:27:57Z",
    "updated_at": "2014-08-15T07:27:57Z",
    "author_association": "MEMBER",
    "body": "@alexbw You should check out our project [xray](https://github.com/xray/xray), which has a `Dataset` object that is basically @cpcloud's `RelationalDataFrame` -- a bunch of multi-dimensional labeled arrays aligned along any number of common axes.\n\nOur goal is pandas-like structures for N-dimensional data, though I should note that our approach avoids heterogeneous arrays and nested dtypes (way too complex in my opinion). Instead, you would make a bunch of homogeneous arrays with different sizes and put them in a `Dataset`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/64130619",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-64130619",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 64130619,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTMwNjE5",
    "user": {
      "login": "tangobravo",
      "id": 770066,
      "node_id": "MDQ6VXNlcjc3MDA2Ng==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/770066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tangobravo",
      "html_url": "https://github.com/tangobravo",
      "followers_url": "https://api.github.com/users/tangobravo/followers",
      "following_url": "https://api.github.com/users/tangobravo/following{/other_user}",
      "gists_url": "https://api.github.com/users/tangobravo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tangobravo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tangobravo/subscriptions",
      "organizations_url": "https://api.github.com/users/tangobravo/orgs",
      "repos_url": "https://api.github.com/users/tangobravo/repos",
      "events_url": "https://api.github.com/users/tangobravo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tangobravo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-23T19:24:58Z",
    "updated_at": "2014-11-23T19:24:58Z",
    "author_association": "NONE",
    "body": "I'm a little confused by this ticket, but I think it's the right one for my issue. I'd really like to have a column in my data frame that represents, say, a 2D position or an affine matrix (ie 2x2). I like Pandas for the nice joining and selection operations but it seems weird to me that DataFrame is not able to simply wrap a numpy structured array and offer that stuff on top.\n\nObviously for low-dimensional stuff I could always split the elements into separate series, but then would need to join them back together again for certain uses. I've played with h5py which is able to represent the data how I'd like as a structured numpy array, but it's frustrating I can't just construct a pandas DataFrame from that directly.\n\nIt seems to me that all of the pandas-level operations don't need to care that the dtype is not a scalar, all of the indexing/slicing/joining etc just needs to treat them as \"values\" in the series but maybe I'm missing something fundamental. I haven't got very deep in pandas yet and am still reviewing the docs so I'd appreciate a pointer if I'm missing something obvious.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/64141468",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-64141468",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 64141468,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MTQxNDY4",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-24T00:03:01Z",
    "updated_at": "2014-11-24T15:50:49Z",
    "author_association": "MEMBER",
    "body": "The problem @alexbw ran into at the first post here is that numpy (as far I can tell) is not good about maintaining distinctions between multi-dimensional arrays and structured dtypes, i.e., `np.zeros(2, dtype=np.dtype('(2,2)f8'))` produces the exact same array as `np.zeros((2,2,2))` (as far as I can tell).\n\n@tangobravo Pandas actually _does_ allow you to put some structured dtypes in a series and do (at least some) basic alignment/indexing. For example:\n\n```\n>>> x = np.zeros(2, dtype='float, (2, 2)float')\n>>> y = pd.Series(x, index=['a', 'b'])\n>>> y.loc['a']\n(0.0, [[0.0, 0.0], [0.0, 0.0]])\n```\n\nThat said, you'll quickly run into lots of issues -- for example, `repr(y)` gives an error. Unfortunately, it's not so easy for pandas to be agnostic about the dtype of an ndarray. There are lots of operations where structured dtypes could really throw things off (e.g., handling missing values). If you really want to work on this, I expect patches would be accepted, but I don't think it would be a good idea for the pandas maintainers to take on responsibility for ensuring things with structured dtypes don't break again.\n\nSo, I would suggest either (1) putting your sub arrays in 1-d arrays with dtype=object (this works with pandas) or (2) trying a package like my project [xray](http://github.com/xray/xray) which has its own n-dimensional series and dataframe like types.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/64213311",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-64213311",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 64213311,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjEzMzEx",
    "user": {
      "login": "tangobravo",
      "id": 770066,
      "node_id": "MDQ6VXNlcjc3MDA2Ng==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/770066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tangobravo",
      "html_url": "https://github.com/tangobravo",
      "followers_url": "https://api.github.com/users/tangobravo/followers",
      "following_url": "https://api.github.com/users/tangobravo/following{/other_user}",
      "gists_url": "https://api.github.com/users/tangobravo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tangobravo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tangobravo/subscriptions",
      "organizations_url": "https://api.github.com/users/tangobravo/orgs",
      "repos_url": "https://api.github.com/users/tangobravo/repos",
      "events_url": "https://api.github.com/users/tangobravo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tangobravo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-24T15:49:40Z",
    "updated_at": "2014-11-24T15:49:40Z",
    "author_association": "NONE",
    "body": "@shoyer Thanks for the reply, and thanks for the example actually getting a structured dtype into a Series. There is obviously more complication that I realised in supporting this directly. I've had a quick look into xray and that certainly seems like a good solution for adding a bit more structure to n-d data.\n\nAlso apologies if my post came across as harsh, I really appreciate all the work done on pandas and it's a huge help in my work even without n-d \"columns\"!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/64214359",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-64214359",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 64214359,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY0MjE0MzU5",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-24T15:55:51Z",
    "updated_at": "2014-11-24T15:55:51Z",
    "author_association": "MEMBER",
    "body": "@tangobravo You also might take a look at astropy, which has [its own table type](https://astropy.readthedocs.org/en/v0.4.2/table/index.html) that apparently allows for multi-dimensional columns. But I haven't tested it myself.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/67947158",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-67947158",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 67947158,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTQ3MTU4",
    "user": {
      "login": "alexbw",
      "id": 161935,
      "node_id": "MDQ6VXNlcjE2MTkzNQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/161935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexbw",
      "html_url": "https://github.com/alexbw",
      "followers_url": "https://api.github.com/users/alexbw/followers",
      "following_url": "https://api.github.com/users/alexbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexbw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexbw/subscriptions",
      "organizations_url": "https://api.github.com/users/alexbw/orgs",
      "repos_url": "https://api.github.com/users/alexbw/repos",
      "events_url": "https://api.github.com/users/alexbw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexbw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-23T12:39:44Z",
    "updated_at": "2014-12-23T12:39:44Z",
    "author_association": "NONE",
    "body": "Just wanted to give a follow-up on how I've dealt with this. I had two problems\n\n1) Efficiently store and retrieve large, structured datasets. Some aspects of the dataset are scalar (e.g. velocity at some timepoint), others are inherently multi-dimensional (e.g. an image at some timepoint). All share the same time index. \n2) Manipulate large structured datasets in memory, for analysis and plotting purposes. \n\nI ended up explicitly writing to an HDF5 file using h5py for issue 1. The code ended up being a lot tighter than I had expected. In hindsight, I should have ditched Pandas' `to_hdf` function early on when I realized my requirements were out of Pandas' scope. By being explicit about how my data is structured in the HDF5 file, I can also take better advantage of compression. My saved files are an order of magnitude smaller, and reading and writing is much faster as well. \n\nFor issue 2, I ended up just using a dictionary of arrays. It sounds primitive, but I really didn't end up needing Pandas powerful pivoting, imputation and indexing features for this project. To get the convenience of the dot-syntax (e.g. df.velocity as opposed to df['velocity'], which is a huge boon when working interactively in the IPython notebook), I cobbled together this class, which just exposes dictionary elements as dot-gettable properties.\n\n```\nclass Bunch(dict):\n    def __init__(self, *args, **kw):\n        dict.__init__(self, kw)\n        self.__dict__ = self\n        if len(args) > 0:\n            assert len(args) == 1 and isinstance(args[0], dict), \"Can either pass in a dictionary, or keyword arguments\"\n            self.__dict__.update(args[0])\n\n    def __getstate__(self):\n        return self\n\n    def __setstate__(self, state):\n        self.update(state)\n        self.__dict__ = self\n```\n\nI didn't write it, I took pieces from around the internet. \n\nThe biggest unfortunate thing right now is that I have to index the elements, I can't index the structure itself. So, I cannot do\n\n`df[index].images`, I have to do `df.images[index]`.\n\nThe former style comes in handy when you need to chop a dataset up whole-hog for train/test/validation splits. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/67947204",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-67947204",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 67947204,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3OTQ3MjA0",
    "user": {
      "login": "alexbw",
      "id": 161935,
      "node_id": "MDQ6VXNlcjE2MTkzNQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/161935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexbw",
      "html_url": "https://github.com/alexbw",
      "followers_url": "https://api.github.com/users/alexbw/followers",
      "following_url": "https://api.github.com/users/alexbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexbw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexbw/subscriptions",
      "organizations_url": "https://api.github.com/users/alexbw/orgs",
      "repos_url": "https://api.github.com/users/alexbw/repos",
      "events_url": "https://api.github.com/users/alexbw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexbw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-23T12:40:27Z",
    "updated_at": "2014-12-23T12:40:27Z",
    "author_association": "NONE",
    "body": "Also, if nobody objects, I'll close this issue. I think my original issue is solved, in that Pandas will not support arbitrary dtypes in Series.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/73014313",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-73014313",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 73014313,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMDE0MzEz",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-05T09:02:13Z",
    "updated_at": "2015-02-05T09:02:13Z",
    "author_association": "MEMBER",
    "body": "@alexbw I agree, I think this issue can be considered resolved -- this is not going to happen easily in pandas itself, and is probably better left to third party packages -- pandas does not need more scope keep. That said, I might leave it open if only so that something turns out when people search open GitHub issues for \"multidimensional\".\n\nThanks also for sharing your approach. I know I'm repeating myself in this issue, but I'd like to note again for the record that each of your problems is something that [xray](https://github.com/xray/xray/) is designed to solve (though it also tries to do more). Its `Dataset` object acts like your `Bunch` (I recently added attribute-style access for variables) but it does have support for simultaneous indexing of all variables. It also supports direct output to multi-dimensional netCDF4 files with optional chunking/compression, similar to what you accomplished with h5py (netCDF4 is a subtype of HDF5 with particular metadata conventions).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/73037515",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-73037515",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 73037515,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMDM3NTE1",
    "user": {
      "login": "alexbw",
      "id": 161935,
      "node_id": "MDQ6VXNlcjE2MTkzNQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/161935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexbw",
      "html_url": "https://github.com/alexbw",
      "followers_url": "https://api.github.com/users/alexbw/followers",
      "following_url": "https://api.github.com/users/alexbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexbw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexbw/subscriptions",
      "organizations_url": "https://api.github.com/users/alexbw/orgs",
      "repos_url": "https://api.github.com/users/alexbw/repos",
      "events_url": "https://api.github.com/users/alexbw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexbw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-05T12:19:10Z",
    "updated_at": "2015-02-05T12:19:10Z",
    "author_association": "NONE",
    "body": "I will check out Xray. I'm current a fan of the thinness of the Bunch\napproach, but a lack of a global index is annoying. I am enjoying also the\nefficiency of hand-tuned HDF5 data structures, I can go way beyond what\npandas can do out of the box by paying close attention to how data is\nwritten. I am excited to see if xray helps automate that process (it\ndefinitely doesn't have to be as manual as I currently do it).\nOn Thu, Feb 5, 2015 at 4:02 AM Stephan Hoyer notifications@github.com\nwrote:\n\n> @alexbw https://github.com/alexbw I agree, I think this issue can be\n> considered resolved -- this is not going to happen easily in pandas itself,\n> and is probably better left to third party packages -- pandas does not need\n> more scope keep. That said, I might leave it open if only so that something\n> turns out when people search open GitHub issues for \"multidimensional\".\n> \n> Thanks also for sharing your approach. I know I'm repeating myself in this\n> issue, but I'd like to note again for the record that each of your problems\n> is something that xray https://github.com/xray/xray/ is designed to\n> solve (though it also tries to do more). Its Dataset object acts like\n> your Bunch (I recently added attribute-style access for variables) but it\n> does have support for simultaneous indexing of all variables. It also\n> supports direct output to multi-dimensional netCDF4 files with optional\n> chunking/compression, similar to what you accomplished with h5py (netCDF4\n> is a subtype of HDF5 with particular metadata conventions).\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/pydata/pandas/issues/3443#issuecomment-73014313.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/251648692",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3443#issuecomment-251648692",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3443",
    "id": 251648692,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTY0ODY5Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-05T11:25:28Z",
    "updated_at": "2016-10-05T11:25:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "closing this, but can comment on specific uses [here](https://github.com/pydata/pandas-design/issues/24), for pandas 2.0 designs.\n"
  }
]
