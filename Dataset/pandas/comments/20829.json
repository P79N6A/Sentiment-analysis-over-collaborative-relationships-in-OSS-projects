[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/384640748",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20829#issuecomment-384640748",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20829",
    "id": 384640748,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDY0MDc0OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-26T13:28:17Z",
    "updated_at": "2018-04-26T13:28:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Can you try on master?\r\n\r\n```python\r\ncustom = CustomClass()\r\nvar1 = datetime.timedelta(seconds=1)\r\nvar2 = pandas.Timedelta(\"1s\")\r\n\r\n# Following code raises CustomClass exception\r\nvar1 == custom\r\n\r\n# Following code returns False, does not call CustomClass.__eq__\r\nvar2 == custom\r\n\r\n## -- End pasted text --\r\n---------------------------------------------------------------------------\r\nException                                 Traceback (most recent call last)\r\n<ipython-input-1-82804cdda1a5> in <module>()\r\n     16\r\n     17 # Following code raises CustomClass exception\r\n---> 18 var1 == custom\r\n     19\r\n     20 # Following code returns False, does not call CustomClass.__eq__\r\n\r\n<ipython-input-1-82804cdda1a5> in __eq__(self, other)\r\n      8\r\n      9     def __eq__(self, other):\r\n---> 10         raise Exception(\"Custom Class eq\")\r\n     11\r\n     12\r\n\r\nException: Custom Class eq\r\n\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/384677299",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20829#issuecomment-384677299",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20829",
    "id": 384677299,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDY3NzI5OQ==",
    "user": {
      "login": "Sup3rGeo",
      "id": 20566367,
      "node_id": "MDQ6VXNlcjIwNTY2MzY3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/20566367?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sup3rGeo",
      "html_url": "https://github.com/Sup3rGeo",
      "followers_url": "https://api.github.com/users/Sup3rGeo/followers",
      "following_url": "https://api.github.com/users/Sup3rGeo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sup3rGeo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sup3rGeo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sup3rGeo/subscriptions",
      "organizations_url": "https://api.github.com/users/Sup3rGeo/orgs",
      "repos_url": "https://api.github.com/users/Sup3rGeo/repos",
      "events_url": "https://api.github.com/users/Sup3rGeo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sup3rGeo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-26T15:12:04Z",
    "updated_at": "2018-04-26T15:12:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Same thing on master.\r\n\r\nNote that in the example we want exceptions both in `var1 == custom` and `var2 == custom`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/384687903",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20829#issuecomment-384687903",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20829",
    "id": 384687903,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDY4NzkwMw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-26T15:38:32Z",
    "updated_at": "2018-04-26T15:38:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ah sorry I didn't get to that because of the first exception.\r\n\r\ncc @jbrockmendel whose been active here recently. I think this is may be non-trivial to support."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/384690157",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20829#issuecomment-384690157",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20829",
    "id": 384690157,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDY5MDE1Nw==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-26T15:44:42Z",
    "updated_at": "2018-04-26T15:44:42Z",
    "author_association": "MEMBER",
    "body": "Tom is right, this would be non-trivial to support.  There is no branch of `Timedelta.__eq__` (actually `Timedelta.__richcmp__`) that returns `NotImplemented`.\r\n\r\nThat said, if you were careful to always write `custom == td` instead of `td == custom` then it `custom.__eq__` would get called first instead of `td.__eq__`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/392823437",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20829#issuecomment-392823437",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20829",
    "id": 392823437,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MjgyMzQzNw==",
    "user": {
      "login": "Sup3rGeo",
      "id": 20566367,
      "node_id": "MDQ6VXNlcjIwNTY2MzY3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/20566367?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sup3rGeo",
      "html_url": "https://github.com/Sup3rGeo",
      "followers_url": "https://api.github.com/users/Sup3rGeo/followers",
      "following_url": "https://api.github.com/users/Sup3rGeo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sup3rGeo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sup3rGeo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sup3rGeo/subscriptions",
      "organizations_url": "https://api.github.com/users/Sup3rGeo/orgs",
      "repos_url": "https://api.github.com/users/Sup3rGeo/repos",
      "events_url": "https://api.github.com/users/Sup3rGeo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sup3rGeo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-29T15:37:33Z",
    "updated_at": "2018-05-29T15:37:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jbrockmendel I was taking a look at the code, shouldn't it be just a matter of changing this branch:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/c85ab083919b59ce84c220d5baf7d34ff4a0bcf2/pandas/_libs/tslibs/timedeltas.pyx#L695-L702\r\n\r\nTo return `NotImplemented` ?\r\n\r\n```\r\n else: \r\n     return NotImplemented\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/392879196",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20829#issuecomment-392879196",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20829",
    "id": 392879196,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5Mjg3OTE5Ng==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-29T18:08:40Z",
    "updated_at": "2018-05-29T18:08:40Z",
    "author_association": "MEMBER",
    "body": "It might be reasonable to return `NotImplemented` instead of raising `TypeError` (though tracking down the affected tests and changing the expected error message would be a hassle), but the `Py_EQ` and `Py_NE` branches we wouldn't want to change because we need to accommodate _non_-custom classes.\r\n\r\nAlso if `ApproxTimedelta` happens to subclass `timedelta`, then the comparison wouldn't go through the linked code, but would instead go through lines 674 and 704.\r\n\r\nHave you considered using `mock` to patch `Timedelta.__eq__`?  That might be easier on your end."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/393133451",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20829#issuecomment-393133451",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20829",
    "id": 393133451,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzEzMzQ1MQ==",
    "user": {
      "login": "Sup3rGeo",
      "id": 20566367,
      "node_id": "MDQ6VXNlcjIwNTY2MzY3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/20566367?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sup3rGeo",
      "html_url": "https://github.com/Sup3rGeo",
      "followers_url": "https://api.github.com/users/Sup3rGeo/followers",
      "following_url": "https://api.github.com/users/Sup3rGeo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sup3rGeo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sup3rGeo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sup3rGeo/subscriptions",
      "organizations_url": "https://api.github.com/users/Sup3rGeo/orgs",
      "repos_url": "https://api.github.com/users/Sup3rGeo/repos",
      "events_url": "https://api.github.com/users/Sup3rGeo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sup3rGeo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-30T11:54:35Z",
    "updated_at": "2018-05-30T11:54:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "> but the Py_EQ and Py_NE branches we wouldn't want to change because we need to accommodate non-custom classes.\r\n\r\nCould you elaborate a bit more on than? What would be an example?\r\n\r\n> Have you considered using mock to patch Timedelta.__eq__? That might be easier on your end.\r\n\r\nYep that's a good idea for time being!\r\n\r\nAnother question related to it: If I also happen to have a custom Timedelta subclass (for instance allowing to sum a timedelta with \"1s\" directly). Is there an easy way to make pandas use this custom when working with TimedeltaIndexes?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/393239742",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20829#issuecomment-393239742",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20829",
    "id": 393239742,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzIzOTc0Mg==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-30T17:06:49Z",
    "updated_at": "2018-05-30T17:06:49Z",
    "author_association": "MEMBER",
    "body": "> Could you elaborate a bit more on than? What would be an example?\r\n\r\nTimedelta(whatever) == 6 --> False\r\nTimedelta(whatever) != \"foo\" --> True\r\n\r\n> Is there an easy way to make pandas use this custom when working with TimedeltaIndexes?\r\n\r\nTry `pd.Index([custom_timedelta], dtype='o')`"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/393329277",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20829#issuecomment-393329277",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20829",
    "id": 393329277,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzMyOTI3Nw==",
    "user": {
      "login": "Sup3rGeo",
      "id": 20566367,
      "node_id": "MDQ6VXNlcjIwNTY2MzY3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/20566367?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sup3rGeo",
      "html_url": "https://github.com/Sup3rGeo",
      "followers_url": "https://api.github.com/users/Sup3rGeo/followers",
      "following_url": "https://api.github.com/users/Sup3rGeo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sup3rGeo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sup3rGeo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sup3rGeo/subscriptions",
      "organizations_url": "https://api.github.com/users/Sup3rGeo/orgs",
      "repos_url": "https://api.github.com/users/Sup3rGeo/repos",
      "events_url": "https://api.github.com/users/Sup3rGeo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sup3rGeo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-30T21:42:37Z",
    "updated_at": "2018-05-30T21:42:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "I thought python would fallback automatically to identity comparison if both classes returned NotImplemented for a comparison.\r\n\r\nIs it a different situation for pandas Timedelta?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/393580392",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20829#issuecomment-393580392",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20829",
    "id": 393580392,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzU4MDM5Mg==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-31T15:57:04Z",
    "updated_at": "2018-05-31T15:57:04Z",
    "author_association": "MEMBER",
    "body": "@Sup3rGeo Off the top of my head I can't think of any reason why Timedelta would behave differently, but the check-for-eq-then-ne-then-raise pattern is present in a handful of places in pandas.\r\n\r\nMaybe try making the substitution you have in mind and see if it causes any test failures?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/393926063",
    "html_url": "https://github.com/pandas-dev/pandas/issues/20829#issuecomment-393926063",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/20829",
    "id": 393926063,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MzkyNjA2Mw==",
    "user": {
      "login": "Sup3rGeo",
      "id": 20566367,
      "node_id": "MDQ6VXNlcjIwNTY2MzY3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/20566367?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sup3rGeo",
      "html_url": "https://github.com/Sup3rGeo",
      "followers_url": "https://api.github.com/users/Sup3rGeo/followers",
      "following_url": "https://api.github.com/users/Sup3rGeo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sup3rGeo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sup3rGeo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sup3rGeo/subscriptions",
      "organizations_url": "https://api.github.com/users/Sup3rGeo/orgs",
      "repos_url": "https://api.github.com/users/Sup3rGeo/repos",
      "events_url": "https://api.github.com/users/Sup3rGeo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sup3rGeo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-01T16:00:05Z",
    "updated_at": "2018-06-01T16:00:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Will do it!\r\n\r\nJust as quick snippet:\r\n\r\n```\r\nimport pandas as pd\r\n\r\ndef CustomClass(object):\r\n    def __eq__(self, other):\r\n        print(\"Custom class __eq__\")\r\n        return NotImplemented\r\n\r\npd.Timedelta(\"1s\") == 6 # False\r\npd.Timedelta(\"1s\") == \"foo\" # False\r\npd.Timedelta(\"1s\") == CustomClass() # False\r\n\r\ndef new_eq(self,other):\r\n    return NotImplemented\r\n\r\npd.Timedelta.__eq__ = new_eq\r\n\r\npd.Timedelta(\"1s\") == 6 # still False\r\npd.Timedelta(\"1s\") == \"foo\" # still False\r\npd.Timedelta(\"1s\") == CustomClass() # still False, but prints custom class eq\r\n```\r\n"
  }
]
