[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/294367772",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16014#issuecomment-294367772",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16014",
    "id": 294367772,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NDM2Nzc3Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-16T18:53:14Z",
    "updated_at": "2017-04-16T18:53:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "yes this seems reasonable. creating a ``Categorical`` w/o cateogories creates categories in the order they are found, but that's an implementation detail.\r\n\r\nif you change this how much breakage on tests? (IOW this is going to affect ``is_dtype_equal`` as well)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/294373479",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16014#issuecomment-294373479",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16014",
    "id": 294373479,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NDM3MzQ3OQ==",
    "user": {
      "login": "jankatins",
      "id": 890156,
      "node_id": "MDQ6VXNlcjg5MDE1Ng==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/890156?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jankatins",
      "html_url": "https://github.com/jankatins",
      "followers_url": "https://api.github.com/users/jankatins/followers",
      "following_url": "https://api.github.com/users/jankatins/following{/other_user}",
      "gists_url": "https://api.github.com/users/jankatins/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jankatins/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jankatins/subscriptions",
      "organizations_url": "https://api.github.com/users/jankatins/orgs",
      "repos_url": "https://api.github.com/users/jankatins/repos",
      "events_url": "https://api.github.com/users/jankatins/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jankatins/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-16T20:49:22Z",
    "updated_at": "2017-04-16T21:12:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Once upon a time, categoricals were modeled after factor in R and there, levels (=categories) were sorted:\r\n\r\n```\r\n> levels(factor(c('b','a', 'c')) )\r\n[1] \"a\" \"b\" \"c\"\r\n```\r\n\r\nIn that case, both cases would result in the same categories.\r\n\r\nI think the sorting was removed (\"categories in order of apearance\") and this was overlooked? [edit] None of the commits show this (as far as my github blame skill reach...), so it either happend  in one of the early discussions or in my imagination and this was simpy overlooked in the implementation.[/] "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/294376939",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16014#issuecomment-294376939",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16014",
    "id": 294376939,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NDM3NjkzOQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-16T22:04:25Z",
    "updated_at": "2017-04-16T22:05:30Z",
    "author_association": "MEMBER",
    "body": ">  creating a Categorical w/o cateogories creates categories in the order they are found, but that's an implementation detail.\r\n\r\n@jreback no, when no categories are specified, the found values are sorted:\r\n\r\nIn [1]: pd.Categorical(['b', 'a'])\r\nOut[1]: \r\n[b, a]\r\nCategories (2, object): [a, b]\r\n\r\n> None of the commits show this (as far as my github blame skill reach...), so it either happend in one of the early discussions or in my imagination and this was simpy overlooked in the implementation\r\n\r\nIt just didn't happen AFAIK :-)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/295687854",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16014#issuecomment-295687854",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16014",
    "id": 295687854,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NTY4Nzg1NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-20T11:11:39Z",
    "updated_at": "2017-04-20T11:11:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "right, forgot we *sort* :>\r\n\r\nso the question is why are we differentiating between passed categories and categories created from direct factorizing in the ``ordered=False`` case?\r\n\r\nFor ``ordered=False``\r\n - I think leaving the passed categories as is is fine (e.g. no sorting)\r\n- a bit indifferent to whether we *should* sort factorized categories (a) (I know R does), or show them in order of appearance (b)\r\n\r\nBut these *all* should be equivalent\r\ni"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/295693931",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16014#issuecomment-295693931",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16014",
    "id": 295693931,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NTY5MzkzMQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-20T11:25:58Z",
    "updated_at": "2017-04-20T11:25:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'll play around with it when I'm doing the CategoricalDtype stuff. For ease of implementation, we'll have to do something. Having an \"ordering\" function that deterministically orders a given set of categories is necessary so that the codes match up.\r\n\r\n```\r\nIn [8]: pd.Categorical(['b', 'a', 1])\r\nOut[8]:\r\n[b, a, 1]\r\nCategories (3, object): [1, a, b]\r\n\r\nIn [9]: pd.Categorical(['b', 'a', 1, pd.Timestamp('2017')])\r\nOut[9]:\r\n[b, a, 1, 2017-01-01 00:00:00]\r\nCategories (4, object): [b, a, 1, 2017-01-01 00:00:00]\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/295697848",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16014#issuecomment-295697848",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16014",
    "id": 295697848,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NTY5Nzg0OA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-20T11:36:42Z",
    "updated_at": "2017-04-20T11:37:49Z",
    "author_association": "MEMBER",
    "body": "If we are comparing to R, they do not care about order of categories when they are not ordered:\r\n\r\n```\r\n> f1 <- factor(c('b','a', 'c'))\r\n> f2 <- factor(c('b','a', 'c'), levels = c('b', 'a', 'c'))\r\n> f1\r\n[1] b a c\r\nLevels: a b c\r\n> f2\r\n[1] b a c\r\nLevels: b a c\r\n> f1 == f2\r\n[1] TRUE TRUE TRUE\r\n```\r\n\r\nbut ... they also don't care when they *are* ordered:\r\n\r\n```\r\n> f1 <- factor(c('b','a', 'c'), ordered = T)\r\n> f1\r\n[1] b a c\r\nLevels: a < b < c\r\n> f2 <- factor(c('b','a', 'c'), levels = c('b', 'a', 'c'), ordered = T)\r\n> f2\r\n[1] b a c\r\nLevels: b < a < c\r\n> f1 == f2\r\n[1] TRUE TRUE TRUE\r\n```\r\n\r\nIf we change something, I would personally keep it so that this second case (ordered categories with different order) raises when trying to compare. \r\nFor the unordered case, I am fine with changing this.\r\n\r\n> a bit indifferent to whether we should sort factorized categories (a) (I know R does), or show them in order of appearance (b)\r\n\r\nI certainly think we should *not* change the current behaviour, which is have sorted categories when you do not specify them manually.\r\n\r\n> so the question is why are we differentiating between passed categories and categories created from direct factorizing in the ordered=False case?\r\n\r\nBecause it is a different case. In case of passed categories, you explicitly pass them, so I find it logical that pandas respects the passed values by the user.\r\n\r\nBTW, there is no difference between the `ordered` is `False` vs `True` here. In both cases, if you do not specify categories yourself, they are derived from the unique values and sorted:\r\n\r\n```\r\nIn [3]: pd.Categorical(['b', 'a'])\r\nOut[3]: \r\n[b, a]\r\nCategories (2, object): [a, b]\r\n\r\nIn [4]: pd.Categorical(['b', 'a'], ordered=True)\r\nOut[4]: \r\n[b, a]\r\nCategories (2, object): [a < b]\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/295701726",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16014#issuecomment-295701726",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16014",
    "id": 295701726,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NTcwMTcyNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-20T11:46:43Z",
    "updated_at": "2017-04-20T11:46:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Because it is a different case. In case of passed categories, you explicitly pass them, so I find it logical that pandas respects the passed values by the user.\r\n\r\nthis is all fine, but then they *should* compare equally. The point of ``ordered=False` is the don't *care* about the ordering (so its a set rather than a list comparison).\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/295701853",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16014#issuecomment-295701853",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16014",
    "id": 295701853,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NTcwMTg1Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-20T11:47:08Z",
    "updated_at": "2017-04-20T11:47:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "> If we change something, I would personally keep it so that this second case (ordered categories with different order) raises when trying to compare.\r\nFor the unordered case, I am fine with changing this.\r\n\r\nAgreed\r\n\r\n> they are derived from the unique values and sorted:\r\n\r\nWell... usually :)\r\n\r\n```python\r\nIn [1]: import pandas as pd\r\n\r\nIn [2]: pd.Categorical(['b', 'a', 1])\r\nOut[2]:\r\n[b, a, 1]\r\nCategories (3, object): [1, a, b]\r\n\r\nIn [3]: pd.Categorical(['b', 'a', 1, pd.Timestamp('2017')])\r\nOut[3]:\r\n[b, a, 1, 2017-01-01 00:00:00]\r\nCategories (4, object): [b, a, 1, 2017-01-01 00:00:00]\r\n```\r\n\r\nBut I agree that the current behavior around *building* categorical shouldn't change, just the behavior when comparing them. I *think* we're all in agreement on that."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/295709034",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16014#issuecomment-295709034",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16014",
    "id": 295709034,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NTcwOTAzNA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-20T12:06:39Z",
    "updated_at": "2017-04-20T12:06:39Z",
    "author_association": "MEMBER",
    "body": "> But I agree that the current behavior around building categorical shouldn't change, just the behavior when comparing them. I think we're all in agreement on that.\r\n\r\nYep!\r\n\r\nYour corner case is a bit strange in that in the first case it seems to be sorted and in the second not, while in *both* cases the values are not sortable (eg if you would put them in an index or series and sort, you get an error).  "
  }
]
