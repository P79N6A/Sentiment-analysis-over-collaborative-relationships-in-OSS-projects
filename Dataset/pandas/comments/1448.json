[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6271120",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1448#issuecomment-6271120",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1448",
    "id": 6271120,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNzExMjA=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-12T14:03:09Z",
    "updated_at": "2012-06-12T14:03:09Z",
    "author_association": "MEMBER",
    "body": "That would be really nice. I'm open to suggestions-- there is already code merged for doing the conversion to rpy2. Have you seen the new R cell magic in IPython?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6349901",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1448#issuecomment-6349901",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1448",
    "id": 6349901,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNDk5MDE=",
    "user": {
      "login": "lbeltrame",
      "id": 25192,
      "node_id": "MDQ6VXNlcjI1MTky",
      "avatar_url": "https://avatars0.githubusercontent.com/u/25192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lbeltrame",
      "html_url": "https://github.com/lbeltrame",
      "followers_url": "https://api.github.com/users/lbeltrame/followers",
      "following_url": "https://api.github.com/users/lbeltrame/following{/other_user}",
      "gists_url": "https://api.github.com/users/lbeltrame/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lbeltrame/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lbeltrame/subscriptions",
      "organizations_url": "https://api.github.com/users/lbeltrame/orgs",
      "repos_url": "https://api.github.com/users/lbeltrame/repos",
      "events_url": "https://api.github.com/users/lbeltrame/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lbeltrame/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-15T05:50:50Z",
    "updated_at": "2012-06-15T05:50:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "What's the limit at the moment IMO is in the constructor of the DataFrame object in rpy2 (as I mentioned in the rpy2 mailing list, I tried to hack on it but it got a little too complicated for me to handle), because it only accepts the \"tlist\" (ordered dict or tagged list) when constructing one. Probably something similar to pandas' DataFrame constructor (simplified for this specific use case) would probably be better, API wise.\nThat would allow also to drop the intermediate used for the conversion step (again IMO a problem if you use large objects).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6379330",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1448#issuecomment-6379330",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1448",
    "id": 6379330,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzkzMzA=",
    "user": {
      "login": "lgautier",
      "id": 650866,
      "node_id": "MDQ6VXNlcjY1MDg2Ng==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/650866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lgautier",
      "html_url": "https://github.com/lgautier",
      "followers_url": "https://api.github.com/users/lgautier/followers",
      "following_url": "https://api.github.com/users/lgautier/following{/other_user}",
      "gists_url": "https://api.github.com/users/lgautier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lgautier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lgautier/subscriptions",
      "organizations_url": "https://api.github.com/users/lgautier/orgs",
      "repos_url": "https://api.github.com/users/lgautier/repos",
      "events_url": "https://api.github.com/users/lgautier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lgautier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-17T06:51:17Z",
    "updated_at": "2012-06-17T06:51:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Unifying constructors, to the extent they can, is relevant.\n\nHowever, I believe that there is already some of it already in place.\nThe constructor for rpy2.robjects.vectors.DataFrame also accepts unordered dictionnaries.\n\n``` python\n>>> from rpy2.robjects.vectors import DataFrame\n>>> DataFrame({'a': 1, 'b': 2})\n<DataFrame - Python:0x2104830 / R:0x278dc40>\n[IntVector, IntVector]\n  a: <class 'rpy2.robjects.vectors.IntVector'>\n  <IntVector - Python:0x2106b00 / R:0x35de058>\n[       1]\n  b: <class 'rpy2.robjects.vectors.IntVector'>\n  <IntVector - Python:0x2106b48 / R:0x35de028>\n[       2]\n```\n\nThe similarities do not stop here. Note the method 'from_csvfile' in rpy2's DataFrame and 'from_csv' in pandas' DataFrame. Rpy2 DataFrame.from_csvfile() seems to predate Pandas' method and one could think that should names have been identical we would have had the start of a common interface.\n\nUnfortunately this is a little more complicated. Arguments are different because both packages have slightly different objectives. Rpy2 aims at providing a complete interface to R's data.frame under a \"pythonic\" interface while Pandas aims creating an R-like DataFrame.\n\nWhat I think should be worked out first is:\n- common operations for both worlds (point taken that constructing the DataFrame is a common need ;-) )\n- what common signatures should we have for the methods\n- may be think about common attributes ?\n\nMy list would be:\n- extracting subsets\n- getting column or row names\n- exporting (e.g. to files)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6379751",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1448#issuecomment-6379751",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1448",
    "id": 6379751,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNzk3NTE=",
    "user": {
      "login": "lbeltrame",
      "id": 25192,
      "node_id": "MDQ6VXNlcjI1MTky",
      "avatar_url": "https://avatars0.githubusercontent.com/u/25192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lbeltrame",
      "html_url": "https://github.com/lbeltrame",
      "followers_url": "https://api.github.com/users/lbeltrame/followers",
      "following_url": "https://api.github.com/users/lbeltrame/following{/other_user}",
      "gists_url": "https://api.github.com/users/lbeltrame/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lbeltrame/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lbeltrame/subscriptions",
      "organizations_url": "https://api.github.com/users/lbeltrame/orgs",
      "repos_url": "https://api.github.com/users/lbeltrame/repos",
      "events_url": "https://api.github.com/users/lbeltrame/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lbeltrame/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-17T08:39:13Z",
    "updated_at": "2012-06-17T08:39:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "In data sabato 16 giugno 2012 23:51:18, hai scritto:\n\n> My list would be:\n> - extracting subsets\n\nThis is the main difference I think, because most of the features in rpy2 \nDataFrames are accessed through .rx and .rx2 (unless you have added more stuff \nin **getitem** for the upcoming 2.3) while pandas uses either .ix for index \noperation or simply through **getitem**.\n\n> - getting column or row names\n\nI think this is just a matter of names: .index and .columns vs .rownames and \n.colnames. \n\n> - exporting (e.g. to files)\n\nThey're already quite close: .to_csv vs to_csvfile. \n\nThere's also pandas.read_table, which mimicks R's read.table (but uses tab \ndelimiters as default, unlike R).\n\nI have a few examples of real-world code that uses pandas objects for R \noperations (converting them here and there): mostly I use .ix, boolean array \noperations, and column subsets.\n\n## \n\nLuca Beltrame - KDE Forums team\nKDE Science supporter\nGPG key ID: 6E1A4E79\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6381622",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1448#issuecomment-6381622",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1448",
    "id": 6381622,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODE2MjI=",
    "user": {
      "login": "lgautier",
      "id": 650866,
      "node_id": "MDQ6VXNlcjY1MDg2Ng==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/650866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lgautier",
      "html_url": "https://github.com/lgautier",
      "followers_url": "https://api.github.com/users/lgautier/followers",
      "following_url": "https://api.github.com/users/lgautier/following{/other_user}",
      "gists_url": "https://api.github.com/users/lgautier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lgautier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lgautier/subscriptions",
      "organizations_url": "https://api.github.com/users/lgautier/orgs",
      "repos_url": "https://api.github.com/users/lgautier/repos",
      "events_url": "https://api.github.com/users/lgautier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lgautier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-17T14:41:30Z",
    "updated_at": "2012-06-17T14:41:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "\"Just a matter of names\" is the easiest situation on a technical standpoint, nonetheless one that require 2 parties to agree. In the case of rpy2, the names are obviously chosen to reflect the underlying R naming.\n\nThe resolution would be one of:\n- One the two packages is changing its names (I have the feeling that this is not going to happen - I will defend that the names I have should stay to facilitate the mapping with R, Wes will have his reasons - stalemate)\n- Both packages create a new DataFrame class with common names (I don't think that this is a good idea - the point of making the transition between the two worlds seamless would be lost)\n- Each package implements supplementary methods with common names (Ideally that would the first of the 3 points, but I seeing this as the only way out). These supplementary methods would aim at establishing what I can only qualify as method symmetry. Rpy2's DataFrame would get .index and .columns while Panda's DataFrame would get .rownames and .colnames\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6382842",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1448#issuecomment-6382842",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1448",
    "id": 6382842,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODI4NDI=",
    "user": {
      "login": "wrobell",
      "id": 105664,
      "node_id": "MDQ6VXNlcjEwNTY2NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/105664?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wrobell",
      "html_url": "https://github.com/wrobell",
      "followers_url": "https://api.github.com/users/wrobell/followers",
      "following_url": "https://api.github.com/users/wrobell/following{/other_user}",
      "gists_url": "https://api.github.com/users/wrobell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wrobell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wrobell/subscriptions",
      "organizations_url": "https://api.github.com/users/wrobell/orgs",
      "repos_url": "https://api.github.com/users/wrobell/repos",
      "events_url": "https://api.github.com/users/wrobell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wrobell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-17T17:15:15Z",
    "updated_at": "2012-06-17T17:15:15Z",
    "author_association": "NONE",
    "body": "Pandas seems to integrate with Python typing system bit better than rpy2.\n\nConsider\n\n```\nfrom pandas import Series, DataFrame\nprint(DataFrame({'a': [None, 1, 2, '3']}))  # OK\n```\n\nand\n\n```\nfrom rpy2.robjects import DataFrame\nprint(DataFrame({'a': [None, 1, 2, '3']}))   # not allowed due to `None` value and \"3\" string\n```\n\nIf looking for common denominator, then going rpy2 way in such cases would cripple Pandas, IMHO.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6382893",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1448#issuecomment-6382893",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1448",
    "id": 6382893,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODI4OTM=",
    "user": {
      "login": "lbeltrame",
      "id": 25192,
      "node_id": "MDQ6VXNlcjI1MTky",
      "avatar_url": "https://avatars0.githubusercontent.com/u/25192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lbeltrame",
      "html_url": "https://github.com/lbeltrame",
      "followers_url": "https://api.github.com/users/lbeltrame/followers",
      "following_url": "https://api.github.com/users/lbeltrame/following{/other_user}",
      "gists_url": "https://api.github.com/users/lbeltrame/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lbeltrame/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lbeltrame/subscriptions",
      "organizations_url": "https://api.github.com/users/lbeltrame/orgs",
      "repos_url": "https://api.github.com/users/lbeltrame/repos",
      "events_url": "https://api.github.com/users/lbeltrame/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lbeltrame/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-17T17:21:27Z",
    "updated_at": "2012-06-17T17:21:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "The latter case is a limitation of R, as far as I can understand, not rpy2. Vectors are, to my knowledge, homogeneous in  type:\n\n``` R\n> c(1,2,\"3\")\n[1] \"1\" \"2\" \"3\" # coerced to string\n> str(c(1,2,\"3\"))\n chr [1:3] \"1\" \"2\" \"3\"\n```\n\nThere's no such thing as the \"object\" dtype as in numpy in R (feel free to correct me if I'm wrong). So that specific case is not directly related to this issue, IMO.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6383279",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1448#issuecomment-6383279",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1448",
    "id": 6383279,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODMyNzk=",
    "user": {
      "login": "wrobell",
      "id": 105664,
      "node_id": "MDQ6VXNlcjEwNTY2NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/105664?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wrobell",
      "html_url": "https://github.com/wrobell",
      "followers_url": "https://api.github.com/users/wrobell/followers",
      "following_url": "https://api.github.com/users/wrobell/following{/other_user}",
      "gists_url": "https://api.github.com/users/wrobell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wrobell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wrobell/subscriptions",
      "organizations_url": "https://api.github.com/users/wrobell/orgs",
      "repos_url": "https://api.github.com/users/wrobell/repos",
      "events_url": "https://api.github.com/users/wrobell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wrobell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-17T18:09:35Z",
    "updated_at": "2012-06-17T18:10:20Z",
    "author_association": "NONE",
    "body": "I do understand the nature of R vectors very well.\n\nBut still, rpy2 could integrate with Python type system in better way, i.e. None -> NA_Real could be performed for float vectors.\n\nIt seems that Pandas tries to be type agnostic in Python way, while rpy2 refuses to perform any type coercion at all. This is quite a difference, which has to be resolved first, IMHO.\n\nConsidering my examples once again, the common API has no use if one has to convert code from\n\n```\nfrom pandas import Series, DataFrame\nprint(DataFrame({'a': [None, 1, 2, '3']}))\n```\n\nto\n\n```\nfrom rpy2.robjects import DataFrame, NA_Real\nprint(DataFrame({'a': [NA_Real if k is None else float(k) for k in [None, 1, 2, '3']]}))\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6383335",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1448#issuecomment-6383335",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1448",
    "id": 6383335,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODMzMzU=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-17T18:15:57Z",
    "updated_at": "2012-06-17T18:15:57Z",
    "author_association": "MEMBER",
    "body": "At some point I'd like to invest some time here, but the bottom line is that I think it would be in the interest of rpy2 development to make it easier for pandas users to use R through the interface-- you'd get more holdouts switching over to Python so they can continue using ggplot2 and various other R packages while doing 90+% of the real work in Python. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6383429",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1448#issuecomment-6383429",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1448",
    "id": 6383429,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODM0Mjk=",
    "user": {
      "login": "lgautier",
      "id": 650866,
      "node_id": "MDQ6VXNlcjY1MDg2Ng==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/650866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lgautier",
      "html_url": "https://github.com/lgautier",
      "followers_url": "https://api.github.com/users/lgautier/followers",
      "following_url": "https://api.github.com/users/lgautier/following{/other_user}",
      "gists_url": "https://api.github.com/users/lgautier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lgautier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lgautier/subscriptions",
      "organizations_url": "https://api.github.com/users/lgautier/orgs",
      "repos_url": "https://api.github.com/users/lgautier/repos",
      "events_url": "https://api.github.com/users/lgautier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lgautier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-17T18:26:14Z",
    "updated_at": "2012-06-17T18:26:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "The exercise here is to see whether a common interface can be worked out. Also, constructors are not the first on the list, as I see them as secondary for interoperabilty; the common interface would be here to promote duck typing (see original post at the top of the thread).\n\nRegarding claims of relative superior integration with Python, I'd like to bring the following snippet of code to your attention:\n\n``` python\n>>> import array\n>>> array.array([None, 1, 2, '3'])\nTypeError: must be char, not list\n>>> array.array('c', [None, 1, 2, '3'])\nTypeError: array item must be char\n>>> array.array('i', [None, 1, 2, '3'])\nTypeError: an integer is required\n>>> array.array('i', [None, 1, 2, 3])\nTypeError: an integer is required\n>>> array.array('i', [1, 2, 3])\narray('i', [1, 2, 3])\n```\n\nRpy2 vectors are designed both after R (it is here to expose to Python after all) and after Python native arrays.\nThe concept of missing values is originally absent from Python arrays (and Numpy seemed to have been struggling with concept).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6383455",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1448#issuecomment-6383455",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1448",
    "id": 6383455,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODM0NTU=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-17T18:28:42Z",
    "updated_at": "2012-06-17T18:28:42Z",
    "author_association": "MEMBER",
    "body": "Yes, I have had to implement pandas's own notion of NA. Support appears to be coming someday in NumPy but I'm not sure when. You could consider integrating NumPy with rpy2 at the C level since most rpy2 users are likely inputting data from NumPy arrays\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6384038",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1448#issuecomment-6384038",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1448",
    "id": 6384038,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODQwMzg=",
    "user": {
      "login": "lgautier",
      "id": 650866,
      "node_id": "MDQ6VXNlcjY1MDg2Ng==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/650866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lgautier",
      "html_url": "https://github.com/lgautier",
      "followers_url": "https://api.github.com/users/lgautier/followers",
      "following_url": "https://api.github.com/users/lgautier/following{/other_user}",
      "gists_url": "https://api.github.com/users/lgautier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lgautier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lgautier/subscriptions",
      "organizations_url": "https://api.github.com/users/lgautier/orgs",
      "repos_url": "https://api.github.com/users/lgautier/repos",
      "events_url": "https://api.github.com/users/lgautier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lgautier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-17T19:39:51Z",
    "updated_at": "2012-06-17T19:39:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Wes: I suppose I'd require a little more data about rpy2's usage to support claims about what is in its best interest. ;-) My understanding is that they are both doing comparatively well (from the download statistics) largely independently of one an other (if they were not someone else than me would have started that thread earlier).\n\nEasier usage is definitely something on which progress could be made; the catch is the R baggage I have to carry (again, rpy2 aims at exposing R), and I am favouring explicit over implicit (see Python's PEP20). Similarly, I think that pandas is carrying Numpy baggage.\n\nI am taking from that thread that for now both rpy2 and pandas crowds are relatively unaware of the motivations and capabilities of the other DataFrame (I consider myself in that situation as well - I do not know all the intricacies of pandas, I am convinced that design choices are sensible on both side).\n\nMy proposal is to see if a common interface can be found, and it does imply saying that the whole interface has to be common; the \"make your interface like ours first\" answer is probably a knee jerk reaction (I am not judgemental here, this might be a natural reaction... that's an unsolicited proposal in a way... may be something similar would have occured is posted on the rpy2 development site).\n\nWe can keep the tab open for now and think about it. I am taking home that there are solutions that would need to be found, but overall the idea is deemed interesting. I am also thinking that the R magic in the upcoming ipython might help identify usage patterns and directions for a common interface.\n\nPS: Regarding integration with Numpy through C, it has been present for years (in fact integration is going beyond Numpy since the rpy2 2.2.x series; it would play well with any Python instance implementing the Buffer API). Also I'd think that it is far from certain that most users have their data in Numpy first.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6384071",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1448#issuecomment-6384071",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1448",
    "id": 6384071,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODQwNzE=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-17T19:44:31Z",
    "updated_at": "2012-06-17T19:44:31Z",
    "author_association": "MEMBER",
    "body": "\"pandas is carrying Numpy baggage\"? Could you explain what you mean? \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6384105",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1448#issuecomment-6384105",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1448",
    "id": 6384105,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODQxMDU=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-17T19:48:46Z",
    "updated_at": "2012-06-17T19:48:46Z",
    "author_association": "MEMBER",
    "body": "Prevailing opinion in the Python community is that rpy2's integration with NumPy is not very good. I personally have found the API to be very difficult to work with. What I meant was you do not use the NumPy C API at all in the codebase; the buffer API is part of the story, but in my opinion you could provide a much better interface. I've heard stories that you're anti-NumPy because of the Numeric/numarray rift from pre-2005, any truth to that?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6384564",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1448#issuecomment-6384564",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1448",
    "id": 6384564,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzODQ1NjQ=",
    "user": {
      "login": "lgautier",
      "id": 650866,
      "node_id": "MDQ6VXNlcjY1MDg2Ng==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/650866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lgautier",
      "html_url": "https://github.com/lgautier",
      "followers_url": "https://api.github.com/users/lgautier/followers",
      "following_url": "https://api.github.com/users/lgautier/following{/other_user}",
      "gists_url": "https://api.github.com/users/lgautier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lgautier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lgautier/subscriptions",
      "organizations_url": "https://api.github.com/users/lgautier/orgs",
      "repos_url": "https://api.github.com/users/lgautier/repos",
      "events_url": "https://api.github.com/users/lgautier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lgautier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-17T20:48:13Z",
    "updated_at": "2012-06-17T20:48:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "##### \"\"pandas is carrying Numpy baggage\"? Could you explain what you mean? \"\n\nUnconditional dependency on Numpy.\n\nThe rest is really getting like something that should be on the rpy2 mailing-list or bitbucket page. I apologise for hijacking the pandas site but I will answer to the points. Feel free to move the discussion there after that if you think that this would be better places to continue.\n\n##### \"Prevailing opinion in the Python community is that rpy2's integration with NumPy is not very good\".\n\nIsn't this \"prevailing opinion in the Numpy community\" ? ;-)\n\nContributions are welcome, I'd say, or at least RFC or reporting of the issues met. I'd trust you that you find the API difficult to work with, but without more specifics it is difficult to know precisely whether this is because of insufficient documentation, planned extensions still missing, use cases not well covered by the design, or functionalities just absent.\n\nThere is a module within rpy2 dedicated to Numpy compatibility so additions could be put there. The Numpy C API is largely not needed because one can either use the Buffer API or expose R vectors as genuine Numpy arrays (without making a copy of the data if needed).\n\n##### \"I've heard stories that you're anti-NumPy because of the Numeric/numarray rift from pre-2005, any truth to that?\"\n\nI'll have to disappoint. Twice.\n- the Numeric/numarray episode is part of the (hi)story of \"numerical Python\". I would not have any comments to make about it beyond that this is an example of the development of Open Source projects not always following a straight path, and that it did not go into the Python standard library. I did support both Numeric and numarray with rpy2 in the beginning, and I was just relieved to drop that extra burden when it became clearer that Numpy was the way forward.\n- I am not anti-Numpy, and I have been using it (I would not have bothered with having a compatibility layer otherwise). However, I don't think that Numpy is the only way to have arrays in Python (the standard lib \"array\" can be a better lightweight case in some cases). I perceive the recent Buffer API in Python as a sign that I might not be alone to think so. Rpy2 is purposedly not made dependent on Numpy in order to let a Python developper chose whether it wants to use it or not (for example this let rpy2 be Python3-compatible before Numpy was).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6393540",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1448#issuecomment-6393540",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1448",
    "id": 6393540,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTM1NDA=",
    "user": {
      "login": "takluyver",
      "id": 327925,
      "node_id": "MDQ6VXNlcjMyNzkyNQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/327925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/takluyver",
      "html_url": "https://github.com/takluyver",
      "followers_url": "https://api.github.com/users/takluyver/followers",
      "following_url": "https://api.github.com/users/takluyver/following{/other_user}",
      "gists_url": "https://api.github.com/users/takluyver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/takluyver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/takluyver/subscriptions",
      "organizations_url": "https://api.github.com/users/takluyver/orgs",
      "repos_url": "https://api.github.com/users/takluyver/repos",
      "events_url": "https://api.github.com/users/takluyver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/takluyver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-18T11:21:49Z",
    "updated_at": "2012-06-18T11:21:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Unconditional dependency on Numpy.\n\nI don't think this is at all controversial nowadays. If you want to do scientific computing in Python, everything hinges on numpy. It's included by default in Python distributions like EPD and Python(x,y). Trying to make it a soft dependency for pandas would mean lots of poorly tested fallback code, and performance without numpy would likely be much worse.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/6394261",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1448#issuecomment-6394261",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1448",
    "id": 6394261,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzOTQyNjE=",
    "user": {
      "login": "lgautier",
      "id": 650866,
      "node_id": "MDQ6VXNlcjY1MDg2Ng==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/650866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lgautier",
      "html_url": "https://github.com/lgautier",
      "followers_url": "https://api.github.com/users/lgautier/followers",
      "following_url": "https://api.github.com/users/lgautier/following{/other_user}",
      "gists_url": "https://api.github.com/users/lgautier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lgautier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lgautier/subscriptions",
      "organizations_url": "https://api.github.com/users/lgautier/orgs",
      "repos_url": "https://api.github.com/users/lgautier/repos",
      "events_url": "https://api.github.com/users/lgautier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lgautier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-06-18T12:05:30Z",
    "updated_at": "2012-06-18T12:05:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "I am not saying that it should not, nor that there is any controversy. Just that it is the case, and this without any judgemental implication. The context to this is:\n- Rpy2 is exposing R, and as such has to carry over R's point of vue for arrays.\n- Similarly, Pandas is tightly coupled to Numpy and this entails a Numpy-centric vision of the world.\n- Can a common interface for DataFrame be found so a programmer can count on duck typing ?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/8346294",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1448#issuecomment-8346294",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1448",
    "id": 8346294,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNDYyOTQ=",
    "user": {
      "login": "dalejung",
      "id": 610115,
      "node_id": "MDQ6VXNlcjYxMDExNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/610115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dalejung",
      "html_url": "https://github.com/dalejung",
      "followers_url": "https://api.github.com/users/dalejung/followers",
      "following_url": "https://api.github.com/users/dalejung/following{/other_user}",
      "gists_url": "https://api.github.com/users/dalejung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dalejung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dalejung/subscriptions",
      "organizations_url": "https://api.github.com/users/dalejung/orgs",
      "repos_url": "https://api.github.com/users/dalejung/repos",
      "events_url": "https://api.github.com/users/dalejung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dalejung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-09-06T20:29:57Z",
    "updated_at": "2012-09-06T20:29:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Not sure if this is relevant to this issue but I've been playing around with the rpy2/pandas layer. \n\nhttps://github.com/dalejung/trtools/blob/master/trtools/rpy/conversion.py\n\nI've been using it whenever I'm in R. The conceit is that I'm assuming pandas DataFrames are going to be xts objects on the R side. Currently the conversion is manually with vectors having a to_py() method. It used to be automatic but I took that out since it seemed messy. \n\nI'm curious what the goal is? Bridging pandas and R objects is doable as is. I think the problem is that a pandas DataFrame encompasses multiple R object types and not just the base data.frame. If my DataFrames converted to data.frames it would be very inconvenient, more useful as xts with proper POSIXct indexes.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12266341",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1448#issuecomment-12266341",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1448",
    "id": 12266341,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMjY2MzQx",
    "user": {
      "login": "lgautier",
      "id": 650866,
      "node_id": "MDQ6VXNlcjY1MDg2Ng==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/650866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lgautier",
      "html_url": "https://github.com/lgautier",
      "followers_url": "https://api.github.com/users/lgautier/followers",
      "following_url": "https://api.github.com/users/lgautier/following{/other_user}",
      "gists_url": "https://api.github.com/users/lgautier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lgautier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lgautier/subscriptions",
      "organizations_url": "https://api.github.com/users/lgautier/orgs",
      "repos_url": "https://api.github.com/users/lgautier/repos",
      "events_url": "https://api.github.com/users/lgautier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lgautier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-15T13:24:31Z",
    "updated_at": "2013-01-15T13:24:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "On the R side objects would not have to be xts objects (and should not exclusively be xts objects in fact). What is proposed here is a common interface, in the sense of a common set of method names with identical behaviour. Conversion rules can be baked in at various levels, and that would be the bridge, but it could be unified at a later stage.\n\nAll that said, I don't think that the `pandas` team has much interest (I'd certainly be happy to stand corrected). The ipython team seems to have broader views and be more interested in getting a better all-around environment for numerical work in Python than turf war. I'd say that most efficient would be to tie effort around to what they are doing.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/12272065",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1448#issuecomment-12272065",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1448",
    "id": 12272065,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyMjcyMDY1",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-01-15T15:23:49Z",
    "updated_at": "2013-01-15T15:23:49Z",
    "author_association": "MEMBER",
    "body": "The community stands to benefit a great deal from increased rpy2<->pandas integration. I don't personally have a pressing need to work on it myself in the next few months, though, but probably will at some point.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/15038941",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1448#issuecomment-15038941",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1448",
    "id": 15038941,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MDM4OTQx",
    "user": {
      "login": "davclark",
      "id": 120710,
      "node_id": "MDQ6VXNlcjEyMDcxMA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/120710?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davclark",
      "html_url": "https://github.com/davclark",
      "followers_url": "https://api.github.com/users/davclark/followers",
      "following_url": "https://api.github.com/users/davclark/following{/other_user}",
      "gists_url": "https://api.github.com/users/davclark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davclark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davclark/subscriptions",
      "organizations_url": "https://api.github.com/users/davclark/orgs",
      "repos_url": "https://api.github.com/users/davclark/repos",
      "events_url": "https://api.github.com/users/davclark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davclark/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-18T04:35:43Z",
    "updated_at": "2013-03-18T04:39:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "While this is a tad off-topic, I'd point out that `convert_robj` here does a tolerable job of converting R proxy objects to pandas objects (though I'm terrified by the fact that the magic int value for NA is hard coded in the middle of this file): https://github.com/pydata/pandas/blob/master/pandas/rpy/common.py\n\nGiven the current NotImplementedError status of `ri2pandas`, integrating this code would seem to be pretty low-hanging fruit for getting better pandas <-> rpy2 interoperability.\n\nNote that R factors are converted to plain \"object\" Series (same as R character vectors), which I'm guessing means this was written before `pandas.Factor.from_array` was around. The following seems to work for Factors with missing values (although the regular Factor / Categorical constructor doesn't seem to accept missing values):\n\n```\npd.Factor.from_array(['a', 'b', None])\n```\n\nThere are other fixes you could make, but probably best to get such code integrated first (and agree where it belongs). I'd be happy to submit some patches for this if it sounds like a good idea.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/15054484",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1448#issuecomment-15054484",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1448",
    "id": 15054484,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MDU0NDg0",
    "user": {
      "login": "lgautier",
      "id": 650866,
      "node_id": "MDQ6VXNlcjY1MDg2Ng==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/650866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lgautier",
      "html_url": "https://github.com/lgautier",
      "followers_url": "https://api.github.com/users/lgautier/followers",
      "following_url": "https://api.github.com/users/lgautier/following{/other_user}",
      "gists_url": "https://api.github.com/users/lgautier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lgautier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lgautier/subscriptions",
      "organizations_url": "https://api.github.com/users/lgautier/orgs",
      "repos_url": "https://api.github.com/users/lgautier/repos",
      "events_url": "https://api.github.com/users/lgautier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lgautier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-18T13:29:27Z",
    "updated_at": "2013-03-18T13:29:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "`ri2pandas` is 2 weeks and 2 commits old while `convert_robj` is 3 year old.\n\nCheck it in action in an ipython notebook:\nhttps://plus.google.com/116424798545383828852/posts/jPfZ8VcTVi3\n\nI got to start with it because of posts on StackOverflow reporting that the pandas version was 1) returning errors and 2) requiring explicit conversion calls. To start, I addressed the use-case reported and that was pandas -> R. R->pandas is a stub returning a `NotImplementedError`, as you note it. It will be implemented as soon as I have a bit of time, or someone is submitting a patch. Having the converter for pandas, and unit tests, in the `rpy2` codebase is not mandatory, but given that it remained broken on the pandas end for a relatively long time I'd argue to have it close to the rpy2 source for now.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/15057162",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1448#issuecomment-15057162",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1448",
    "id": 15057162,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MDU3MTYy",
    "user": {
      "login": "davclark",
      "id": 120710,
      "node_id": "MDQ6VXNlcjEyMDcxMA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/120710?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davclark",
      "html_url": "https://github.com/davclark",
      "followers_url": "https://api.github.com/users/davclark/followers",
      "following_url": "https://api.github.com/users/davclark/following{/other_user}",
      "gists_url": "https://api.github.com/users/davclark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davclark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davclark/subscriptions",
      "organizations_url": "https://api.github.com/users/davclark/orgs",
      "repos_url": "https://api.github.com/users/davclark/repos",
      "events_url": "https://api.github.com/users/davclark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davclark/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-18T14:21:32Z",
    "updated_at": "2013-03-18T14:21:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Cool! I agree with your sentiment, @lgautier - the rationale for rpy2 is to serve as a glue layer, and it makes more sense for me that the conversion code lives in rpy2. In particular, this avoids pandas needing to rely on an actual R installation to perform tests (while rpy2 clearly already has this need).\n\nI looked at the issue tracker on bitbucket and there's nothing about the status of ri2pandas. I'm happy to help - if you already have a sense of what needs to be done and have the time, start an issue on bitbucket? At least something along the lines of \"collect errors from stackoverflow about pandas.rpy.common\"?\n\nI'd be happy to pull the general logic in convert_robj over from pandas, as it seems like a reasonable starting point (maybe with the addition of conversion to pandas Factors). But I'm open to direction.\n\nTangent: rpy2.interactive.ipython integration also looks awesome!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/15120102",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1448#issuecomment-15120102",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1448",
    "id": 15120102,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MTIwMTAy",
    "user": {
      "login": "lgautier",
      "id": 650866,
      "node_id": "MDQ6VXNlcjY1MDg2Ng==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/650866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lgautier",
      "html_url": "https://github.com/lgautier",
      "followers_url": "https://api.github.com/users/lgautier/followers",
      "following_url": "https://api.github.com/users/lgautier/following{/other_user}",
      "gists_url": "https://api.github.com/users/lgautier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lgautier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lgautier/subscriptions",
      "organizations_url": "https://api.github.com/users/lgautier/orgs",
      "repos_url": "https://api.github.com/users/lgautier/repos",
      "events_url": "https://api.github.com/users/lgautier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lgautier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-19T15:10:29Z",
    "updated_at": "2013-03-19T15:10:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "I wish to have the conversion is in rpy2 because the conversion system baked in rpy2 can solve this nicely (so I can demonstrate this with code) and the 2 projects (rpy2 and pandas) could have communicated more (we are all busy, I guess).\n\nOnce this is ironed out, the conversion eventually can be moved back to pandas (it might be the most natural place for it; rpy2's conversion system is designed to be extendable with 3rd-party converters). pandas would need R to test rpy2, but the reverse is that pandas is needed to test rpy2.\n\nI opened an issue: https://bitbucket.org/lgautier/rpy2/issue/123\n\nYou are welcome to contribute an implementation (unit tests are always appreciated). Comments about issues with the general conversion system in rpy2 are also welcome (I am already aware that it is far from perfect in many places). \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/35425586",
    "html_url": "https://github.com/pandas-dev/pandas/issues/1448#issuecomment-35425586",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/1448",
    "id": 35425586,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NDI1NTg2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-02-18T19:51:18Z",
    "updated_at": "2014-02-18T19:51:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "closing as not in pandas purview\n"
  }
]
