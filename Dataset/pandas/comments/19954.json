[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/369670889",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-369670889",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 369670889,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTY3MDg4OQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-01T17:41:42Z",
    "updated_at": "2018-03-01T17:41:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Not to derail the discussion from the get-go, but there's a closely related topic of how many \"nuisance\" ndarray methods we throw on the ExtensionArray base class to make writing code that's ndarray vs. extensionarray agnostic easier. For example `tolist`, which just calls `list(self)`. `.reshape`, which just returns `self`. The list goes on (and on)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/369676835",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-369676835",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 369676835,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTY3NjgzNQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-01T18:00:26Z",
    "updated_at": "2018-03-01T18:00:26Z",
    "author_association": "MEMBER",
    "body": "I was pretty happy with always returning an `ndarray` from `.values`, but we broke that a long time ago with `Categorical`. For consistency we should probably clean this up (even for existing extension arrays), but unfortunately this will be a painful compatibility break.\r\n\r\nI think my preferred option would be to make `obj.values` always return the underlying `ExtensionArray`, guaranteed to be the same data without any copies (so it can be modified in place). For converting to NumPy, we should probably add a `obj.to_numpy()` method on Series/DataFrame that is basically sugar for `np.asarray(obj)`\r\n\r\n> datetine64ns(UTC&naive)\r\n\r\nNumPy's datetime64 is now always timezone naive, not UTC. I guess you meant the times are converted into UTC before being passed into NumPy?\r\n\r\n> there's a closely related topic of how many \"nuisance\" ndarray methods we throw on the ExtensionArray base class to make writing code that's ndarray vs. extensionarray agnostic easier\r\n\r\nMy preference would be to make the base class as abstract as possible, only implementing methods that are actually used by pandas. This will minimize the effort required to author new ExtensionArray classes, rather than requiring that authors override pre-existing methods.  Extension arrays should be a low-level interface -- we already have the high-level interface for extension arrays in Series/DataFrame."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/369689664",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-369689664",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 369689664,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTY4OTY2NA==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-01T18:43:48Z",
    "updated_at": "2018-03-01T18:43:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I think my preferred option would be to make obj.values always return the underlying ExtensionArray, guaranteed to be the same data without any copies (so it can be modified in place). For converting to NumPy, we should probably add a obj.to_numpy() method on Series/DataFrame that is basically sugar for np.asarray(obj)\r\n\r\n+1 on this.  I think the break in compatibility is less painful than the inconsistency and current situation of, e.g. `PeriodIndex.values` having very surprising performance costs.\r\n\r\nxref to #15750 - was about changing the return type of tz-aware datetimes to boxed scalars.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/369706257",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-369706257",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 369706257,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2OTcwNjI1Nw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-01T19:39:14Z",
    "updated_at": "2018-03-01T19:39:14Z",
    "author_association": "CONTRIBUTOR",
    "body": ">  I guess you meant the times are converted into UTC before being passed into NumPy?\r\n\r\nYep\r\n\r\nI think I share the preference for `.values` being the actual array backing the data (even though that's not always possible with `DataFrame.values`).\r\n\r\nAlso +1 for a `to_numpy` method on Series / Index / Frame, with the same copy vs. view behavior as `asarray`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/378692241",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-378692241",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 378692241,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODY5MjI0MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T18:05:13Z",
    "updated_at": "2018-04-04T18:05:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Are people OK with `Series[datetime64ns].values` being an ndarray, but `Series[datetime64ns, tz].values` an ExtensionArray? That seems potentially confusing."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/378694359",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-378694359",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 378694359,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODY5NDM1OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T18:11:46Z",
    "updated_at": "2018-04-04T18:12:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "it has been this way for a long time\r\nwe should change the former to be honest - but last time there were some objections"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/378695771",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-378695771",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 378695771,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODY5NTc3MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T18:16:20Z",
    "updated_at": "2018-04-04T18:16:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "> it has been this way for a long time\r\n\r\nWhat do you mean by that?\r\n\r\n>  we should change the former to be honest - but last time there were some objections\r\n\r\nWhy would we change tz-naive to return anything other than a datetime64[ns] ndarray?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/378695782",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-378695782",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 378695782,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODY5NTc4Mg==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T18:16:21Z",
    "updated_at": "2018-04-04T18:16:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "As stated above I'm OK with the inconsistency, but see where it could be surprising. \r\n\r\nAnother option would be to deprecate `.values` in favor of an explicit `to_numpy()` and another accessor that always returns the backing array, numpy or not, something like `Series.array`?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/378696849",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-378696849",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 378696849,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODY5Njg0OQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T18:19:51Z",
    "updated_at": "2018-04-04T18:20:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "> As stated above I'm OK with the inconsistency, but see where it could be surprising.\r\n\r\n👍 . I wanted to get some explicit thoughts on that one, since I didn't initially comprehend that two seemingly similar types could have different outcomes.\r\n\r\n> another accessor that always returns the backing array\r\n\r\nYes. We'll want something like that. Internally, we've used `._values` and `._ndarray_values`. I like the name `array`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433416155",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-433416155",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 433416155,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzQxNjE1NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-26T13:55:40Z",
    "updated_at": "2018-10-26T13:55:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "Let's start with goals and work backwards to an API\r\n\r\n1. I want the actual array that's backing this Series / Index.\r\n   I cannot afford a copy.\r\n2. I want an ndarray holds the same values as the backing array.\r\n   This ndarray may not be the actual one backing the Series / Index,\r\n   and getting it may involve some data copying / coercion. I'm willing\r\n   to lose some information (categorical types, timezone, etc.), but I\r\n   need to be able to unambiguously identify a value (i.e. I want the\r\n   category `'a'` not the code `0`. Not sure about tzinfo here...).\r\n3. I want some kind of array that represents the data backing the array.\r\n   I'd really like to avoid data copying / coercion (think Categorical.codes,\r\n   PeriodArray.asi8, etc). I'm willing to lose information to avoid copying\r\n   data unnecessarily.\r\n\r\nI think getting 1 and 2 right are necessary. 3 would be a nice thing to have, but I wouldn't\r\nconsider it a blocker for 0.24.0.\r\n\r\nI also think that \"fixing\" `.values` isn't something we can do at this point. The\r\ncurrent behavior is inconsistent between EAs, and adding new EAs would force us to\r\nbreak API or break consistency with Categorical.\r\n\r\nSo, I propose avoiding that fight. Let's use new names to achieve the behavior we want.\r\nThis seems important enough to warrant the API bloat, and I think we can remove mentions\r\nof `.values` in the docs, so we're net +2 properties here.\r\n\r\n---\r\n\r\nHere's a concrete proposal. I still need to go through all our EAs to figure out an\r\nexact set of behavior (`datetime64[ns, tz]` may be particularly troublesome).\r\n\r\n```python\r\n@property\r\ndef array(self) -> Union[ndarray, ExtensionArray]:\r\n    \"\"\"Return the array backing this Series or Index\r\n\r\n    Examples\r\n    --------\r\n    >>> arr = pd.core.arrays.period_array(['2000', '2001'], freq='A')\r\n    >>> ser = pd.Series(arr)\r\n    >>> ser.array\r\n    <PeriodArray>\r\n    ['2000', '2001']\r\n    Length: 2, dtype: period[A-DEC]\r\n    \"\"\"\r\n    return self._values\r\n\r\n\r\n@property\r\ndef numpy_array(self) -> ndarray:\r\n    \"\"\"Return a NumPy array of this object's values.\r\n\r\n    This may or may not require a copy or coercion of values.\r\n    For dtypes that can be represented by NumPy, this will be a view on\r\n    the actual values. For ExtensionArrays, this will likely be an object-dtype\r\n    ndarray that losslessly represents the values.\r\n\r\n    Examples\r\n    --------\r\n    >>> arr = pd.core.arrays.period_array(['2000', '2001'], freq='A')\r\n    >>> ser = pd.Series(arr)\r\n    >>> ser.numpy_array\r\n    array([Period('2000', 'A-DEC'), Period('2001', 'A-DEC')], dtype=object)\r\n    \"\"\"\r\n    return np.asarray(self._values)\r\n\r\n\r\n@property\r\ndef ndarray_values(self) -> ndarray:\r\n    \"\"\"Return a NumPy array representing the values in this object.\r\n\r\n    This should be faster to compute than ``self.numpy_array``, but will\r\n    require additional context to interpret.\r\n    Examples\r\n    --------\r\n    >>> arr = pd.core.arrays.period_array(['2000', '2001'], freq='A')\r\n    >>> ser = pd.Series(arr)\r\n    >>> ser.ndarray_values\r\n    array([30, 31])\r\n    \"\"\"\r\n    return self._ndarray_values\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433437695",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-433437695",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 433437695,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzQzNzY5NQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-26T14:59:46Z",
    "updated_at": "2018-10-26T14:59:46Z",
    "author_association": "MEMBER",
    "body": "@TomAugspurger I like this general idea, but let me suggest two refinements:\r\n- `numpy_array` should be a `to_numpy()` method (because the NumPy array is sometimes created on the fly)\r\n- Instead of `ndarray_values`, call it something slightly more descriptive -- maybe `raw_array` or `base_array`? This property also might not be defined on all extension arrays, e.g., if they are written on top of arrow."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433441127",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-433441127",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 433441127,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzQ0MTEyNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-26T15:09:41Z",
    "updated_at": "2018-10-26T15:09:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "why would this not be on top of an arrow backed array? the point of EA is to completely hide this detail"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433443978",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-433443978",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 433443978,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzQ0Mzk3OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-26T15:18:16Z",
    "updated_at": "2018-10-26T15:18:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "> numpy_array should be a to_numpy() method (because the NumPy array is sometimes created on the fly)\r\n\r\nI was viewing this as a `.values` replacement, which is why I went with a property initially. But if I were designing this from scratch I would certainly make it a method... I'm not sure how to balance these two. I think right now a method would be preferable here, but I could go either way.\r\n\r\n> Instead of ndarray_values, call it something slightly more descriptive -- maybe raw_array or base_array?\r\n\r\nMmm, yes that's a good point... I would need to look at this. In several places, like in our indexing engines, I think we really need an ndarray right now.\r\n\r\n> why would this not be on top of an arrow backed array? the point of EA is to completely hide this detail\r\n\r\nI'm not sure what you mean. Were you responding to my proposal or Stehpan's comments?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433459174",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-433459174",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 433459174,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzQ1OTE3NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-26T16:05:18Z",
    "updated_at": "2018-10-26T16:05:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "I was responding to stephan\r\n\r\nan arrow backed extension arrow is nothing special as far as pandas is concerned "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433462346",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-433462346",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 433462346,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzQ2MjM0Ng==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-26T16:15:30Z",
    "updated_at": "2018-10-26T16:15:30Z",
    "author_association": "MEMBER",
    "body": "> an arrow backed extension arrow is nothing special as far as pandas is concerned\r\n\r\nYou can turn an arrow backed extension arrow into a NumPy array (possibly with a copy) or you can access it as an extension array, but there isn't necessarily any equivalent of a \"raw numpy array\" underlying the values that you can directly mutate to change the values in a `pandas.Series`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433470524",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-433470524",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 433470524,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzQ3MDUyNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-26T16:42:16Z",
    "updated_at": "2018-10-26T16:42:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@shoyer of course but how does this actually matter - again the actual implementation of the EA is irrelevant, except when we ask it give us a raw set of values and even that is transparent"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433471985",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-433471985",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 433471985,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzQ3MTk4NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-26T16:47:16Z",
    "updated_at": "2018-10-26T17:27:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think whether or not this has to be an ndarray depends on how it's (intended) to be used. Is the primary motivation\r\n\r\n1. a fast (but maybe not zero copy) representation of the data as an ndarray, so that I can do ndarray-like things to it? Or,\r\n2. A fast array-like representation of the data, no copies allowed.\r\n\r\nI was proposing the first, hence the name `ndarray_values`. But perhaps the second is what people want? This one is kind of ambiguous.\r\n\r\nRight now, we seem to use `IndexOpsMixin._ndarray_values` a lot in the indexing engines. I suspect that needs to be an ndarray, and not an Arrow array (or buffer), but I haven't looked."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433485251",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-433485251",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 433485251,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzQ4NTI1MQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-26T17:32:51Z",
    "updated_at": "2018-10-26T17:32:51Z",
    "author_association": "MEMBER",
    "body": "> 2. A fast array-like representation of the data, no copies allowed.\r\n\r\nThis is definitely the use-case I had in mind. This can be convenient, e.g., for cases where you want to modify the NumPy array in place.\r\n\r\nNote that this is definitely possible for some but not all arrow based arrays. For example, if you have integers or floats without any missing values.\r\n\r\n> 1. a fast (but maybe not zero copy) representation of the data as an ndarray, so that I can do ndarray-like things to it?\r\n\r\nI think this is covered by `to_numpy()`?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433515649",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-433515649",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 433515649,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzUxNTY0OQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-26T19:18:10Z",
    "updated_at": "2018-10-26T19:18:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "> > 1. a fast (but maybe not zero copy) representation of the data as an ndarray, so that I can do ndarray-like things to it?\r\n\r\n> I think this is covered by to_numpy()?\r\n\r\nNot the \"fast\" requirement though. For e.g. PeriodIndex, `PeriodIndex.to_numpy()` would be an ndarray of objects, which is expensive to create.\r\n\r\nMy last argument in favor of `ndarray_values -> ndarray` over a `raw_array -> ArrayLike` is that the `.raw_array` use-case isn't clear to me. The return type of `.raw_array` would be deliberately broad (since ExtensionArray makes no claims about the actual physical storage). So use it, you would have to know something about what the actual type is in your case. And if you're doing something specific to your array type, why not do `series.array.<type-specific-thing>`?\r\n\r\nThe usage for `ndarray_values` is a bit clearer to me. If you have some algorithm that has to operate on a ndararys, you *may* be able to use the algorithm on `ndarray_values` and then reconstruct the real result using additional information that you've held onto separately (think factorize, sorting).\r\n\r\nAs a final note, I think this `ndarray_values` / `raw_array` is the fuzziest concept out of the 3, and should not necessarily block progression on `.to_numpy()` (method or property) and `.array`."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/433534180",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-433534180",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 433534180,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMzUzNDE4MA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-26T20:29:46Z",
    "updated_at": "2018-10-26T20:30:05Z",
    "author_association": "MEMBER",
    "body": "> My last argument in favor of ndarray_values -> ndarray over a raw_array -> ArrayLike is that the .raw_array use-case isn't clear to me. The return type of .raw_array would be deliberately broad (since ExtensionArray makes no claims about the actual physical storage). So use it, you would have to know something about what the actual type is in your case. And if you're doing something specific to your array type, why not do series.array.<type-specific-thing>?\r\n\r\nI totally agree here, I was just proposing a different name for the same use-case:\r\n```\r\n@property\r\ndef raw_numpy_array_values(self) -> np.ndarray:\r\n    # raises an error if the extension array doesn't support it\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436041072",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-436041072",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 436041072,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjA0MTA3Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-05T21:26:33Z",
    "updated_at": "2018-11-05T21:26:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "One last question here... I've implicitly assumed that `ndarray_values` / `to_numpy` are 1-D ndarrays. Is that a safe assumption? I could see *a* case for e.g. `IntervalArray` returning a 2-D NumPy array, or a structured array with `left` and `right` fields.\r\n\r\nI don't think that allowing this to be a 2-D will be that useful in practice. I suspect that places using these arrays are likely to expect 1-D arrays. But I figured I'd throw this out there so we can at least reject it, and document that they should be 1-D."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436334397",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-436334397",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 436334397,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjMzNDM5Nw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-06T17:18:06Z",
    "updated_at": "2018-11-06T17:18:06Z",
    "author_association": "MEMBER",
    "body": "Personally I would leave the `ndarray_values` or `raw_numpy_array_values` idea out of the public API on the *containers*. This concept will inherently be inconsistent between EAs, as it will only be possible for some of the EAs. As @shoyer noted this concept might not be possible for certain arrow-backed EAs, but another typical example is our own IntervalArray which is backed by two ndarrays (left/right). \r\n\r\nOf course, as @shoyer mentions, we can raise an error for this attribute if there is no clear no-copy option available. But then a user would need to be aware of the specific data type/EA that is being used, so then why not use EA-specific API to do this? \r\nFor example for this mentioned use case:\r\n\r\n> If you have some algorithm that has to operate on a ndararys, you may be able to use the algorithm on ndarray_values and then reconstruct the real result using additional information that you've held onto separately (think factorize, sorting).\r\n\r\nand if you have a PeriodArray. Then you know how a PeriodArray works: it consistent of integers and a freq, so you can use the public PeriodArray.asi8 to access those integers, do something with it, and then reconstruct a PeriodArray from the integers and the freq. \r\n\r\nI would say that each ExtensionArray that wants to enable such manipulation, can provide it's own access to the underlying data, because this will differ for each array anyhow? (eg for PeriodArray, you already need to know you need to keep track of freq to reconstruct it, so then you can also use a specific attribute to access the data?)  \r\n(and of course, having a somewhat consistent API eg across all datetime-like arrays is certainly nice, but that is something we can ensure for our own EAs)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436335425",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-436335425",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 436335425,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjMzNTQyNQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-06T17:21:09Z",
    "updated_at": "2018-11-06T17:21:09Z",
    "author_association": "MEMBER",
    "body": "Regarding `to_numpy()`: I agree with the reasons mentioned above to have it as a method and not an attribute, but another reason for having it as a method is that we then can provide options. \r\nEg, for datetime tz, the user could choose to get it as object array with tz retained, or as UTC-converted naive M8[ns]."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436336298",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-436336298",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 436336298,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjMzNjI5OA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-06T17:23:37Z",
    "updated_at": "2018-11-06T17:23:37Z",
    "author_association": "MEMBER",
    "body": "> One last question here... I've implicitly assumed that ndarray_values / to_numpy are 1-D ndarrays. Is that a safe assumption?\r\n\r\nAnd to answer your actual last question: giving our current constraint of 1D ExtensionArrays, I think it would be a good assumption that `to_numpy` always gives 1-D arrays as well (for Series/Index/Array of course, DataFrame is something else). \r\nRelated to what I said above: of users would want a 2D array of left/right values for IntervalArray, then can already use the EA-specific API to do that.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436338565",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-436338565",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 436338565,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjMzODU2NQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-06T17:30:14Z",
    "updated_at": "2018-11-06T17:30:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Alrighty thanks Joris.\r\n\r\n> we then can provide options.\r\n\r\nWhat would the function signature be for your `Series.to_numpy`? `**kwargs`? Or would pandas dictate what's allowed there?\r\n\r\nI'll get started on a PR implementing this.\r\n\r\n```python\r\n@property\r\ndef array(self) -> Union[ndarray, ExtensionArray]:\r\n    \"\"\"Return the array backing this Series or Index\r\n\r\n    Examples\r\n    --------\r\n    >>> arr = pd.core.arrays.period_array(['2000', '2001'], freq='A')\r\n    >>> ser = pd.Series(arr)\r\n    >>> ser.array\r\n    <PeriodArray>\r\n    ['2000', '2001']\r\n    Length: 2, dtype: period[A-DEC]\r\n    \"\"\"\r\n    return self._values\r\n\r\n\r\n@property\r\ndef to_numpy(self) -> ndarray:\r\n    \"\"\"Return a NumPy array of this object's values.\r\n\r\n    This may or may not require a copy or coercion of values.\r\n    For dtypes that can be represented by NumPy, this will be a view on\r\n    the actual values. For ExtensionArrays, this will likely be an object-dtype\r\n    ndarray. Equality will be preserved (values in the array that were equal\r\n    before will be equal in the ndarray; likewise for values that were unequal.\r\n    However, the dtype information may be lost (e.g. categories for a Categorical).\r\n\r\n    Examples\r\n    --------\r\n    >>> arr = pd.core.arrays.period_array(['2000', '2001'], freq='A')\r\n    >>> ser = pd.Series(arr)\r\n    >>> ser.numpy_array\r\n    array([Period('2000', 'A-DEC'), Period('2001', 'A-DEC')], dtype=object)\r\n    \"\"\"\r\n    return np.asarray(self._values)\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436345938",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-436345938",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 436345938,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjM0NTkzOA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-06T17:52:30Z",
    "updated_at": "2018-11-06T17:52:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "What to do about datetime and datetimetz (cc @jbrockmendel)? Here's a proposal.\r\n\r\n\r\ndtype              | array                    | to_numpy\r\n------------------ | -------------------------| --------\r\ndatetime64[ns]     | DatetimeArray            | ndarray[datetime64[ns]] (view)\r\ndatetime64[ns, tz] | DatetimeArray            | ndarray[object] (Timestamp)\r\ntimedelta64[ns]    | ndarray[timedelta64[ns]] | ndarray[timedelta64[ns]] (view)\r\n\r\n\r\nAlternatives:\r\n\r\n- `Series[datetime64[ns]].array` could return an `ndarray[datetime64[ns]]`. But that's inconsistent with `.array` for `datetime64[ns, tz]`, and you have `to_numpy()` if you want that. I don't know which is better here.\r\n- `Series[datetime64[ns, tz]].to_numpy()` can avoid conversion to object by converting to UTC and stripping timezone info. That would satisfy this \"equality preservation\" requirement I have in mind for `to_numpy` (things that were equal before will continue to be equal after `to_numpy()`. same for not equal)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436357737",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-436357737",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 436357737,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjM1NzczNw==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-06T18:28:22Z",
    "updated_at": "2018-11-06T18:28:22Z",
    "author_association": "MEMBER",
    "body": "`_ndarray_values` has been around for a few months now, so a few questions and comments:\r\n\r\n- Do we have a read on what the common use cases are?\r\n- Is anyone using e.g. `Interval(Index|Array)._ndarray_values`?  (i.e. the expensive-to-construct one)\r\n- Is anyone using `PeriodArray._ndarray_values` or` DatetimeTZ._ndarray_values`? (i.e. the lossy ones)\r\n- e.g. is it the case that in 99+% of use cases `_ndarray_values` is only useful when lossless and/or copyless?\r\n- Is the proposal to implement `to_numpy` in addition to `_ndarray_values` or to replace it? (with deprecation cycle where relevant)\r\n- do we get anything from `foo._ndarray_values` that we don't get from `np.array(foo)`?  (at least in principle assuming `__array__` were implemented where relevant)\r\n- `to_numpy` seems like it adds value over `np.array(foo)` by virtue of require-lossless or require-cheap kwargs.\r\n- are we going to add separate `to_arrow` down the road or combine that into `to_numpy`?  If the latter, should it have a more generic name?\r\n- does the `array` property (eventually) replace `values`/`_values`?  Does/can/should it have any relation to internal_values/external_values/formatting_values?\r\n- Is it relevant that with DatetimeArray in place we _may_ be able to make .values==._values==always-lossless in the not-too-distant-future (and maybe^2 eventually remove one of them)?\r\n\r\nThe use cases question is the one I think would be most helpful to have information on.\r\n\r\n@TomAugspurger w/r/t the datetime/timedelta table above: I'd return pd.TimedeltaArray for the timedelta64[ns] case (just barely enough of our behavior differs from numpy's to make that meaningful).  For the datetimeTZ case I think this the perfect example for why a lossless vs cheap kwarg would add value."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436372349",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-436372349",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 436372349,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjM3MjM0OQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-06T19:10:41Z",
    "updated_at": "2018-11-06T19:10:41Z",
    "author_association": "MEMBER",
    "body": "> Personally I would leave the ndarray_values or raw_numpy_array_values idea out of the public API on the containers. This concept will inherently be inconsistent between EAs, as it will only be possible for some of the EAs.\r\n\r\nSounds good to me. `.array` and `.to_numpy()` seems like enough."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436374598",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-436374598",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 436374598,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjM3NDU5OA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-06T19:17:31Z",
    "updated_at": "2018-11-06T19:18:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Uses of ndarray_values\r\n\r\n- Index.itemsize (deprecated)\r\n- Index.strides (deprecated)\r\n- Index._engine\r\n- Index set ops\r\n- Index.insert\r\n- DatetimeIndex.unique\r\n- MultiIndex.equals\r\n- pytables._convert_index (shared across integer and period)\r\n\r\nThere are a few other uses (mostly datetime / timedelta / period) that could maybe uses asi8 instead. I'm not familiar enough with indexing to know whether that can operate on something other than ndarrays. In theory, EAs can implement the buffer protocol, which would get the data to cython. But I don't know what ops would be required when we're down there.\r\n\r\n> Is anyone using PeriodArray._ndarray_values or DatetimeTZ._ndarray_values? (i.e. the lossy ones)\r\n\r\nYes, when writing to HDF5.\r\n\r\n> Is the proposal to implement to_numpy in addition to _ndarray_values or to replace it? (with deprecation cycle where relevant)\r\n\r\n`to_numpy` and `_ndarary_values` represent two different concepts. One wouldn't replace the other. I think we're mostly ignoring `_ndarray_values` at least for the initial pass here.\r\n\r\n> do we get anything from foo._ndarray_values that we don't get from np.array(foo)? (at least in principle assuming __array__ were implemented where relevant)\r\n\r\nYes, cases where you can store type information separate from the values (e.g. writing to HDF5). With `np.array(foo)`, the type information is just dropped.\r\n\r\n> are we going to add separate to_arrow down the road or combine that into to_numpy? If the latter, should it have a more generic name?\r\n\r\nPossibly, and no I don't think so. The goal of `to_numpy` is to satisfy places that really do need an ndarary.\r\n\r\n> does the array property (eventually) replace values/_values? Does/can/should it have any relation to internal_values/external_values/formatting_values?\r\n\r\nYes. IMO we can replace uses of `._values` with `._array` once DatetimeArray is done. I think that we're closeish to removing all the `internal_values` / `external_values` stuff. `formatting_values` will stick around.\r\n\r\n> Is it relevant that with DatetimeArray in place we may be able to make .values==._values\r\n\r\nMy proposal is to not touch `.values` (backwards compat). My unstated goal is to eventually remove uses of it from the pandas docs, and encourage `.array` or `.to_numpy()` depending on the use case.\r\n\r\n>  I'd return pd.TimedeltaArray for the timedelta64[ns] case (just barely enough of our behavior differs from numpy's to make that meaningful).\r\n\r\nI was hoping to keep `TimedeltaArray` completely invisible to users, since NumPy's `timedelta64[ns]` is sufficient for us. I viewed `TimedeltaArray` as an internal class to make sharing code between DatetimelikeArray easier."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/436409657",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19954#issuecomment-436409657",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19954",
    "id": 436409657,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjQwOTY1Nw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-06T21:10:35Z",
    "updated_at": "2018-11-06T21:17:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "One more edge case: MultiIndex.\r\n\r\nProposal:\r\n\r\n- MultiIndex.array -> `ValueError`?\r\n- `MultiIndex.to_numpy() -> ndarray[object]` (tuples)\r\n\r\nI'd raise for `MultiIndex.array`, since there isn't an actual array backing it."
  }
]
