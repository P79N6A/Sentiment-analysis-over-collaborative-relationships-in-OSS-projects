[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/86259377",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9732#issuecomment-86259377",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9732",
    "id": 86259377,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MjU5Mzc3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-26T00:09:05Z",
    "updated_at": "2015-03-26T00:09:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "So the typical way to thing about how slices are interpreted is [49], where slices are partial string indexing, see [here](http://pandas.pydata.org/pandas-docs/stable/timeseries.html#datetimeindex-partial-string-indexing).\n\nThis basically expands a partial date to be inclusive of times for that date, e.g. '2011-01-02' is implicity '2011-01-02 11:59:59.999999999'\n\nHowever for straight indexing, these values are simply converted as is, e.g. '2011-01-02' -> '2011-01-02 00:00:00.000000000'.\n\nI think these should be consistent, so we'll call this a bug. Though this may be a bit tricky to fix, see `core/ops._comp_method_SERIES`. And prob should only use partial indexing for ge,gt,le,lt.\n\n```\nIn [46]: df = pd.DataFrame({'date' : rng, 'value' : range(len(rng))})\n\nIn [47]: df2 = df.set_index('date')\n\nIn [48]: df2     \nOut[48]: \n                     value\ndate                      \n2011-01-01 00:00:00      0\n2011-01-01 01:00:00      1\n2011-01-01 02:00:00      2\n2011-01-01 03:00:00      3\n2011-01-01 04:00:00      4\n...                    ...\n2011-01-03 19:00:00     67\n2011-01-03 20:00:00     68\n2011-01-03 21:00:00     69\n2011-01-03 22:00:00     70\n2011-01-03 23:00:00     71\n\n[72 rows x 1 columns]\n\nIn [49]: df2['2011-01-01':'2011-01-02']\nOut[49]: \n                     value\ndate                      \n2011-01-01 00:00:00      0\n2011-01-01 01:00:00      1\n2011-01-01 02:00:00      2\n2011-01-01 03:00:00      3\n2011-01-01 04:00:00      4\n...                    ...\n2011-01-02 19:00:00     43\n2011-01-02 20:00:00     44\n2011-01-02 21:00:00     45\n2011-01-02 22:00:00     46\n2011-01-02 23:00:00     47\n\n[48 rows x 1 columns]\n\nIn [50]: df2[(df2.index >= '2011-01-01') & (df2.index <= '2011-01-02')]\nOut[50]: \n                     value\ndate                      \n2011-01-01 00:00:00      0\n2011-01-01 01:00:00      1\n2011-01-01 02:00:00      2\n2011-01-01 03:00:00      3\n2011-01-01 04:00:00      4\n...                    ...\n2011-01-01 20:00:00     20\n2011-01-01 21:00:00     21\n2011-01-01 22:00:00     22\n2011-01-01 23:00:00     23\n2011-01-02 00:00:00     24\n\n[25 rows x 1 columns]\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/86264818",
    "html_url": "https://github.com/pandas-dev/pandas/issues/9732#issuecomment-86264818",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/9732",
    "id": 86264818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MjY0ODE4",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-26T00:30:08Z",
    "updated_at": "2015-03-26T00:30:08Z",
    "author_association": "MEMBER",
    "body": "I'm actually a little surprised this works -- you can't compare either Timestamp or np.datetime64 arrays to strings.\n\nBut, I agree with @jreback that this is a nice feature and it would be good to fix it.\n"
  }
]
