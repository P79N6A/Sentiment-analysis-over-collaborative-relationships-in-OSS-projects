[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/151284627",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11433#issuecomment-151284627",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11433",
    "id": 151284627,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MTI4NDYyNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-26T21:05:23Z",
    "updated_at": "2015-10-26T21:05:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "This patch will fix it. needs an asv benchmark though. Want to do a pull-request?\n\n```\ndiff --git a/pandas/core/series.py b/pandas/core/series.py\nindex 2fc90ef..9103cdf 100644\n--- a/pandas/core/series.py\n+++ b/pandas/core/series.py\n@@ -169,19 +169,24 @@ class Series(base.IndexOpsMixin, generic.NDFrame):\n                         index = Index(data)\n                     else:\n                         index = Index(_try_sort(data))\n+\n                 try:\n                     if isinstance(index, DatetimeIndex):\n-                        # coerce back to datetime objects for lookup\n-                        data = _dict_compat(data)\n-                        data = lib.fast_multiget(data, index.astype('O'),\n-                                                 default=np.nan)\n+                        if len(data):\n+                            # coerce back to datetime objects for lookup\n+                            data = _dict_compat(data)\n+                            data = lib.fast_multiget(data, index.astype('O'),\n+                                                     default=np.nan)\n+                        else:\n+                            data = np.nan\n                     elif isinstance(index, PeriodIndex):\n-                        data = [data.get(i, nan) for i in index]\n+                        data = [data.get(i, nan) for i in index] if len(data) else np.nan\n+\n                     else:\n                         data = lib.fast_multiget(data, index.values,\n                                                  default=np.nan)\n                 except TypeError:\n-                    data = [data.get(i, nan) for i in index]\n+                    data = [data.get(i, nan) for i in index] if len(data) else np.nan\n\n             elif isinstance(data, SingleBlockManager):\n                 if index is None:\n```\n"
  }
]
