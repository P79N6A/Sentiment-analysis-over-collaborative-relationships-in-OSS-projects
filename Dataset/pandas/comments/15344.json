[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/278319419",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15344#issuecomment-278319419",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15344",
    "id": 278319419,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODMxOTQxOQ==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-08T12:44:40Z",
    "updated_at": "2017-02-08T12:44:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "Partly guessing, but I think https://www.python.org/dev/peps/pep-0393/ could be the culprit.  Python 3 can choose a compact string representation, then the C API calls the json code is using could force it into a less compact representation.\r\n\r\nhttps://docs.python.org/3/whatsnew/3.3.html#pep-393-flexible-string-representation\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/278341407",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15344#issuecomment-278341407",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15344",
    "id": 278341407,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODM0MTQwNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-08T14:22:09Z",
    "updated_at": "2017-02-08T14:22:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "the absolute sizes of memory used are dependent on py2/py3 as @chris-b1 indicates.\r\n\r\nSo strings are held in python space, backed by pointers from numpy. This IS using the c-api; I would hazard a guess that strings that were formerly interned are now no longer. This is pretty deep. \r\n\r\nIf anyone wants to investigate please do so. Though I would say this is out of pandas hands."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/278361957",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15344#issuecomment-278361957",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15344",
    "id": 278361957,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODM2MTk1Nw==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-08T15:34:39Z",
    "updated_at": "2017-02-08T15:36:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "It does look like `ujson` was updated to use the new C API - so if you wanted to try porting this back in, may not be too hard.\r\n\r\nours - https://github.com/pandas-dev/pandas/blob/bf1a5961a09a6f5237a681f9f1c9a698b1a13918/pandas/src/ujson/python/objToJSON.c#L402\r\n\r\ntheirs - https://github.com/esnme/ultrajson/blob/2f1d4874f4f4d2a40a460678004c80e69387c663/python/objToJSON.c#L143\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/278428328",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15344#issuecomment-278428328",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15344",
    "id": 278428328,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3ODQyODMyOA==",
    "user": {
      "login": "tobgu",
      "id": 485836,
      "node_id": "MDQ6VXNlcjQ4NTgzNg==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/485836?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tobgu",
      "html_url": "https://github.com/tobgu",
      "followers_url": "https://api.github.com/users/tobgu/followers",
      "following_url": "https://api.github.com/users/tobgu/following{/other_user}",
      "gists_url": "https://api.github.com/users/tobgu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tobgu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tobgu/subscriptions",
      "organizations_url": "https://api.github.com/users/tobgu/orgs",
      "repos_url": "https://api.github.com/users/tobgu/repos",
      "events_url": "https://api.github.com/users/tobgu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tobgu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-08T19:04:17Z",
    "updated_at": "2017-02-08T19:04:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, there seems to be quite a few updates in `uson` since the version that is present in Pandas. It does not seem to me like it has with interning to do but rater that single byte ascii characters are turned into full blown 4 byte unicode characters based on the basic experiment below.\r\n\r\nHaving a dataframe dominated by long strings would hence mean that the memory usage would be quadrupled after calling `to_json` compared to before.\r\n\r\n```python\r\n>>> df = pd.DataFrame({'a': [str(1)]})\r\n>>> df.memory_usage(index=True, deep=True)\r\nIndex    80\r\na        58\r\ndtype: int64\r\n>>> df.to_json()\r\n'{\"a\":{\"0\":\"1\"}}'\r\n>>> df.memory_usage(index=True, deep=True)\r\nIndex    80\r\na        66\r\ndtype: int64\r\n>>> df = pd.DataFrame({'a': [str(11)]})\r\n>>> df.to_json()\r\n'{\"a\":{\"0\":\"11\"}}'\r\n>>> df = pd.DataFrame({'a': [str(11)]})\r\n>>> df.memory_usage(index=True, deep=True)\r\nIndex    80\r\na        59\r\ndtype: int64\r\n>>> df.to_json()\r\n'{\"a\":{\"0\":\"11\"}}'\r\n>>> df.memory_usage(index=True, deep=True)\r\nIndex    80\r\na        71\r\ndtype: int64\r\n>>> df = pd.DataFrame({'a': [str(111)]})\r\n>>> df.memory_usage(index=True, deep=True)\r\nIndex    80\r\na        60\r\ndtype: int64\r\n>>> df.to_json()\r\n'{\"a\":{\"0\":\"111\"}}'\r\n>>> df.memory_usage(index=True, deep=True)\r\nIndex    80\r\na        76\r\ndtype: int64\r\n>>> \r\n\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/366386922",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15344#issuecomment-366386922",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15344",
    "id": 366386922,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjM4NjkyMg==",
    "user": {
      "login": "somic",
      "id": 16408,
      "node_id": "MDQ6VXNlcjE2NDA4",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16408?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/somic",
      "html_url": "https://github.com/somic",
      "followers_url": "https://api.github.com/users/somic/followers",
      "following_url": "https://api.github.com/users/somic/following{/other_user}",
      "gists_url": "https://api.github.com/users/somic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/somic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/somic/subscriptions",
      "organizations_url": "https://api.github.com/users/somic/orgs",
      "repos_url": "https://api.github.com/users/somic/repos",
      "events_url": "https://api.github.com/users/somic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/somic/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-16T23:20:18Z",
    "updated_at": "2018-02-16T23:20:18Z",
    "author_association": "NONE",
    "body": "I am observing what looks like a very similar memory leak with to_json on python 2.7.6 (ships with ubuntu trusty) and pandas 0.22.0. Anybody seen this?"
  }
]
