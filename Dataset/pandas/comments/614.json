[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3458593",
    "html_url": "https://github.com/pandas-dev/pandas/issues/614#issuecomment-3458593",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/614",
    "id": 3458593,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTg1OTM=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-12T05:18:12Z",
    "updated_at": "2012-01-12T05:18:12Z",
    "author_association": "MEMBER",
    "body": "I like it, an easy change too. Here a self-contained example:\n\n```\ndata = DataFrame({'A' : ['foo', 'foo', 'foo', 'foo',\n                         'bar', 'bar', 'bar', 'bar',\n                         'foo', 'foo', 'foo'],\n                  'B' : ['one', 'one', 'one', 'two',\n                         'one', 'one', 'one', 'two',\n                         'two', 'two', 'one'],\n                  'C' : ['dull', 'dull', 'shiny', 'dull',\n                         'dull', 'shiny', 'shiny', 'dull',\n                         'shiny', 'shiny', 'shiny'],\n                  'D' : np.random.randn(11),\n                  'E' : np.random.randn(11),\n                  'F' : np.random.randn(11)})\n\ndata['C'][4] = np.nan\n\ndef transform(row):\n    if row['C'].startswith('shin') and row['A'] == 'foo':\n        row['D'] = 7\n    return row\n\ndef transform2(row):\n    if (notnull(row['C']) and  row['C'].startswith('shin')\n        and row['A'] == 'foo'):\n        row['D'] = 7\n    return row\n```\n\nthen the traceback would look be:\n\n```\nIn [2]: data.apply(transform, axis=1)\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n/home/wesm/code/pandas/<ipython-input-2-cae6247f68ab> in <module>()\n----> 1 data.apply(transform, axis=1)\n\n/home/wesm/code/pandas/pandas/core/frame.pyc in apply(self, func, axis, broadcast, raw, args, **kwds)\n   2665                     return self._apply_raw(f, axis)\n   2666                 else:\n-> 2667                     return self._apply_standard(f, axis)\n   2668             else:\n   2669                 return self._apply_broadcast(f, axis)\n\n/home/wesm/code/pandas/pandas/core/frame.pyc in _apply_standard(self, func, axis, ignore_failures)\n   2719             try:\n   2720                 for k, v in series_gen:\n-> 2721                     results[k] = func(v)\n   2722             except Exception, e:\n   2723                 if hasattr(e, 'args'):\n\n/home/wesm/code/pandas/<ipython-input-1-696d0fa0400e> in transform(row)\n     15 \n     16 def transform(row):\n---> 17         if row['C'].startswith('shin') and row['A'] == 'foo':\n     18                 row['D'] = 7\n     19         return row\n\nAttributeError: (\"'float' object has no attribute 'startswith'\", 'occurred at index 4')\n```\n\nI also noticed that if you apply a function to the rows on a mixed-type DataFrame (like with the above example) that you lose the type information. I added a small type inference hack to convert things back. `df.apply(f, axis=1)` isn't _especially_ fast right now, something I should fix at some point\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3458616",
    "html_url": "https://github.com/pandas-dev/pandas/issues/614#issuecomment-3458616",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/614",
    "id": 3458616,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTg2MTY=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-12T05:22:17Z",
    "updated_at": "2012-01-12T05:22:17Z",
    "author_association": "MEMBER",
    "body": "Aside: it'd be nice to add vectorized string functions to pandas, similar to hadley's stringr package. They could also be made NA-friendly \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3458863",
    "html_url": "https://github.com/pandas-dev/pandas/issues/614#issuecomment-3458863",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/614",
    "id": 3458863,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NTg4NjM=",
    "user": {
      "login": "hammer",
      "id": 15233,
      "node_id": "MDQ6VXNlcjE1MjMz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/15233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hammer",
      "html_url": "https://github.com/hammer",
      "followers_url": "https://api.github.com/users/hammer/followers",
      "following_url": "https://api.github.com/users/hammer/following{/other_user}",
      "gists_url": "https://api.github.com/users/hammer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hammer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hammer/subscriptions",
      "organizations_url": "https://api.github.com/users/hammer/orgs",
      "repos_url": "https://api.github.com/users/hammer/repos",
      "events_url": "https://api.github.com/users/hammer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hammer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-12T06:09:27Z",
    "updated_at": "2012-01-12T06:09:27Z",
    "author_association": "NONE",
    "body": "Great! I should note that, looking into the problem a bit further, the float values were np.nan, which were generated when I imported a CSV with some blank values in a column. In other words, I suspect anyone applying string functions to a column with missing values will hit this issue. Which brings me to another potential improvement: verbose data import that indicates the number of missing values automatically filled in.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3466922",
    "html_url": "https://github.com/pandas-dev/pandas/issues/614#issuecomment-3466922",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/614",
    "id": 3466922,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NjY5MjI=",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-12T17:29:33Z",
    "updated_at": "2012-01-12T17:29:33Z",
    "author_association": "NONE",
    "body": "\"Aside: it'd be nice to add vectorized string functions to pandas, similar to hadley's stringr package. They could also be made NA-friendly\"\nThis would be great. \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/3470659",
    "html_url": "https://github.com/pandas-dev/pandas/issues/614#issuecomment-3470659",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/614",
    "id": 3470659,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NzA2NTk=",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-01-12T21:14:34Z",
    "updated_at": "2012-01-12T21:14:34Z",
    "author_association": "MEMBER",
    "body": "@hammer, OK I'll bite on that (this would have been useful information to me in the past). Hard to add a _lot_ of verbosity without sacrificing performance but getting a basic NA count for non-numeric columns seems pretty useful:\n\n```\n\nfrom pandas import *\nfrom StringIO import StringIO\n\ndef f(verbose=True):\n    text = \"\"\"a,b,c,d\none,1,2,3\none,1,2,3\n,1,2,3\none,1,2,3\n,1,2,3\n,1,2,3\none,1,2,3\ntwo,1,2,3\"\"\"\n    data = StringIO(text)\n    result = read_csv(data, verbose=verbose)\n    return result\n\nresult = f()\n```\n\nlooks like\n\n```\n\nIn [2]: result = read_csv(data, verbose=True)\nFilled 3 NA values in column a\nOut[2]: \n  a    b  c  d\n0 one  1  2  3\n1 one  1  2  3\n2 NaN  1  2  3\n3 one  1  2  3\n4 NaN  1  2  3\n5 NaN  1  2  3\n6 one  1  2  3\n7 two  1  2  3\n```\n\nSomething that can definitely be fleshed out over time\n"
  }
]
