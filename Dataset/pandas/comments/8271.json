[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55584515",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55584515",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55584515,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTg0NTE1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T12:41:12Z",
    "updated_at": "2014-09-15T12:41:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "looks fine\n\ncc @seth-p ?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55584871",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55584871",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55584871,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTg0ODcx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T12:44:24Z",
    "updated_at": "2014-09-15T12:44:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jaimefrio you are checking if the most recent non-nan is repeated. is this TOO restrictive? \n`[1,2, 1, 2]` a problem as well? (e.g. isn't it number of repeats? and not their positinioning)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55592819",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55592819",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55592819,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTkyODE5",
    "user": {
      "login": "behzadnouri",
      "id": 1288998,
      "node_id": "MDQ6VXNlcjEyODg5OTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1288998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/behzadnouri",
      "html_url": "https://github.com/behzadnouri",
      "followers_url": "https://api.github.com/users/behzadnouri/followers",
      "following_url": "https://api.github.com/users/behzadnouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/behzadnouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/behzadnouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/behzadnouri/subscriptions",
      "organizations_url": "https://api.github.com/users/behzadnouri/orgs",
      "repos_url": "https://api.github.com/users/behzadnouri/repos",
      "events_url": "https://api.github.com/users/behzadnouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/behzadnouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T13:54:03Z",
    "updated_at": "2014-09-15T13:54:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "you are making the code more complex, without adding _any_ practical usage.\n\nvar is by definition a floating point number. if your code depends on floating point numbers begin exactly equal, then there is something wrong somewhere else.\n\nshould there be also a check for when var is exactly 1.0? or 2.0?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55593894",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55593894",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55593894,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTkzODk0",
    "user": {
      "login": "jaimefrio",
      "id": 3343990,
      "node_id": "MDQ6VXNlcjMzNDM5OTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3343990?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaimefrio",
      "html_url": "https://github.com/jaimefrio",
      "followers_url": "https://api.github.com/users/jaimefrio/followers",
      "following_url": "https://api.github.com/users/jaimefrio/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaimefrio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaimefrio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaimefrio/subscriptions",
      "organizations_url": "https://api.github.com/users/jaimefrio/orgs",
      "repos_url": "https://api.github.com/users/jaimefrio/repos",
      "events_url": "https://api.github.com/users/jaimefrio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaimefrio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T14:01:12Z",
    "updated_at": "2014-09-15T14:01:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Not sure I understand the question, do you mean the test or the code?\n\nThe only thing we are checking for in the code is whether all non-NaN observations in the window are identical (`nobs == nrep`), and then setting the variance to exactly `0` (`ssqdm_x = 0; mean_x = rep`). Your example `[1, 2, 1, 2]` does not fulfill that, so it will be calculated the same way it was before, not sure what could we do differently for that particular case.\n\nThe test is designed to test several of the code paths that can lead to explicitly setting the variance to `0`, to check they all work. The most relevant one is that things get properly reset if at some point there are no valid observations in the window. With the huge amount of testing for these functions already in place, it didn't seem necessary to add anything apart from this very specific one.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55595783",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55595783",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55595783,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTk1Nzgz",
    "user": {
      "login": "behzadnouri",
      "id": 1288998,
      "node_id": "MDQ6VXNlcjEyODg5OTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1288998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/behzadnouri",
      "html_url": "https://github.com/behzadnouri",
      "followers_url": "https://api.github.com/users/behzadnouri/followers",
      "following_url": "https://api.github.com/users/behzadnouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/behzadnouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/behzadnouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/behzadnouri/subscriptions",
      "organizations_url": "https://api.github.com/users/behzadnouri/orgs",
      "repos_url": "https://api.github.com/users/behzadnouri/repos",
      "events_url": "https://api.github.com/users/behzadnouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/behzadnouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T14:14:10Z",
    "updated_at": "2014-09-15T14:14:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "if this patch goes in, i will submit mine for the case that var is _exactly_ 1.0.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55596409",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55596409",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55596409,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTk2NDA5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T14:18:35Z",
    "updated_at": "2014-09-15T14:18:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jaimefrio makes sense\n\n@behzadnouri not sure of your point. This has to do with repeated observations, NOT a special case check on the actual values.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55596819",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55596819",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55596819,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTk2ODE5",
    "user": {
      "login": "jaimefrio",
      "id": 3343990,
      "node_id": "MDQ6VXNlcjMzNDM5OTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3343990?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaimefrio",
      "html_url": "https://github.com/jaimefrio",
      "followers_url": "https://api.github.com/users/jaimefrio/followers",
      "following_url": "https://api.github.com/users/jaimefrio/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaimefrio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaimefrio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaimefrio/subscriptions",
      "organizations_url": "https://api.github.com/users/jaimefrio/orgs",
      "repos_url": "https://api.github.com/users/jaimefrio/repos",
      "events_url": "https://api.github.com/users/jaimefrio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaimefrio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T14:21:13Z",
    "updated_at": "2014-09-15T14:21:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "@behzadnouri You may want to see the discussion in #7900 for some context. Not all floating point numbers are created equal, but even if they were, I'd argue that `0` is more equal than the others... ;-) And while the _output_ is floating point, the _input_ may very well be an integer sequence, or a fixed precision one, where exactly repeating values are not a theoretical construct, but the bread and butter of real world sequences.\n\nThe practical use of this is related to the rolling variance appearing as a factor in the denominator of several other expressions, namely the rolling correlation. Exactly detecting zero values in the denominator (an numerator) of those expressions is the only way of figuring the right value for them, instead of returning a meaningless value by dividing by an arbitrarily close to 0 value.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55599666",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55599666",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55599666,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTk5NjY2",
    "user": {
      "login": "behzadnouri",
      "id": 1288998,
      "node_id": "MDQ6VXNlcjEyODg5OTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1288998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/behzadnouri",
      "html_url": "https://github.com/behzadnouri",
      "followers_url": "https://api.github.com/users/behzadnouri/followers",
      "following_url": "https://api.github.com/users/behzadnouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/behzadnouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/behzadnouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/behzadnouri/subscriptions",
      "organizations_url": "https://api.github.com/users/behzadnouri/orgs",
      "repos_url": "https://api.github.com/users/behzadnouri/repos",
      "events_url": "https://api.github.com/users/behzadnouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/behzadnouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T14:40:14Z",
    "updated_at": "2014-09-15T14:40:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jaimefrio see [this SO question](https://stackoverflow.com/questions/10334688/how-dangerous-is-it-to-compare-floating-point-values). What is the variance of this array:  `[1.386 - 2.1*(0.66), 0, 0]`. you know that `1.386 = 2.1*(0.66)`?. does your patch fix this? should we submit another patch for this as well?\n\n@jreback master branch already returns correct results for the added test, as far as floating point arithmetic is understood. `[1.386 - 2.1*(0.66), 0, 0]` is also repeated observations.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55600347",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55600347",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55600347,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjAwMzQ3",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T14:44:26Z",
    "updated_at": "2014-09-15T14:44:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Overall I think the code looks good, but I have a few comments/questions:\n1. `val` is used both for each new input value (`val = input[i]`) as well as for the final result (`val = ssqdm_x / (nobs - ddof)`, `output[i] = val`). This is slightly confusing. I'd suggest using different variables.\n2. I think the code is correct, but it's not immediately obvious that it properly handles the case where there are non-`NaN` values, then they all exit the window so that `nobs` decreases to 0, and then new values enter the window. The reason it's not immediately obvious to me is that when `nobs` decreases to 0, `mean_x` and `sqdm_x` appear to be left in an imprecise state in lines 1315-1316 (maybe close to 0, but not necessarily identical?). I guess it's ok, since at this point `nrep` and `nobs` are both 0, so the next time a value is encountered both will be set to 1, and in lines 1296-1297 `ssqdm_x` and `mean_x` will be set appropriately. So I think the code is ok, but can you please double-check?\n3. Though I haven't checked, I think the code will still fail the commented-out test in `_test_moments_consistency()` for auto-correlations being either `NaN` or `1`:\n\n```\n# self.assertTrue(_non_null_values(corr_x_x).issubset(set([1.]))) # restore once rolling_cov(x, x) is identically equal to var(x)\n```\n\nIn order to pass this test, I think need to implement `algos.roll_cov()` rather than `algos.roll_var()`, and implement `rolling_var()` and `rolling_cov()` in terms of `algos.roll_cov()`...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55601526",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55601526",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55601526,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjAxNTI2",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T14:51:51Z",
    "updated_at": "2014-09-15T14:51:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@behzadnouri, I think you're letting the perfect be the enemy of the good. No, this PR does not solve all floating-point inaccuracies. But there are certain basic identities that one wants to hold (see `_test_moments_consistency()` in test_moments.py), and if we can make those hold without overly complicating the code, then I think we should do so. As @jaimefrio points out, this is especially the case for variance calculations which (a) people expect to be non-negative (and which is addressed with a brute-force test); and (b) appear in the denominator of correlation calculations.\n\nI'm in favor of including this PR, though as I mentioned above, think it would be even better to re-implement as `algos.roll_cov()`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55601879",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55601879",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55601879,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjAxODc5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T14:54:06Z",
    "updated_at": "2014-09-15T14:54:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "is their a case where this DOES fail on current master? iow 'proves' (for the near 0 case) that this blows up because of numerical inaccuracies?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55602561",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55602561",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55602561,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjAyNTYx",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T14:58:21Z",
    "updated_at": "2014-09-15T14:58:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Though I haven't checked, I presume the problem described in https://github.com/pydata/pandas/issues/7900#issuecomment-50995660 still remains in master until this PR is included.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55623305",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55623305",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55623305,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjIzMzA1",
    "user": {
      "login": "jaimefrio",
      "id": 3343990,
      "node_id": "MDQ6VXNlcjMzNDM5OTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3343990?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaimefrio",
      "html_url": "https://github.com/jaimefrio",
      "followers_url": "https://api.github.com/users/jaimefrio/followers",
      "following_url": "https://api.github.com/users/jaimefrio/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaimefrio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaimefrio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaimefrio/subscriptions",
      "organizations_url": "https://api.github.com/users/jaimefrio/orgs",
      "repos_url": "https://api.github.com/users/jaimefrio/repos",
      "events_url": "https://api.github.com/users/jaimefrio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaimefrio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T17:09:34Z",
    "updated_at": "2014-09-15T17:09:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "@seth-p\n1. Fair point, will change. It is tempting to just write directly to `output[i]`, although the premature optimizer in me worries about the cost of the indexing in the subsequent check for non-negativeness. Guess I will go with an `out` extra variable...\n2.  When `nobs` decreases to `0` so does `nrep`, so the path in the code is the first one, `nobs == nreps`, line 1294, which sets `ssqdm_x = 0`, and has a specific check for `nobs == 0` (`mean_x = rep if nobs > 0 else 0`). So I really think this is working fine. That specific test case is part of the new test I added, although arguably I am only checking the exact zeros. Will it make you more comfortable if we also checked the values of the non-zero variances in that array?\n3. Rolling covariance, as calculated right now, is plagued with the same precision problems that rolling variance used to have:\n\n```\n>>> x = np.random.rand(10)\n>>> y = np.random.rand(10)\n\n>>> pd.rolling_cov(x, y, 5)\narray([        nan,         nan,         nan,         nan, -0.03823918,\n       -0.04136157,  0.00516019, -0.01712565, -0.00264345,  0.03213796])\n>>> pd.rolling_cov(x+1e9, y+1e9, 5) # This is badly broken\narray([  nan,   nan,   nan,   nan,    0., -320., -320., -160.,  160.,    0.])\n\n>>> pd.rolling_var(x, 5)\narray([        nan,         nan,         nan,         nan,  0.06955873,\n        0.11229032,  0.1298793 ,  0.05767171,  0.10295796,  0.13571737])\n>>> pd.rolling_var(x+1e9, 5) # This is still getting 6-7 decimal places right (!!!)\narray([        nan,         nan,         nan,         nan,  0.06955874,\n        0.11229033,  0.12987929,  0.05767168,  0.10295792,  0.13571733])\n```\n\nSo yes, it makes plenty of sense to implement a proper `rolling_cov` function, regardless of the consistency issues. What I am not sure is that we can simply throw `rolling_var` out the window, as I think the performance impact will not be negligible, as you need to independently check each array. I started looking into it a little last night, will try to follow up with a PR in the near future, although I am kind of busy lately. Not that you need my permission, but if you want to try your hand at it, you have my blessings, please go ahead!\n\nI can also confirm that the commented test is failing, although the check may be a little too strict right now, here's a debugger session after the failure:\n\n```\n(Pdb) u\n> c:\\open_source\\pandas\\pandas\\stats\\tests\\test_moments.py(733)_test_moments_consistency()\n-> self.assertTrue(_non_null_values(corr_x_x).issubset(set([1.]))) # restore once rolling_cov(x, x) is identically equal to var(x)\n(Pdb) p x\n0    1\n1    3\ndtype: float64\n(Pdb) p corr_x_x\n0   NaN\n1     1\ndtype: float64\n(Pdb) p corr_x_x[1]\n0.99999999999999978\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55624913",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55624913",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55624913,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjI0OTEz",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T17:20:09Z",
    "updated_at": "2014-09-15T17:21:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jaimefrio:\n\nRe 2. That's fine. Just wanted to confirm, as it wasn't 100% obvious at first glance.\n\nRe 3. This is what I did for `ewm*()`, i.e. implemented `ewmcov()` and `ewmvar()` in terms of `algos.ewmcov()`. I think the resulting cov() calculation is faster than the mean(x_y) - mean(x)_mean(y) method, and calculating var(x)=cov(x,x) is only negligibly slower than a dedicated var(x) calculation. Though obviously best to test...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55625317",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55625317",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55625317,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjI1MzE3",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T17:23:01Z",
    "updated_at": "2014-09-15T17:23:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Re 3 continued. I don't think the test is too strict. I believe that `ewmcorr()` passes the test (after implementing `algos.ewmcov()`). Once you have var(x) == cov(x,x) identically, you should be guaranteed that corr(x,x) will be either `NaN` or 1...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55625512",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55625512",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55625512,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjI1NTEy",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T17:24:27Z",
    "updated_at": "2014-09-15T17:24:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "I may take a look at implementing `algos.roll_cov()`, though not sure I'll have time in the next week or two.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55627191",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55627191",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55627191,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjI3MTkx",
    "user": {
      "login": "jaimefrio",
      "id": 3343990,
      "node_id": "MDQ6VXNlcjMzNDM5OTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3343990?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaimefrio",
      "html_url": "https://github.com/jaimefrio",
      "followers_url": "https://api.github.com/users/jaimefrio/followers",
      "following_url": "https://api.github.com/users/jaimefrio/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaimefrio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaimefrio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaimefrio/subscriptions",
      "organizations_url": "https://api.github.com/users/jaimefrio/orgs",
      "repos_url": "https://api.github.com/users/jaimefrio/repos",
      "events_url": "https://api.github.com/users/jaimefrio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaimefrio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T17:36:15Z",
    "updated_at": "2014-09-15T17:36:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Since `rolling_var` is already in place, it will be easy as pie to check if `rolling_var(x)` is faster enough than `rolling_cov(x, x)` once this other is in place.\n\nA question that may be relevant to the resulting performance of `rolling_cov`: once we have `rolling_var` and `rolling_cov` implemented using the same algorithm, will detecting exact zeros still be needed anywhere?\n\nI think the relevant case to consider is something ike:\n\n```\n>>> x = np.array([1,1,1,1,1])\n>>> y = np.random.rand(5)\n\n>>> pd.rolling_cov(x, y, 3)\narray([ nan,  nan,   0.,   0.,   0.])\n>>> pd.rolling_var(x, 3)\narray([ nan,  nan,   0.,   0.,   0.])\n>>> pd.rolling_corr(x, y, 3)\narray([ nan,  nan,  nan,  nan,  nan])\n```\n\nIf we remove the guarantee of exactly zero, I am not 100% sure that in a case like this rounding errors may not lead to a `rolling_corr` close to `1`, but not exactly `1`, even when the calculated value should be `0 / 0`\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55631219",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55631219",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55631219,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjMxMjE5",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T18:02:39Z",
    "updated_at": "2014-09-15T18:02:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, I think `algos.roll_cov()` will need to check if each of the series is constant (over the current window). Note that I do that in `algos.ewmcov()` -- though that's much easier since the window is only expanding (i.e. just `if mean_x != cur_x` and `if mean_y != cur_y`).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55684855",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55684855",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55684855,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1Njg0ODU1",
    "user": {
      "login": "jaimefrio",
      "id": 3343990,
      "node_id": "MDQ6VXNlcjMzNDM5OTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3343990?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaimefrio",
      "html_url": "https://github.com/jaimefrio",
      "followers_url": "https://api.github.com/users/jaimefrio/followers",
      "following_url": "https://api.github.com/users/jaimefrio/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaimefrio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaimefrio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaimefrio/subscriptions",
      "organizations_url": "https://api.github.com/users/jaimefrio/orgs",
      "repos_url": "https://api.github.com/users/jaimefrio/repos",
      "events_url": "https://api.github.com/users/jaimefrio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaimefrio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-16T01:49:08Z",
    "updated_at": "2014-09-16T01:49:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have made the small style modification that @seth-p suggested and made another mostly style-related modification to the test. I think this is now ready to go.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55689722",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55689722",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55689722,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1Njg5NzIy",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-16T03:10:49Z",
    "updated_at": "2014-09-16T03:10:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Looks fine to me.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55706136",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55706136",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55706136,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzA2MTM2",
    "user": {
      "login": "jaimefrio",
      "id": 3343990,
      "node_id": "MDQ6VXNlcjMzNDM5OTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3343990?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaimefrio",
      "html_url": "https://github.com/jaimefrio",
      "followers_url": "https://api.github.com/users/jaimefrio/followers",
      "following_url": "https://api.github.com/users/jaimefrio/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaimefrio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaimefrio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaimefrio/subscriptions",
      "organizations_url": "https://api.github.com/users/jaimefrio/orgs",
      "repos_url": "https://api.github.com/users/jaimefrio/repos",
      "events_url": "https://api.github.com/users/jaimefrio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaimefrio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-16T07:29:59Z",
    "updated_at": "2014-09-16T07:29:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have managed to put together a working Cython `roll_cov` function, but am not quite sure how to go about putting it into a PR. To avoid a rebase nightmare, it should wait until this and  #8280 go in.\n\nAs a small teaser, I have also done some timings, and for large-ish arrays, doing `roll_cov(x, x)` is 1.5-2x slower than doing `roll_var(x)`, so I vote for keeping `roll_var` around:\n\n```\nIn [1]: x = np.random.rand(1e6)\nIn [2]: from pandas.algos import roll_var, roll_cov\n\nIn [4]: %timeit roll_var(x, 100, 1)\n100 loops, best of 3: 19.2 ms per loop\nIn [5]: %timeit roll_cov(x, x, 100, 1)\n10 loops, best of 3: 33.4 ms per loop\n```\n\nAs implemented right now, `roll_var` and `roll_cov` are very, very similar, so the following nice result holds for random floating point arrays:\n\n```\nIn [3]: np.array_equal(roll_var(x, 100, 1)[1:], roll_cov(x, x, 100, 1)[1:])\nOut[3]: True\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55744064",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55744064",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55744064,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzQ0MDY0",
    "user": {
      "login": "behzadnouri",
      "id": 1288998,
      "node_id": "MDQ6VXNlcjEyODg5OTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1288998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/behzadnouri",
      "html_url": "https://github.com/behzadnouri",
      "followers_url": "https://api.github.com/users/behzadnouri/followers",
      "following_url": "https://api.github.com/users/behzadnouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/behzadnouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/behzadnouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/behzadnouri/subscriptions",
      "organizations_url": "https://api.github.com/users/behzadnouri/orgs",
      "repos_url": "https://api.github.com/users/behzadnouri/repos",
      "events_url": "https://api.github.com/users/behzadnouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/behzadnouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-16T13:44:53Z",
    "updated_at": "2014-09-16T13:44:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "@seth-p @jaimefrio instead of comforting each other please [do](https://stackoverflow.com/questions/588004/is-floating-point-math-broken) [some](https://stackoverflow.com/questions/18541237/how-can-12-11-21-0-789999962) [readings](https://stackoverflow.com/questions/10334688/how-dangerous-is-it-to-compare-floating-point-values).\n\nYou are making the code more complex and less efficient without _any_ practical use because of [your lack of understanding of floating point arithmetic](https://github.com/pydata/pandas/issues/7900#issuecomment-50995660).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55749171",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55749171",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55749171,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzQ5MTcx",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-16T14:17:31Z",
    "updated_at": "2014-09-16T14:17:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "@behzadnouri, let's try to be constructive and not let the conversation degenerate to ad-hominem attacks.\n\nWhat you seem not to acknowledge is that the difference between a variance of 0 and a variance of 10^-16 is materially/qualitatively different form the difference between a variance of 1 and a variance of 1+10^e-16. If you do not agree, I'm happy to explain why I believe this is so.\n\nIf you do agree with my previous statement, perhaps you still think that properly handling the variance=0 case does not merit extra tests making the code slightly more complex. If this is the case, then I think we simply have an honest disagreement.\n\nIf you disagree with my belief that there's something special about a variance of 0 (whether or not it merits extra code), perhaps I can take you up on your offer to submit a PR \"for the case that var is _exactly_ 1.0.\" :-)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55751867",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55751867",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55751867,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzUxODY3",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-16T14:33:51Z",
    "updated_at": "2014-09-16T14:33:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@behzadnouri \n\nPls keep this discussion civil, both @seth-p and @jaimefrio are smart guys. You are welcome to refute and criticize arguments and have honest disagreements. But noone wants personal attaches.\n\nThat said, I would encourage you to provide a counter-argument to @seth-p points. \n\nPython and pandas strive to be practical, efficient, have a nice API, simple, and give the exactly to the nth decimal place correct answers. Not all of these are possible at the same time.\n\nWe take different approaches to numerical stability, e.g. : https://github.com/pydata/pandas/pull/6817 (for efficiency), and here https://github.com/pydata/pandas/issues/8002 to provide numerical stable values.\n\nI think it is most practical to provide the user an exactly 0 value when it is close to 0 that its immaterial. For 99.9% of use cases that will suffice. I am open to include a precision keyword to alleviate those cases where it doesnt.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55759980",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55759980",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55759980,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzU5OTgw",
    "user": {
      "login": "behzadnouri",
      "id": 1288998,
      "node_id": "MDQ6VXNlcjEyODg5OTg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1288998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/behzadnouri",
      "html_url": "https://github.com/behzadnouri",
      "followers_url": "https://api.github.com/users/behzadnouri/followers",
      "following_url": "https://api.github.com/users/behzadnouri/following{/other_user}",
      "gists_url": "https://api.github.com/users/behzadnouri/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/behzadnouri/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/behzadnouri/subscriptions",
      "organizations_url": "https://api.github.com/users/behzadnouri/orgs",
      "repos_url": "https://api.github.com/users/behzadnouri/repos",
      "events_url": "https://api.github.com/users/behzadnouri/events{/privacy}",
      "received_events_url": "https://api.github.com/users/behzadnouri/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-16T15:22:58Z",
    "updated_at": "2014-09-16T15:22:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback you are adding corner cases to the code. this will make it less maintainable, less efficient and more complex, and I still don't see any practical use.\n\nfor the record:\n- `[1.386 - 2.1*(0.66), 0, .3 - .1 * 3]` is repeated observations\n- links posted: [1](https://stackoverflow.com/questions/588004/is-floating-point-math-broken), [2](https://stackoverflow.com/questions/18541237/how-can-12-11-21-0-789999962), [3](https://stackoverflow.com/questions/10334688/how-dangerous-is-it-to-compare-floating-point-values)\n\ngiven that I had provided this example above:\n\n```\n>>> 1.386 - 2.1 * .66\n-2.220446049250313e-16\n```\n\nbut we are still talking about variance of 0 versus 10^-16, i will not comment on this pr further;\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55773761",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-55773761",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 55773761,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzczNzYx",
    "user": {
      "login": "jaimefrio",
      "id": 3343990,
      "node_id": "MDQ6VXNlcjMzNDM5OTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3343990?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaimefrio",
      "html_url": "https://github.com/jaimefrio",
      "followers_url": "https://api.github.com/users/jaimefrio/followers",
      "following_url": "https://api.github.com/users/jaimefrio/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaimefrio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaimefrio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaimefrio/subscriptions",
      "organizations_url": "https://api.github.com/users/jaimefrio/orgs",
      "repos_url": "https://api.github.com/users/jaimefrio/repos",
      "events_url": "https://api.github.com/users/jaimefrio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaimefrio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-16T16:49:35Z",
    "updated_at": "2014-09-16T16:49:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "@behzadnouri The problem we are trying to solve is the following, which I have just run with current master:\n\n```\n>>> x0 = np.array([0, 5, 5, 5])\n>>> x1 = np.array([1, 5, 5, 5])\n>>> y = np.random.rand(4)\n>>> pd.rolling_corr(x0, y, 3)\narray([        nan,         nan,  0.97657194,         nan])\n>>> pd.rolling_corr(x1, y, 3)\narray([        nan,         nan,  0.97657194,  0.        ])\n```\n\nI hope we agree that last value should be \"the same\" in both cases. With floating point, there may be more than one valid definition of what \"the same\" exactly means, but I am not aware of any in which zero is the same as NaN! This huge instability in the computed values happens because the \"true\" result we are after is `0 / 0`, and we (@seth-p and myself) don't think that \"because floating point\" is a sufficient justification for this function to basically have undefined behavior, under a test case (rolling correlation with a sequence that happens to be constant over the window) that is far from a theoretical construct. The route we have chosen to fix it is to explicitly detect sequences that would produce exactly zero if computed with an infinite precision, both in the denominator and numerator. If you have a better idea, suggestions (or PRs!) are always welcome.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/56077773",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-56077773",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 56077773,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MDc3Nzcz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-18T17:59:33Z",
    "updated_at": "2014-09-18T17:59:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jaimefrio this is fine. can you add a release note in v0.15.0.txt (api section), referencing this PR number (as their is no issue I believe). Also do we need a note / warning in docs and/or doc-string (maybe a note here?)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/56240438",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-56240438",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 56240438,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MjQwNDM4",
    "user": {
      "login": "jaimefrio",
      "id": 3343990,
      "node_id": "MDQ6VXNlcjMzNDM5OTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3343990?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaimefrio",
      "html_url": "https://github.com/jaimefrio",
      "followers_url": "https://api.github.com/users/jaimefrio/followers",
      "following_url": "https://api.github.com/users/jaimefrio/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaimefrio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaimefrio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaimefrio/subscriptions",
      "organizations_url": "https://api.github.com/users/jaimefrio/orgs",
      "repos_url": "https://api.github.com/users/jaimefrio/repos",
      "events_url": "https://api.github.com/users/jaimefrio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaimefrio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-19T21:46:34Z",
    "updated_at": "2014-09-19T21:46:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have mixed feelings about this... Although he had trouble presenting it, I kind of resonate with @behzadnouri's complaints about this approach. But regardless of philosophical principles, `rolling_corr` still needs a solution, so I have just sent #8326, that implements numerically stable versions of both `roll_cov` and `roll_corr` in `algos.pyx`. Neither `roll_var` nor `roll_corr` have exact zero detection over there, but `roll_corr` can both detect exact zeros in the denominator, and exactly identical sequences.\n\nWhy vouch for this? Because it keeps `roll_var` and `roll_cov` simple and fast for their most general use cases, and only integrates the extra complexity where it is needed: in making `roll_corr` work properly under all circumstances. Looking at the branching mess going on in `roll_corr` and then looking at the infinitely cleaner `roll_cov` is I think the best argument.\n\nSo my vote is for closing this and making #8326 work. It is going to require some effort, mostly to get the `center` keyword to work on `rolling_cov` and `rolling_corr` without resorting to a unary rolling function's implementation of it. And the tests in place seem overly restrictive to me: we are testing for exact equality of floating point operations involving products, divisions and square roots. While we probably could make those tests pass (they currently don't), I don't think that is a goal we should aspire to.\n\nI would really like to hear @jreback's and @seth-p's thoughts on this whole mess. Even if you think that the standalone `roll_var` and `roll_cov` functions should have exact zero detection built in, I'd rather put it in #8326, than do half the work here and the other half over there.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/56248519",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-56248519",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 56248519,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MjQ4NTE5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-19T23:33:11Z",
    "updated_at": "2014-09-19T23:33:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "closing this in favor of fixing up with #8326 \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/56249074",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8271#issuecomment-56249074",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8271",
    "id": 56249074,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MjQ5MDc0",
    "user": {
      "login": "seth-p",
      "id": 7441788,
      "node_id": "MDQ6VXNlcjc0NDE3ODg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7441788?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seth-p",
      "html_url": "https://github.com/seth-p",
      "followers_url": "https://api.github.com/users/seth-p/followers",
      "following_url": "https://api.github.com/users/seth-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/seth-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seth-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seth-p/subscriptions",
      "organizations_url": "https://api.github.com/users/seth-p/orgs",
      "repos_url": "https://api.github.com/users/seth-p/repos",
      "events_url": "https://api.github.com/users/seth-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seth-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-19T23:43:07Z",
    "updated_at": "2014-09-19T23:43:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't think `center` is a problem, as that is handled in the `rolling_*` functions by appending the requisite number of `NaN` values.\n"
  }
]
