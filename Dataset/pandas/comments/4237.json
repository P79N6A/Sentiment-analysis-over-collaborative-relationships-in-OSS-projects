[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20937280",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4237#issuecomment-20937280",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4237",
    "id": 20937280,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwOTM3Mjgw",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-14T14:40:05Z",
    "updated_at": "2013-07-14T14:40:05Z",
    "author_association": "MEMBER",
    "body": "would an `axis` parameter be useful? i think it would be more consistent with the rest of pandas\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20937599",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4237#issuecomment-20937599",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4237",
    "id": 20937599,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwOTM3NTk5",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-14T15:05:35Z",
    "updated_at": "2013-07-14T15:05:57Z",
    "author_association": "MEMBER",
    "body": "you should remove that merge commit\n\n``` sh\n# if you haven't added a pandas master remote\ngit remote add upstream git://github.com/pydata/pandas.git\n\n# fetch latest changes\ngit fetch upstream\nexport EDITOR='gvim -f' # or emacs or whatever you want\ngit rebase -i upstream/master\n```\n\nafter that you can hit the `f` key (`fixup`) or `s` key (`squash`) when the cursor is over the commit you'd like to fixup or squash\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20940007",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4237#issuecomment-20940007",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4237",
    "id": 20940007,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwOTQwMDA3",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-14T17:30:03Z",
    "updated_at": "2013-07-14T17:32:22Z",
    "author_association": "MEMBER",
    "body": "what i like to do when i'm close to finishing a PR and before I add release notes is \n\n``` sh\ngit fetch upstream\ngit rebase upstream/master\n```\n\nin fact i have `alias gfrb='git fetch upstream && git rebase upstream/master'` in my `.zshrc` the mnemonic is \"git fetch rebase\", it's not super general, but i pretty much name all of my upstreams `upstream` so it works in most cases and if it doesn't then there's always `git reflog`\n\nthis puts your changes right on top of the latest in `master` and generally makes things easier when you want to merge. you can add release notes before doing this but it most likely will cause a merge conflict (not a big deal, but still annoying)\n\ncheck out the [pandas wiki](http://www.github.com/pydata/pandas/wiki) for some more git and dev tips.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20942744",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4237#issuecomment-20942744",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4237",
    "id": 20942744,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwOTQyNzQ0",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-14T20:05:20Z",
    "updated_at": "2013-07-14T21:09:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "I really think that the default behaviour should apply across every element (i.e. not be row-wise), like naive ~~(incorrect)~~ implementation:\n\n```\ndef isin(self, items):\n    return self.applymap(items.__contains__)\n```\n\nCan always then apply all/any and think it's probably easier to read:\n\n```\ndf.isin(blah).all() # possibly setting axis\n```\n\nSaying that, if it can be more efficient to do the row-wise behaviour, having that as an option is a good thing. Though not entirely sold on 'and' and 'any' as argument values (but perhaps these are used elsewhere in codebase)...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20942760",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4237#issuecomment-20942760",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4237",
    "id": 20942760,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwOTQyNzYw",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-14T20:06:10Z",
    "updated_at": "2013-07-14T20:06:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "but +1 for isin as method, good addition\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20942965",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4237#issuecomment-20942965",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4237",
    "id": 20942965,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwOTQyOTY1",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-14T20:18:26Z",
    "updated_at": "2013-07-14T20:18:26Z",
    "author_association": "MEMBER",
    "body": "i could also see this taking a dict of columns => sequences\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20942989",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4237#issuecomment-20942989",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4237",
    "id": 20942989,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwOTQyOTg5",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-14T20:19:29Z",
    "updated_at": "2013-07-14T20:19:29Z",
    "author_association": "MEMBER",
    "body": "nice `dict` is already there\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20943893",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4237#issuecomment-20943893",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4237",
    "id": 20943893,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwOTQzODkz",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-14T21:09:13Z",
    "updated_at": "2013-07-14T21:09:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Also, does this work for DataFrames with repeated cols/index (think you may get bit here)?\n\nI'm afraid the naive implementation may be the easiest (and make most sense here)...\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20944281",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4237#issuecomment-20944281",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4237",
    "id": 20944281,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwOTQ0Mjgx",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-14T21:32:51Z",
    "updated_at": "2013-07-14T21:36:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger lib has an ismember cython function (which is what Series.isin uses), so this way is pretty fast):\n\n```\ndef isin(self, items):\n    return pd.DataFrame(lib.ismember(df.values.ravel(), set(items)).reshape(df.shape), df.index, df.columns)\n```\n\n_could later generalise ismember to take a 2d array if you wanted._\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20944294",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4237#issuecomment-20944294",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4237",
    "id": 20944294,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwOTQ0Mjk0",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-14T21:33:30Z",
    "updated_at": "2013-07-14T21:33:30Z",
    "author_association": "MEMBER",
    "body": "`flatten` makes a copy use `ravel` instead\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20949274",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4237#issuecomment-20949274",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4237",
    "id": 20949274,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwOTQ5Mjc0",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-15T02:25:58Z",
    "updated_at": "2013-07-15T02:25:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thinking more about the axis argument.  I've been thinking about row-wise mostly (axis=0).  This will return a Series of bools where the index is the same as the original DataFrame.  Presumably axis=1 will return a Series of bools whose index is the same as the columns of the Dataframe `isin` is called on.  I'd also like to use @hayd's naiive implementation.  **Should this go in the axis argument also?** Do we have something like `axis=None` to do things element-wise?\n\nI think generalizing ismember will be worthwhile down the road.  But maybe we should get a python implementation first, and I can tackle the Cython later.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20950528",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4237#issuecomment-20950528",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4237",
    "id": 20950528,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwOTUwNTI4",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-15T03:36:52Z",
    "updated_at": "2013-07-15T04:41:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "Uhmm, I think I'm losing my mind a bit.  `axis=1` operates column-wise so with\n\n``` python\nIn [9]: df\nOut[9]: \n  ids ids2  vals\n0   a    e     1\n1   b    f     2\n2   f    c     3\n3   f    f     4\n```\n\nthen we should get\n\n``` python\nIn [15]: df.isin({'ids': ['a', 'b'], 'vals': [1, 3]}, how='any', axis=1)\nOut[15]: \n0     True\n1     True\n2     True\n3    False\ndtype: bool\n```\n\nand `axis=0` returns\n\n``` python\nIn [16]: df.isin({'ids': ['a', 'b'], 'vals': [1, 3]}, how='any', axis=0)\nOut[16]: \nvals    True\nids     True\ndtype: bool\n```\n\nOr do I have that backwards?\n\nEdit: I'm pretty sure this is backwards.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/20955689",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4237#issuecomment-20955689",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4237",
    "id": 20955689,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwOTU1Njg5",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-15T07:49:09Z",
    "updated_at": "2013-07-15T07:59:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger Just to step back a little, what is the benefit of using how (and axis) rather than just doing .any() or .all() after ?\n\nI think for passing a dict behaviour should be something like\n\n```\nif isinstance(items, dict):\n    if axis == 1:\n       df = df.T\n    return pd.concat(df[[k]].isin(v) for k, v in items.items())\n```\n\n_Edit this isn't quite the way to do it, for one thing the df[[k]] term is pretty hairy, probably better to use loc/iloc (maybe even have an iloc argument) :s_\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21017464",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4237#issuecomment-21017464",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4237",
    "id": 21017464,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDE3NDY0",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-16T02:24:19Z",
    "updated_at": "2013-07-16T02:24:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Okay, I went with Andy's suggestion and simplified things.  Two cases\n- values is a flat array: will return a dataframe shaped identical to the first one. Plays nicely with `.any()` or `.all()` afterward\n- values is a dict of either `{columns:[values]}` or `{rows:[values]`} returns a subset of the original dataframe with just those columns/rows in the dict.  This requires you to specify `axis=1` for columns or `axis=0`  for rows.\n\nTwo questions before the PR is ready:\n- Is there a better way to handle the axis argument?  I ignore it if values is flat, and require it if values is a dict.  \n- When values is a dict, the result of `df.isin()` might not be sorted the same way as the original dataframe.  I should probably sort it before returning, right?  What's the best way of doing that?\n\nHopefully I've got it to a clean merge.  I accidentally included one of @cpcloud's commits in there at one point and had to reset and force push.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21041565",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4237#issuecomment-21041565",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4237",
    "id": 21041565,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDQxNTY1",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-16T13:27:55Z",
    "updated_at": "2013-07-16T13:27:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think we don't need {row:[values]} so can just lose the axis argument (they can always transpose, and I think that's probably an unusual use case) that way we can drop it entirely. Also (I think) your implementation breaks with duplicate column names :s\n\nI have added a couple of commits to this (and changed some of the behaviour... will add as alternative pr). Let me know what you think.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21041817",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4237#issuecomment-21041817",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4237",
    "id": 21041817,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDQxODE3",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-16T13:32:12Z",
    "updated_at": "2013-07-16T13:32:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks.  Agreed on the axis argument.  It makes much more sense column--wise since the types will be homogenous down columns, but (probably) heterogenous across columns.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21041896",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4237#issuecomment-21041896",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4237",
    "id": 21041896,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMDQxODk2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-16T13:33:24Z",
    "updated_at": "2013-07-16T13:33:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "this is how you should iterate to potentially deal with dups (this is from core/frame.py)\n\n```\n def itertuples(self, index=True):\n        \"\"\"\n        Iterate over rows of DataFrame as tuples, with index value\n        as first element of the tuple\n        \"\"\"\n        arrays = []\n        if index:\n            arrays.append(self.index)\n\n        # use integer indexing because of possible duplicate column names\n        arrays.extend(self.iloc[:, k] for k in xrange(len(self.columns)))\n        return izip(*arrays)\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21295349",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4237#issuecomment-21295349",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4237",
    "id": 21295349,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjk1MzQ5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-20T15:36:01Z",
    "updated_at": "2013-07-20T15:36:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger close this in favor of #4258 ?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/21295362",
    "html_url": "https://github.com/pandas-dev/pandas/pull/4237#issuecomment-21295362",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/4237",
    "id": 21295362,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxMjk1MzYy",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-07-20T15:36:36Z",
    "updated_at": "2013-07-20T15:36:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger sorry...I realized that's on top of yours..never mind :)\n"
  }
]
