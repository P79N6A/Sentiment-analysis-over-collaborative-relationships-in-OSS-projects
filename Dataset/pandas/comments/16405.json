[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/302945806",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16405#issuecomment-302945806",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16405",
    "id": 302945806,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjk0NTgwNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-21T16:04:06Z",
    "updated_at": "2017-05-21T16:04:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "hmm, that doesn't seem friendly. I think the issue is that ``size`` needs to be special cases in ``.agg`` because its a property on a Series/DataFarme and a function in ``.groupby``."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/303245974",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16405#issuecomment-303245974",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16405",
    "id": 303245974,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzI0NTk3NA==",
    "user": {
      "login": "pvomelveny",
      "id": 10147643,
      "node_id": "MDQ6VXNlcjEwMTQ3NjQz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10147643?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pvomelveny",
      "html_url": "https://github.com/pvomelveny",
      "followers_url": "https://api.github.com/users/pvomelveny/followers",
      "following_url": "https://api.github.com/users/pvomelveny/following{/other_user}",
      "gists_url": "https://api.github.com/users/pvomelveny/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pvomelveny/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pvomelveny/subscriptions",
      "organizations_url": "https://api.github.com/users/pvomelveny/orgs",
      "repos_url": "https://api.github.com/users/pvomelveny/repos",
      "events_url": "https://api.github.com/users/pvomelveny/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pvomelveny/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-22T23:19:35Z",
    "updated_at": "2017-05-22T23:25:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey there, I started looking into this as part of the PyCon sprint.\r\n\r\nUsing the example:\r\n\r\n```python\r\n>>> pd.DataFrame({'g': [0, 0, 1], 'v': [1, 2, None]}).agg({'v': 'size'})\r\n```\r\nI tracked down where the error that gets passed by is. In `pandas/core/base.py`:\r\n```python\r\ndef _try_aggregate_string_function(self, arg, *args, **kwargs):\r\n        \"\"\"\r\n        if arg is a string, then try to operate on it:\r\n        - try to find a function on ourselves\r\n        - try to find a numpy function\r\n        - raise\r\n        \"\"\"\r\n        assert isinstance(arg, compat.string_types)\r\n\r\n        f = getattr(self, arg, None)\r\n        if f is not None:\r\n            return f(*args, **kwargs)\r\n\r\n        f = getattr(np, arg, None)\r\n        if f is not None:\r\n            return f(self, *args, **kwargs)\r\n\r\n        raise ValueError(\"{} is an unknown string function\".format(arg))\r\n```\r\nThe arg in this case is `'size'`, which *is* an actual attribute of the Series, just not, as expected, a callable one.  A `TypeError` then bubbles up back to the original `pandas/core/frame.py`'s [`aggregate`](https://github.com/pandas-dev/pandas/blob/master/pandas/core/frame.py#L4310), which is caught and passed over. `Frame.aggregate` then calls `Frame.apply`, which immediately deploys back to `Frame.aggregate` (and thus, our eventual recursion error):\r\n```python\r\n def apply(self, func, axis=0, broadcast=False, raw=False, reduce=None,\r\n              args=(), **kwds):\r\n        \"\"\"\r\n        Applies function along input axis of DataFrame.\r\n\r\n        ...\r\n\r\n        \"\"\"\r\n        axis = self._get_axis_number(axis)\r\n        ignore_failures = kwds.pop('ignore_failures', False)\r\n\r\n        # dispatch to agg\r\n        if axis == 0 and isinstance(func, (list, dict)):\r\n            return self.aggregate(func, axis=axis, *args, **kwds)\r\n\r\n        ...\r\n```\r\n\r\nIt seems like a good place to cut this off may be either `_try_aggregate_string_function` in base.py or in `aggregate` in series.py. Any executive decisions on this @TomAugspurger ? Left entierly to my own devices I'd probably do something along the lines:\r\n```python\r\ndef _try_aggregate_string_function(self, arg, *args, **kwargs):\r\n        \"\"\"\r\n        if arg is a string, then try to operate on it:\r\n        - try to find a function on ourselves\r\n        - try to find a numpy function\r\n        - raise\r\n        \"\"\"\r\n        assert isinstance(arg, compat.string_types)\r\n\r\n        f = getattr(self, arg, None)\r\n        if f is not None:\r\n            return f(*args, **kwargs) if callable(f) else f  # Do people still hate the ternary operator?\r\n\r\n        ...\r\n```\r\nBut since this is actually in the base class, there could be some unforeseen consequences of this I can't see? (And barring those consequences, should this should just be restricted to calls of 'size'? Otherwise people could do potentially-unexpected-but-also-kinda-cool things like call `df.agg({v:'ndim', w:'name', x:'data'})`)\r\n\r\nAppreciate any thoughts, thanks!\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/303251936",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16405#issuecomment-303251936",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16405",
    "id": 303251936,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzI1MTkzNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-22T23:59:04Z",
    "updated_at": "2017-05-22T23:59:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "@pvomelveny what you did is reasonable, but let's write it out (yes *hate* the ternary operator :>)\r\n\r\nmaybe\r\n\r\n```\r\nif f is not None:\r\n    if callable(f):\r\n        return f(*args, **kwargs)\r\n   assert len(args) == 0 and len(kwargs) == 0\r\n   return f\r\n```\r\n\r\nand see if things pass (and add a comment about why doing this).\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/303392973",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16405#issuecomment-303392973",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16405",
    "id": 303392973,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMzM5Mjk3Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-23T13:11:49Z",
    "updated_at": "2017-05-23T13:11:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "@pvomelveny can you submit a pull request with those changes? I'm curious to see if the tests pass."
  }
]
