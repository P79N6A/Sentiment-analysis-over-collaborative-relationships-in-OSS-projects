[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/309300431",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-309300431",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 309300431,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTMwMDQzMQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-18T20:20:09Z",
    "updated_at": "2017-06-18T20:20:46Z",
    "author_association": "MEMBER",
    "body": "> HTTPS basic auth is very common\r\n\r\nApparently not with `pandas` :wink: \r\n\r\nBut joking aside, that's an awkward problem to have (can't replicate since I have no endpoint against which to test this).  Also, this is not easy to test without publicly providing credentials to an endpoint.\r\n\r\nI read the SO post, and I was wondering: can you confirm that `requests` was the only way for you to get the request to work?  I read a bunch of solutions in that discussion, so I just wanted to check.\r\n\r\nIf that is the case, I suppose we could implement a wrapper that makes the request and then returns the response content in place of `urlopen`, though doing it in a clean way will be the challenge.  Not to mention, we would need to explicitly add `requests` as a Python 2.x dependency."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/309302652",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-309302652",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 309302652,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTMwMjY1Mg==",
    "user": {
      "login": "skynss",
      "id": 8762041,
      "node_id": "MDQ6VXNlcjg3NjIwNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8762041?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skynss",
      "html_url": "https://github.com/skynss",
      "followers_url": "https://api.github.com/users/skynss/followers",
      "following_url": "https://api.github.com/users/skynss/following{/other_user}",
      "gists_url": "https://api.github.com/users/skynss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skynss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skynss/subscriptions",
      "organizations_url": "https://api.github.com/users/skynss/orgs",
      "repos_url": "https://api.github.com/users/skynss/repos",
      "events_url": "https://api.github.com/users/skynss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skynss/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-18T21:00:39Z",
    "updated_at": "2017-06-18T21:00:39Z",
    "author_association": "NONE",
    "body": "With requests and StringIO ot works well. I am travelling today but over next 1-2 days i can post a reproducable test url or simple reprocode. I suspect it repros with http and no real auth.. because i suspect this is simply a parsing error in hostname and port even before outbound call initiates. Can confirm in next 1-2 days when i am back unless you beat me to it"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/309303447",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-309303447",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 309303447,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTMwMzQ0Nw==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-18T21:15:55Z",
    "updated_at": "2017-06-18T21:17:31Z",
    "author_association": "MEMBER",
    "body": "Yeah if you could provide repro code that would be useful since it is hard to reproduce without our own endpoint.  However, if you could confirm none of the other solutions proposed in the SO work besides the `requests` ones, that would also be useful."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/309361829",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-309361829",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 309361829,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTM2MTgyOQ==",
    "user": {
      "login": "skynss",
      "id": 8762041,
      "node_id": "MDQ6VXNlcjg3NjIwNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8762041?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skynss",
      "html_url": "https://github.com/skynss",
      "followers_url": "https://api.github.com/users/skynss/followers",
      "following_url": "https://api.github.com/users/skynss/following{/other_user}",
      "gists_url": "https://api.github.com/users/skynss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skynss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skynss/subscriptions",
      "organizations_url": "https://api.github.com/users/skynss/orgs",
      "repos_url": "https://api.github.com/users/skynss/repos",
      "events_url": "https://api.github.com/users/skynss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skynss/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-19T07:35:52Z",
    "updated_at": "2017-06-19T07:35:52Z",
    "author_association": "NONE",
    "body": "It appears to me that an existing url is not needed, because the issue is just in the parsing of the URL. eg:\r\n```python\r\ndf = pd.read_csv('http://username:pwd@cnn.com:8080/get_content.csv')\r\n# returns URLError: <urlopen error [Errno 11003] getaddrinfo failed>\r\ndf = pd.read_csv('http://username:pwd@cnn.com/get_content.csv')\r\n# returns InvalidURL: nonnumeric port: 'pwd@cnn.com' ( failing to find port number)\r\n```\r\n\r\nHowever, simplest way to fake it is:\r\nCreate a text file: aaa.csv and put some csv contents \r\n```python\r\nwith open('/path1/aaa.csv', 'w') as f:\r\n  f.write( 'animal,bird\\ncat,pigeon\\nmonkey,swan')\r\n```\r\ncd /path1\r\nrun\r\n```\r\npython -m SimpleHTTPServer 8080\r\n```\r\nNow the url http://localhost:8080/aaa.csv should exist \r\n```python\r\nimport requests\r\nimport pandas as pd\r\nu1 = 'http://localhost:8080/aaa.csv'\r\nprint( requests.get(u1).text) # as expected prints contents of aaa.csv\r\ndf = pd.read_csv(u1)  # as expected, loads contents of aaa.csv into df\r\n\r\nu2 = 'http://uname:pwd@localhost:8080/aaa.csv'\r\nprint( requests.get(u2).text) # as expected prints contents of aaa.csv (ignores unnecessary uname pwd)\r\ndf = pd.read_csv(u2)  # URLError: <urlopen error [Errno 11003] getaddrinfo failed>\r\n```\r\nI'll provide a working positive test case url later tomorrow once I set it up. It would be good to engineer a fix to allow self-signed certs for testing too - eg: requests has verify=False. Helpful for testing."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/309410242",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-309410242",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 309410242,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTQxMDI0Mg==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-19T11:14:28Z",
    "updated_at": "2017-06-19T11:14:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "So since we can't use requests, we would follow https://stackoverflow.com/a/4188709/1889400\r\n\r\n1. detect and extract the username / password in the url\r\n2. setup a `urllib.Request` context for the (stripped) url  in https://github.com/pandas-dev/pandas/blob/125c414389320dc67ecaffddc65878c01822064e/pandas/io/common.py#L197\r\n3. encode the user / password and add to the `Authorization` header\r\n4. urlopen the request context"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/309462541",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-309462541",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 309462541,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTQ2MjU0MQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-19T14:46:51Z",
    "updated_at": "2017-06-19T14:47:03Z",
    "author_association": "MEMBER",
    "body": "@TomAugspurger :\r\n\r\n1) Why can't we use `requests` ?\r\n\r\n2) Does this work with the `localhost` repro example that @skynss provided? "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/309463777",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-309463777",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 309463777,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTQ2Mzc3Nw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-19T14:50:27Z",
    "updated_at": "2017-06-19T16:15:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Why can't we use requests ?\r\n\r\nThis alone isn't worth adding it as a dependency I think."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/309464416",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-309464416",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 309464416,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTQ2NDQxNg==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-19T14:52:36Z",
    "updated_at": "2017-06-19T14:52:36Z",
    "author_association": "MEMBER",
    "body": "> This alone isn't worth adding it as a dependency I think.\r\n\r\nThat's very different from \"we can't use `requests`\"\r\n\r\nFor starters, it's builtin with Python 3.x, so we would only be adding it as a dependency for Python 2.x.  However, if we could find a way to use just `urlopen`, that would be nice though."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/309464784",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-309464784",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 309464784,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTQ2NDc4NA==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-19T14:53:54Z",
    "updated_at": "2017-06-19T14:53:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Does this work with the localhost repro example that @skynss provided?\r\n\r\nCan't really test that since I'd have to write the implementation first :) I think it'll work though.\r\n\r\n> For starters, it's builtin with Python 3.x,\r\n\r\nI don't think it is... It's documented as the recommended way for making high-level http calls though (but still requires a separate install)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/309465632",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-309465632",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 309465632,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTQ2NTYzMg==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-19T14:56:15Z",
    "updated_at": "2017-06-19T14:56:15Z",
    "author_association": "MEMBER",
    "body": "> I don't think it is... It's documented as the recommended way for making high-level http calls though (but still requires a separate install).\r\n\r\nOh right, I stand corrected. 😄 "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/309560958",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-309560958",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 309560958,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwOTU2MDk1OA==",
    "user": {
      "login": "skynss",
      "id": 8762041,
      "node_id": "MDQ6VXNlcjg3NjIwNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8762041?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skynss",
      "html_url": "https://github.com/skynss",
      "followers_url": "https://api.github.com/users/skynss/followers",
      "following_url": "https://api.github.com/users/skynss/following{/other_user}",
      "gists_url": "https://api.github.com/users/skynss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skynss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skynss/subscriptions",
      "organizations_url": "https://api.github.com/users/skynss/orgs",
      "repos_url": "https://api.github.com/users/skynss/repos",
      "events_url": "https://api.github.com/users/skynss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skynss/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-19T20:15:41Z",
    "updated_at": "2017-06-19T20:15:41Z",
    "author_association": "NONE",
    "body": "Here are working urls using self signed certs. Would be good to get it to work with self-signed certs too as that can be very useful especially in testing. Please let me know once you are done testing.. so I can shut down the demo because thats all it is up for.\r\n\r\n```python\r\nimport pandas as pd\r\nimport requests\r\nfrom io import StringIO\r\n\r\n# both urls use self signed cert. Both will remain working for few days\r\nu1 = 'https://pandasusr:pandaspwd@pandastest.mooo.com:5000/aaa.csv' # non default ssl port \r\nu2 = 'https://pandasusr:pandaspwd@pandastest.mooo.com/aaa.csv' # default ssl port\r\n\r\n\r\nr1 = requests.get(u1, verify=False)\r\nprint(r1.text) # prints ok\r\ndf1 = pd.read_csv(StringIO(r1.text))  # works\r\n\r\nr2 = requests.get(u1, verify=False)\r\nprint(r2.text) # prints ok\r\ndf2 = pd.read_csv(StringIO(r2.text)) # works\r\n\r\n# without requests\r\ndf1 = pd.read_csv(u1) # URLError: <urlopen error [Errno 11003] getaddrinfo failed>\r\n\r\ndf2 = pd.read_csv(u2)  # InvalidURL: nonnumeric port: 'pandaspwd@pandastest.mooo.com'\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/312376567",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-312376567",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 312376567,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjM3NjU2Nw==",
    "user": {
      "login": "skynss",
      "id": 8762041,
      "node_id": "MDQ6VXNlcjg3NjIwNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8762041?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skynss",
      "html_url": "https://github.com/skynss",
      "followers_url": "https://api.github.com/users/skynss/followers",
      "following_url": "https://api.github.com/users/skynss/following{/other_user}",
      "gists_url": "https://api.github.com/users/skynss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skynss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skynss/subscriptions",
      "organizations_url": "https://api.github.com/users/skynss/orgs",
      "repos_url": "https://api.github.com/users/skynss/repos",
      "events_url": "https://api.github.com/users/skynss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skynss/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-30T21:26:45Z",
    "updated_at": "2017-06-30T21:26:45Z",
    "author_association": "NONE",
    "body": "Is anyone going to use the live endpoints referred above (and below) to repro and test? If not, I will shut down the server in the next 4 days. I havent seen anyone attempt to use it over past 11 days. \r\n```\r\n\r\nu1 = 'https://pandasusr:pandaspwd@pandastest.mooo.com:5000/aaa.csv' # non default ssl port \r\nu2 = 'https://pandasusr:pandaspwd@pandastest.mooo.com/aaa.csv' # default ssl port\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/312377040",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-312377040",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 312377040,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjM3NzA0MA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-30T21:29:25Z",
    "updated_at": "2017-06-30T21:29:25Z",
    "author_association": "MEMBER",
    "body": "@skynss : Sorry about that!  I imagine that outside work has caught up with a bunch of us (including myself).  I'll see if I can look at it later today."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/312424030",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-312424030",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 312424030,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjQyNDAzMA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-01T10:24:15Z",
    "updated_at": "2017-07-01T10:24:15Z",
    "author_association": "MEMBER",
    "body": "@skynss : Can replicate the issues you were experiencing."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/312470721",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-312470721",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 312470721,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjQ3MDcyMQ==",
    "user": {
      "login": "skynss",
      "id": 8762041,
      "node_id": "MDQ6VXNlcjg3NjIwNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8762041?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skynss",
      "html_url": "https://github.com/skynss",
      "followers_url": "https://api.github.com/users/skynss/followers",
      "following_url": "https://api.github.com/users/skynss/following{/other_user}",
      "gists_url": "https://api.github.com/users/skynss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skynss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skynss/subscriptions",
      "organizations_url": "https://api.github.com/users/skynss/orgs",
      "repos_url": "https://api.github.com/users/skynss/repos",
      "events_url": "https://api.github.com/users/skynss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skynss/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-02T04:47:28Z",
    "updated_at": "2017-07-02T04:47:28Z",
    "author_association": "NONE",
    "body": "Please run the source code I pasted above.. and I can replicate the issues I am experiencing."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/312470749",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-312470749",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 312470749,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjQ3MDc0OQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-02T04:48:33Z",
    "updated_at": "2017-07-02T04:48:33Z",
    "author_association": "MEMBER",
    "body": "> Please run the source code I pasted above.. and I can replicate the issues I am experiencing.\r\n\r\nDid you read the comment I made above <a href=\"https://github.com/pandas-dev/pandas/issues/16716#issuecomment-312424030\">here</a>?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/312522476",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-312522476",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 312522476,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjUyMjQ3Ng==",
    "user": {
      "login": "skynss",
      "id": 8762041,
      "node_id": "MDQ6VXNlcjg3NjIwNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8762041?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skynss",
      "html_url": "https://github.com/skynss",
      "followers_url": "https://api.github.com/users/skynss/followers",
      "following_url": "https://api.github.com/users/skynss/following{/other_user}",
      "gists_url": "https://api.github.com/users/skynss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skynss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skynss/subscriptions",
      "organizations_url": "https://api.github.com/users/skynss/orgs",
      "repos_url": "https://api.github.com/users/skynss/repos",
      "events_url": "https://api.github.com/users/skynss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skynss/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-02T23:05:15Z",
    "updated_at": "2017-07-02T23:06:16Z",
    "author_association": "NONE",
    "body": "I am not sure which comment you are referring to.. as the link doesnt work. But trying my best to answer..\r\n\r\n> I read the SO post, and I was wondering: can you confirm that requests was the only way for you to get the request to work? I read a bunch of solutions in that discussion, so I just wanted to check\r\n\r\nThe only way I know that worked for me is 1) get txt content 2) load it in StringIO 3) give the StringIO buffer to pandas to read. For step 1) to get text content, I imagine any method would work. I used requests and that worked. And the repro code above follows that step. And I just verified that if I copy paste the repro code, it replicates the issue.\r\n\r\nIf I didnt answer your question, kindly re-state your question. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/312529176",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-312529176",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 312529176,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjUyOTE3Ng==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-03T01:16:18Z",
    "updated_at": "2017-07-03T01:16:18Z",
    "author_association": "MEMBER",
    "body": "@skynss : Not sure why the link doesn't work.  It's just a URL to an earlier comment I made.  However, I'm wondering if you can access those files by passing into `urlopen` authentication as @TomAugspurger mentioned <a href=\"https://github.com/pandas-dev/pandas/issues/16716#issuecomment-309410242\">here</a>.\r\n\r\nA solution that doesn't use `requests` would be to do that instead, so that works for you, we could go that way."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/312533428",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-312533428",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 312533428,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjUzMzQyOA==",
    "user": {
      "login": "skynss",
      "id": 8762041,
      "node_id": "MDQ6VXNlcjg3NjIwNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8762041?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skynss",
      "html_url": "https://github.com/skynss",
      "followers_url": "https://api.github.com/users/skynss/followers",
      "following_url": "https://api.github.com/users/skynss/following{/other_user}",
      "gists_url": "https://api.github.com/users/skynss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skynss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skynss/subscriptions",
      "organizations_url": "https://api.github.com/users/skynss/orgs",
      "repos_url": "https://api.github.com/users/skynss/repos",
      "events_url": "https://api.github.com/users/skynss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skynss/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-03T02:04:11Z",
    "updated_at": "2017-07-03T02:07:02Z",
    "author_association": "NONE",
    "body": "The following working code does not depend on `requests` library. Just copy / paste and run to verify.\r\n\r\n\r\n```python\r\nimport urllib2, base64, ssl\r\nfrom urlparse import urlparse\r\n#from io import StringIO # python 3.x\r\nfrom StringIO import StringIO\r\nimport pandas as pd\r\n\r\ndef split_uname_from_url(url_with_uname):\r\n\to = urlparse( url_with_uname)\r\n\tuname = o.username\r\n\tpwd = o.password\r\n\t# create url without username and pwd\r\n        usrch = '{}:{}@{}'.format( uname, pwd, o.hostname)\r\n\turl_no_usrpwd = url_with_uname.replace( usrch , o.hostname)\r\n\treturn uname, pwd, url_no_usrpwd\r\n\r\ndef get_https_basic_auth_ignore_invalid_cert( url_with_uname, verify_ssl=True):\r\n\tuname, pwd, url_no_usrpwd = split_uname_from_url(url_with_uname)\r\n\tprint('Calling [{}] -- uname:[{}] -- pwd[{}]'.format(url_no_usrpwd, uname, pwd))\r\n\trequest = urllib2.Request( url_no_usrpwd )\r\n\tbase64string = base64.encodestring('%s:%s' % (uname, pwd)).replace('\\n', '')\r\n\trequest.add_header(\"Authorization\", \"Basic %s\" % base64string)   \r\n\t# I hope pandas can support self signed certs too \r\n        # because it is very difficult to get official SSL certs in testing scenarios\r\n\tif verify_ssl:\r\n\t\tresult = urllib2.urlopen(request) \r\n\telse: # in case of self signed SSL certificates. \r\n\t\tresult = urllib2.urlopen(request, context=ssl._create_unverified_context() )\r\n\ttxt = result.read()\r\n\treturn txt\r\n\r\n\r\nurl_with_uname = 'https://pandasusr:pandaspwd@pandastest.mooo.com:5000/aaa.csv'\r\ncsv_txt = get_https_basic_auth_ignore_invalid_cert( url_with_uname, verify_ssl=False) \r\ndf = pd.read_csv( StringIO(csv_txt.strip()) ) # forgot to close the StringIO buffer\r\n\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/313613519",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-313613519",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 313613519,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzYxMzUxOQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-07T07:53:35Z",
    "updated_at": "2017-07-07T07:53:35Z",
    "author_association": "MEMBER",
    "body": "@skynss @gfyoung : This works, but it's very Python 2-oriented and would need to be generalized for Python 3.  I think if you can do that, that would make things a lot easier to incorporate."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/313748961",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-313748961",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 313748961,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzc0ODk2MQ==",
    "user": {
      "login": "skynss",
      "id": 8762041,
      "node_id": "MDQ6VXNlcjg3NjIwNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8762041?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skynss",
      "html_url": "https://github.com/skynss",
      "followers_url": "https://api.github.com/users/skynss/followers",
      "following_url": "https://api.github.com/users/skynss/following{/other_user}",
      "gists_url": "https://api.github.com/users/skynss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skynss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skynss/subscriptions",
      "organizations_url": "https://api.github.com/users/skynss/orgs",
      "repos_url": "https://api.github.com/users/skynss/repos",
      "events_url": "https://api.github.com/users/skynss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skynss/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-07T17:48:17Z",
    "updated_at": "2017-07-07T17:48:17Z",
    "author_association": "NONE",
    "body": "The following code:\r\n\r\n- Works on py 2.x py 3.x (verified on 3.6.x)\r\n- Is live working demo that you can instantly test by simply copy and paste.\r\n- does not depend on `requests` library\r\n- works with both valid signed SSL certs as well as allow bypass of verification for self-signed SSL certs\r\n\r\n```python\r\nimport sys\r\nimport ssl\r\n\r\ndef split_uname_from_url(url_with_uname):\r\n    try:\r\n        from urlparse import urlparse\r\n    except:\r\n        from urllib.parse import urlparse\r\n    o = urlparse( url_with_uname)\r\n    uname = o.username\r\n    pwd = o.password\r\n    # create url without username and pwd   \r\n    usrch = '{}:{}@{}'.format( uname, pwd, o.hostname)\r\n    url_no_usrpwd = url_with_uname.replace( usrch , o.hostname)\r\n    return uname, pwd, url_no_usrpwd\r\n\r\ndef get_https_basic_auth_ignore_invalid_cert( url_with_uname, verify_ssl=True):\r\n    uname, pwd, url_no_usrpwd = split_uname_from_url(url_with_uname)\r\n    print('Calling [{}] -- uname:[{}] -- pwd[{}]'.format(url_no_usrpwd, uname, pwd))\r\n    if sys.version_info[0] < 3:\r\n        fn= get_py2_https_basic_auth_ignore_invalid_cert\r\n    else:\r\n        fn = get_py3_https_basic_auth_ignore_invalid_cert\r\n    return fn( uname, pwd, url_no_usrpwd, verify_ssl=verify_ssl)\r\n\r\ndef get_py2_https_basic_auth_ignore_invalid_cert( uname, pwd, url_no_usrpwd, verify_ssl=True):\r\n    import urllib2, base64\r\n    request = urllib2.Request( url_no_usrpwd )\r\n    base64string = base64.encodestring('%s:%s' % (uname, pwd)).replace('\\n', '')\r\n    request.add_header(\"Authorization\", \"Basic %s\" % base64string)   \r\n    # I hope pandas can support self signed certs too \r\n    if verify_ssl:\r\n        result = urllib2.urlopen(request) \r\n    else: # in case of self signed SSL certificates. \r\n        result = urllib2.urlopen(request, context=ssl._create_unverified_context() )\r\n    return result.read()\r\n\r\ndef get_py3_https_basic_auth_ignore_invalid_cert( uname, pwd, url_no_usrpwd, verify_ssl=True):\r\n    import urllib.request\r\n    passman = urllib.request.HTTPPasswordMgrWithDefaultRealm()\r\n    passman.add_password(None, url_no_usrpwd, uname, pwd)\r\n    authhandler = urllib.request.HTTPBasicAuthHandler(passman)\r\n    if verify_ssl:\r\n        opener = urllib.request.build_opener(authhandler)\r\n    else:\r\n        context = ssl.create_default_context()\r\n        context.check_hostname = False\r\n        context.verify_mode = ssl.CERT_NONE\r\n        opener = urllib.request.build_opener(authhandler, urllib.request.HTTPSHandler(context=context))\r\n    urllib.request.install_opener(opener)\r\n    res = urllib.request.urlopen(url_no_usrpwd)\r\n    return res.read().decode('utf-8')\r\n\r\n\r\ndef csv_to_df(csv_txt, **kwargs):\r\n    '''\r\n    @param csv_txt: text of csv rows.\r\n    @param kwargs: to pass to pd.read_csv\r\n    @return df\r\n    '''\r\n    import pandas as pd\r\n    try: \r\n        from StringIO import StringIO #python2.7\r\n    except:  \r\n        from io import StringIO #python3.x. \r\n    buf = None\r\n    df = None\r\n    try:\r\n        buf = StringIO(csv_txt)\r\n        df = pd.read_csv(buf, **kwargs)\r\n    finally:\r\n        if buf:\r\n            try:\r\n                buf.close()\r\n            except:\r\n                pass\r\n    return df\r\n\r\n    \r\nurl_with_uname = 'https://pandasusr:pandaspwd@pandastest.mooo.com:5000/aaa.csv'\r\ncsv_txt = get_https_basic_auth_ignore_invalid_cert( url_with_uname, verify_ssl=False) \r\ndf = csv_to_df( csv_txt.strip() ) \r\nprint(df.to_string(index=False))\r\n\r\n```\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/313749448",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-313749448",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 313749448,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzc0OTQ0OA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-07T17:50:16Z",
    "updated_at": "2017-07-07T17:50:29Z",
    "author_association": "MEMBER",
    "body": "@skynss : Awesome!  Thanks for doing this (I can check this later today).  Now that we have something that acts as a workaround, I think the next step is seeing whether you can incorporate parts of this into the existing codebase.  Want to give that a shot?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/313792353",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-313792353",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 313792353,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzc5MjM1Mw==",
    "user": {
      "login": "skynss",
      "id": 8762041,
      "node_id": "MDQ6VXNlcjg3NjIwNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8762041?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skynss",
      "html_url": "https://github.com/skynss",
      "followers_url": "https://api.github.com/users/skynss/followers",
      "following_url": "https://api.github.com/users/skynss/following{/other_user}",
      "gists_url": "https://api.github.com/users/skynss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skynss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skynss/subscriptions",
      "organizations_url": "https://api.github.com/users/skynss/orgs",
      "repos_url": "https://api.github.com/users/skynss/repos",
      "events_url": "https://api.github.com/users/skynss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skynss/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-07T21:03:28Z",
    "updated_at": "2017-07-07T21:03:28Z",
    "author_association": "NONE",
    "body": "@gfyoung  I am in midst of travel. Feel free to check in incorporate, i wont get chance to look until couple of days."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/313882537",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-313882537",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 313882537,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzg4MjUzNw==",
    "user": {
      "login": "skynss",
      "id": 8762041,
      "node_id": "MDQ6VXNlcjg3NjIwNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8762041?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skynss",
      "html_url": "https://github.com/skynss",
      "followers_url": "https://api.github.com/users/skynss/followers",
      "following_url": "https://api.github.com/users/skynss/following{/other_user}",
      "gists_url": "https://api.github.com/users/skynss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skynss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skynss/subscriptions",
      "organizations_url": "https://api.github.com/users/skynss/orgs",
      "repos_url": "https://api.github.com/users/skynss/repos",
      "events_url": "https://api.github.com/users/skynss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skynss/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-08T21:38:05Z",
    "updated_at": "2017-07-08T21:38:05Z",
    "author_association": "NONE",
    "body": "The following is updated code which makes it easier to merge into\r\n `pandas/io/commons.py` and call `_urlopen` with new params\r\nI am not sure how to capture `verify_ssl=False` user input from `read_csv` to\r\nallow user to bypass SSL cert verification.\r\n\r\n```python\r\nimport sys\r\nis_py3 = sys.version_info[0] >= 3 # replace with 'compat.PY3'\r\n\r\n## BEGIN SECTION modifications to pandas/io/common.py\r\nimport ssl\r\nimport base64\r\n\r\n\r\nif is_py3:\r\n    from urllib.parse import urlparse as parse_url\r\n    from urllib.request import urlopen, build_opener, install_opener, \\\r\n            HTTPPasswordMgrWithDefaultRealm, HTTPBasicAuthHandler, HTTPSHandler\r\n    _urlopen = urlopen  \r\nelse:\r\n    from urlparse import urlparse as parse_url\r\n    from urllib2 import urlopen as _urlopen\r\n    from urllib2 import Request\r\n    from contextlib import contextmanager, closing  # noqa\r\n    from functools import wraps  # noqa\r\n\r\n    # @wraps(_urlopen)\r\n    @contextmanager\r\n    def urlopen(*args, **kwargs):\r\n        with closing(_urlopen(*args, **kwargs)) as f:\r\n            yield f\r\n\r\n\r\ndef split_uname_from_url(url_with_uname):\r\n    o = parse_url( url_with_uname)\r\n    usrch = '{}:{}@{}'.format( o.username, o.password, o.hostname)\r\n    url_no_usrpwd = url_with_uname.replace( usrch , o.hostname)\r\n    return o.username, o.password, url_no_usrpwd\r\n\r\ndef get_urlopen_args( url_with_uname, verify_ssl=True):\r\n    uname, pwd, url_no_usrpwd = split_uname_from_url(url_with_uname)\r\n    print('Calling [{}] -- uname:[{}] -- pwd[{}]'.format(url_no_usrpwd, uname, pwd))\r\n    if is_py3:\r\n        fn= get_urlopen_args_py3\r\n    else:\r\n        fn = get_urlopen_args_py2\r\n    req, kwargs = fn( uname, pwd, url_no_usrpwd, verify_ssl=verify_ssl)\r\n    return req, kwargs\r\n\r\ndef get_urlopen_args_py2( uname, pwd, url_no_usrpwd, verify_ssl=True):\r\n    req = Request( url_no_usrpwd )\r\n    base64string = base64.encodestring('{}:{}'.format(uname, pwd)).replace('\\n', '')\r\n    req.add_header(\"Authorization\", \"Basic {}\".format( base64string) )   \r\n    # I hope pandas can support self signed certs too \r\n    kwargs = {}\r\n    if not verify_ssl:\r\n        kwargs['context'] = ssl._create_unverified_context()\r\n    return req, kwargs\r\n\r\ndef get_urlopen_args_py3( uname, pwd, url_no_usrpwd, verify_ssl=True):\r\n    passman = HTTPPasswordMgrWithDefaultRealm()\r\n    passman.add_password(None, url_no_usrpwd, uname, pwd)\r\n    authhandler = HTTPBasicAuthHandler(passman)\r\n    if verify_ssl:\r\n        opener = build_opener(authhandler)\r\n    else:\r\n        context = ssl.create_default_context()\r\n        context.check_hostname = False\r\n        context.verify_mode = ssl.CERT_NONE\r\n        opener = build_opener(authhandler, HTTPSHandler(context=context))\r\n    install_opener(opener)\r\n    return url_no_usrpwd, {}\r\n\r\n## END SECTION modifications to pandas/io/common.py\r\n\r\ndef call_urlopen( url_with_uname, verify_ssl=False):\r\n    # in get_filepath_or_buffer prior to calling _urlopen get params\r\n    # not sure where to obtain verify_ssl from pd.read_csv \r\n    req, kwargs = get_urlopen_args(url_with_uname, verify_ssl) \r\n    resp = _urlopen(req , **kwargs)\r\n    return resp_to_csv(resp)\r\n\r\n    \r\ndef resp_to_csv(resp):\r\n    csv = resp.read()\r\n    if is_py3:\r\n        csv = csv.decode('utf-8')\r\n    return csv\r\n\r\n    \r\ndef csv_to_df(csv_txt, **kwargs):\r\n    '''\r\n    @param csv_txt: text of csv rows.\r\n    @param kwargs: to pass to pd.read_csv\r\n    @return df\r\n    '''\r\n    import pandas as pd\r\n    try: \r\n        from StringIO import StringIO #python2.7\r\n    except:  \r\n        from io import StringIO #python3.x. \r\n    buf = None\r\n    df = None\r\n    try:\r\n        buf = StringIO(csv_txt)\r\n        df = pd.read_csv(buf, **kwargs)\r\n    finally:\r\n        if buf:\r\n            try:\r\n                buf.close()\r\n            except:\r\n                pass\r\n    return df\r\n\r\nurl_with_uname = 'https://pandasusr:pandaspwd@pandastest.mooo.com:5000/aaa.csv'\r\ncsv_txt = call_urlopen( url_with_uname, verify_ssl=False) \r\ndf = csv_to_df( csv_txt.strip() ) \r\nprint(df.to_string(index=False))\r\n```\r\nI am not quiet familiar with process involved around contributing to pandas - so please feel free to take over."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/313882615",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-313882615",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 313882615,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzg4MjYxNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-08T21:39:33Z",
    "updated_at": "2017-07-08T21:39:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "http://pandas.pydata.org/pandas-docs/stable/contributing.html"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/314959271",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-314959271",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 314959271,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDk1OTI3MQ==",
    "user": {
      "login": "skynss",
      "id": 8762041,
      "node_id": "MDQ6VXNlcjg3NjIwNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8762041?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skynss",
      "html_url": "https://github.com/skynss",
      "followers_url": "https://api.github.com/users/skynss/followers",
      "following_url": "https://api.github.com/users/skynss/following{/other_user}",
      "gists_url": "https://api.github.com/users/skynss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skynss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skynss/subscriptions",
      "organizations_url": "https://api.github.com/users/skynss/orgs",
      "repos_url": "https://api.github.com/users/skynss/repos",
      "events_url": "https://api.github.com/users/skynss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skynss/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-13T03:19:16Z",
    "updated_at": "2017-07-13T03:19:16Z",
    "author_association": "NONE",
    "body": "@jreback Thx. Followed it. @gfyoung I forked and modified the codebase with modifications to the best of my ability. here it is: https://github.com/skynss/pandas/tree/basic-auth-https-self-signed \r\n\r\nI don't know how to check in live test scenario so I am going to leave that out.\r\nCan one of you folks help verify I am ready? Here is verification that tests `read_csv`, `read_json`, `read_excel` and `read_html` \r\nIt supports having username and password either contained within a url or passed separately as params to read_csv.. etc functions. Usually username, pwd will be passed as parameter.. so I decided to add that support.\r\n\r\n```python\r\n# pip install --upgrade https://github.com/skynss/pandas/archive/basic-auth-https-self-signed.zip\r\n# live working test that tests both scenarios:\r\n# pd.read_csv('https://uname:pwd@fqdn:<port>/fname.csv', verify_ssl=False)\r\n# pd.read_csv('https://fqdn:<port>/fname.csv', username='uname', password='pwd', verify_ssl=False)\r\n\r\nimport pandas as pd\r\n\r\nuname='pandasusr'\r\npwd='pandaspwd'\r\nurl = 'https://{}pandastest.mooo.com:5000/'\r\nverify_ssl=False\r\n\r\ndef get_df(url, uname, pwd, verify_ssl, pd_read_fn, fname):\r\n  furl = url + fname\r\n  kwargs = {}\r\n  if uname:\r\n    kwargs['username']=uname\r\n  if pwd:\r\n    kwargs['password']=pwd\r\n  if verify_ssl is not None:\r\n    kwargs['verify_ssl']=verify_ssl\r\n  print('\\n' +furl)\r\n  df = pd_read_fn(furl, **kwargs)\r\n  if type(df) is list: # html\r\n    df = df[0]\r\n  print(df.to_string(index=False))\r\n  print(df.to_json())\r\n\r\nfparams = [ (pd.read_csv,   'aaa.csv'),\r\n             (pd.read_json,  'jdoc.json'),\r\n             (pd.read_excel, 'ex_doc.xlsx'),\r\n             (pd.read_html,  'html_file.html') ]\r\n\r\nfor pd_read_fn, fname in fparams:\r\n  u = url.format('{}:{}@'.format(uname, pwd))\r\n  get_df( u, None, None, verify_ssl, pd_read_fn, fname) #1 url with username/pwd as part of url\r\n  u2 = url.format('')\r\n  get_df( u2, uname, pwd, verify_ssl, pd_read_fn, fname) # url with username/pwd  as params\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/314961552",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-314961552",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 314961552,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDk2MTU1Mg==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-13T03:38:57Z",
    "updated_at": "2017-07-13T03:39:29Z",
    "author_association": "MEMBER",
    "body": "@skynss : Thanks for doing this!  A couple of points:\r\n\r\n1) To truly verify that your code works, I imagine that we would need to set up our own endpoint with credentials that we are comfortable sharing since it will only be storing (hopefully) non-sensitive data.\r\n\r\n2) It's unfortunate that you have to duplicate this logic of username, password, and SSL verification across all of these methods.  I wonder if there might be an easier way to abstract this similar to what `requests` does by just accepting `tuple` instead of separate parameters.\r\n\r\n3) You will definitely need to condense your `get_urlopen_args` functions.  Having three functions for one thing will not work for any reviewer.  Try coming up with ways to streamline your code and look for places where you truly need to differentiate between Python 2 and 3.\r\n\r\nOne place to examine: why can't you use the `Request` class in Python 3?  It still exists under `urllib.Request`.  Whether you looked into it or not, an explanation in this issue would be useful. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/314976015",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-314976015",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 314976015,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDk3NjAxNQ==",
    "user": {
      "login": "skynss",
      "id": 8762041,
      "node_id": "MDQ6VXNlcjg3NjIwNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8762041?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skynss",
      "html_url": "https://github.com/skynss",
      "followers_url": "https://api.github.com/users/skynss/followers",
      "following_url": "https://api.github.com/users/skynss/following{/other_user}",
      "gists_url": "https://api.github.com/users/skynss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skynss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skynss/subscriptions",
      "organizations_url": "https://api.github.com/users/skynss/orgs",
      "repos_url": "https://api.github.com/users/skynss/repos",
      "events_url": "https://api.github.com/users/skynss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skynss/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-13T05:36:56Z",
    "updated_at": "2017-07-13T05:36:56Z",
    "author_association": "NONE",
    "body": "@gfyoung Thx - implemented the changes. Please view. I had tried the 'Request' from py3 already and it didnt work. But I kept the py3 code the way it is because it seems extensible and correct way long term. I changed auth to match requests lib, and kept verify_ssl separate just like requests.\r\nHere is updated test code that uses the auth pair\r\n\r\n```python\r\nimport pandas as pd\r\n\r\nuname='pandasusr'\r\npwd='pandaspwd'\r\nurl = 'https://{}pandastest.mooo.com:5000/'\r\nverify_ssl=False\r\n\r\ndef get_df(url, uname, pwd, verify_ssl, pd_read_fn, fname):\r\n  furl = url + fname\r\n  kwargs = {}\r\n  if uname or pwd:\r\n    kwargs['auth']=(uname, pwd)\r\n  if verify_ssl is not None:\r\n    kwargs['verify_ssl']=verify_ssl\r\n  print('\\n' +furl)\r\n  df = pd_read_fn(furl, **kwargs)\r\n  if type(df) is list: # html\r\n    df = df[0]\r\n  print(df.to_string(index=False))\r\n  print(df.to_json())\r\n\r\nfparams = [ (pd.read_csv, 'aaa.csv'), (pd.read_json, 'jdoc.json'), (pd.read_excel, 'ex_doc.xlsx'), (pd.read_html, 'html_file.html') ]\r\n\r\nfor pd_read_fn, fname in fparams:\r\n  u = url.format('{}:{}@'.format(uname, pwd))\r\n  get_df( u, None, None, verify_ssl, pd_read_fn, fname)\r\n  u2 = url.format('')\r\n  get_df( u2, uname, pwd, verify_ssl, pd_read_fn, fname)\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/314978771",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-314978771",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 314978771,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDk3ODc3MQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-13T05:55:31Z",
    "updated_at": "2017-07-13T05:57:36Z",
    "author_association": "MEMBER",
    "body": "@skynss : Cool!  Thanks for the `auth` inputs.  I think mirroring the `requests` library is a good idea because it should be more intuitive for people given that `requests` is pretty widely used.   Nevertheless:\r\n\r\n1) What was the reason for removing your test `test_split_url_extract_uname_pwd` ?  I think you should be able to test that functionality.\r\n\r\n2) I'm not convinced by your response regarding the `Request` class for two reasons:\r\n\r\n* Your comment in the code does not make mention it not working.  You don't need to add this in the comments, but what happens when you used the `Request` object in Python 3?  From what I understand, the change from Python 2 to 3 was largely a refactoring.  Thus, I would be surprised if that implementation failed for Python 3.\r\n\r\n* I don't agree with your argument about the Python 3 implementation being more extensible.  The main issue I have is the fact you have to install an opener as the global default via `install_opener`.  Why do we need to change the user's Python environment to make this work?  The Python 2 implementation is self-contained, and in the interests of modularity, that would be preferred.\r\n\r\n3) Could you add your test code that you provide in this issue discussion as a file on your branch?  It won't get merged, but as this is not a PR yet, you can just put it anywhere for now. :smile:"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/315028633",
    "html_url": "https://github.com/pandas-dev/pandas/issues/16716#issuecomment-315028633",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/16716",
    "id": 315028633,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNTAyODYzMw==",
    "user": {
      "login": "skynss",
      "id": 8762041,
      "node_id": "MDQ6VXNlcjg3NjIwNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8762041?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skynss",
      "html_url": "https://github.com/skynss",
      "followers_url": "https://api.github.com/users/skynss/followers",
      "following_url": "https://api.github.com/users/skynss/following{/other_user}",
      "gists_url": "https://api.github.com/users/skynss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skynss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skynss/subscriptions",
      "organizations_url": "https://api.github.com/users/skynss/orgs",
      "repos_url": "https://api.github.com/users/skynss/repos",
      "events_url": "https://api.github.com/users/skynss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skynss/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-13T09:44:16Z",
    "updated_at": "2017-07-13T09:44:16Z",
    "author_association": "NONE",
    "body": "@gfyoung \r\n1. I was on the fence if the test was meaningful. I was trying to compact the code into 1 function. But added it back\r\n2. you are right.. Modified. Much simpler and cleaner code now. I thought it didnt work initially with similar code earlier.. but it is now.\r\n3. added test code to `test_basic_auth_self_signed.py`"
  }
]
