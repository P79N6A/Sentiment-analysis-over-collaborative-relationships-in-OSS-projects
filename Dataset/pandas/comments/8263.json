[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55503633",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8263#issuecomment-55503633",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8263",
    "id": 55503633,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTAzNjMz",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-13T19:11:24Z",
    "updated_at": "2014-09-13T19:11:24Z",
    "author_association": "MEMBER",
    "body": "Shouldn't we just disallow that a Series name is unhashable?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55504804",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8263#issuecomment-55504804",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8263",
    "id": 55504804,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTA0ODA0",
    "user": {
      "login": "dr-leo",
      "id": 3160562,
      "node_id": "MDQ6VXNlcjMxNjA1NjI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3160562?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dr-leo",
      "html_url": "https://github.com/dr-leo",
      "followers_url": "https://api.github.com/users/dr-leo/followers",
      "following_url": "https://api.github.com/users/dr-leo/following{/other_user}",
      "gists_url": "https://api.github.com/users/dr-leo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dr-leo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dr-leo/subscriptions",
      "organizations_url": "https://api.github.com/users/dr-leo/orgs",
      "repos_url": "https://api.github.com/users/dr-leo/repos",
      "events_url": "https://api.github.com/users/dr-leo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dr-leo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-13T19:50:02Z",
    "updated_at": "2014-09-13T19:50:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "Good proposal. This would make the API clear and consistent. It should\nalso be less error-prone than catching all situations in which a\nSeries.name is propagated to an index.\n\nAnd one can always use namedtuples instead of dict to store\nmulti-dimensional key-value pairs as metadata in Series.name or\ndf.columns. This could be mentioned somewhere in the docs, I think, as\nnamedtuple is not so widely used, although it comes in handy.\n\nThe following is a bit off-topic, but I am kind of struggling with\nbuilding a nnametuple class factory returning a singleton, i.e. don't\ncreate a new namedtuple class if the same has been created before. I\nfound a verbose and hardly elegant solution in pandaSDMX... So I was\nwondering if pandas could provide a utility function for this common task...\n\nAm 13.09.2014 21:11, schrieb Joris Van den Bossche:\n\n> Shouldn't we just disallow that a Series name is unhashable?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/pydata/pandas/issues/8263#issuecomment-55503633.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55509446",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8263#issuecomment-55509446",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8263",
    "id": 55509446,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTA5NDQ2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-13T22:49:26Z",
    "updated_at": "2014-09-13T22:49:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dr-leo pull-request for this?\n\nI think you can simply intercept the `__setattr__` call (and validate) in core/generic.py\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55521050",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8263#issuecomment-55521050",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8263",
    "id": 55521050,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTIxMDUw",
    "user": {
      "login": "dr-leo",
      "id": 3160562,
      "node_id": "MDQ6VXNlcjMxNjA1NjI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3160562?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dr-leo",
      "html_url": "https://github.com/dr-leo",
      "followers_url": "https://api.github.com/users/dr-leo/followers",
      "following_url": "https://api.github.com/users/dr-leo/following{/other_user}",
      "gists_url": "https://api.github.com/users/dr-leo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dr-leo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dr-leo/subscriptions",
      "organizations_url": "https://api.github.com/users/dr-leo/orgs",
      "repos_url": "https://api.github.com/users/dr-leo/repos",
      "events_url": "https://api.github.com/users/dr-leo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dr-leo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-14T10:01:07Z",
    "updated_at": "2014-09-14T10:01:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "Do we agree what we want?\n\nOption 1: require Series.name to be hashable as suggested by Joris\n2. enforce that df.columns is hashable.\n\nAs I wrote, I favour option 1. But your hints for a PR seem to imply\noption2.\n\nAm 14.09.2014 00:49, schrieb jreback:\n\n> @dr-leo https://github.com/dr-leo pull-request for this?\n> \n> I think you can simply intercept the |**setattr**| call (and validate)\n> in core/generic.py\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/pydata/pandas/issues/8263#issuecomment-55509446.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/55554383",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8263#issuecomment-55554383",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8263",
    "id": 55554383,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTU0Mzgz",
    "user": {
      "login": "dr-leo",
      "id": 3160562,
      "node_id": "MDQ6VXNlcjMxNjA1NjI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3160562?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dr-leo",
      "html_url": "https://github.com/dr-leo",
      "followers_url": "https://api.github.com/users/dr-leo/followers",
      "following_url": "https://api.github.com/users/dr-leo/following{/other_user}",
      "gists_url": "https://api.github.com/users/dr-leo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dr-leo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dr-leo/subscriptions",
      "organizations_url": "https://api.github.com/users/dr-leo/orgs",
      "repos_url": "https://api.github.com/users/dr-leo/repos",
      "events_url": "https://api.github.com/users/dr-leo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dr-leo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-15T05:40:40Z",
    "updated_at": "2014-09-15T05:40:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Jeff:\n\nI am unfamiliar with the PD sources. But I've seen that Series inherits\nfrom core.generic.PDFrame. So your hint makes sense even for option 1,\ni.e. preventing Series.name to be set to an unhashable type.\n\nI will look into this and if I succeed, send my first PR. But due to\nother projects it will take a couple of weeks. I see no urgency. This is\nlikely for v0.16.\n\n@All: for most of you this is a matter of a couple of minutes. So if you\nfeel this should be done earlier, feel free to jump in.\n\nLeo\n\nAm 14.09.2014 00:49, schrieb jreback:\n\n> @dr-leo https://github.com/dr-leo pull-request for this?\n> \n> I think you can simply intercept the |**setattr**| call (and validate)\n> in core/generic.py\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/pydata/pandas/issues/8263#issuecomment-55509446.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/68600198",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8263#issuecomment-68600198",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8263",
    "id": 68600198,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NjAwMTk4",
    "user": {
      "login": "dr-leo",
      "id": 3160562,
      "node_id": "MDQ6VXNlcjMxNjA1NjI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3160562?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dr-leo",
      "html_url": "https://github.com/dr-leo",
      "followers_url": "https://api.github.com/users/dr-leo/followers",
      "following_url": "https://api.github.com/users/dr-leo/following{/other_user}",
      "gists_url": "https://api.github.com/users/dr-leo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dr-leo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dr-leo/subscriptions",
      "organizations_url": "https://api.github.com/users/dr-leo/orgs",
      "repos_url": "https://api.github.com/users/dr-leo/repos",
      "events_url": "https://api.github.com/users/dr-leo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dr-leo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-03T16:20:09Z",
    "updated_at": "2015-01-03T16:20:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have just submitted a minimalist [PR](https://github.com/pydata/pandas/pull/9193) addressing the easier part of this issue, i.e., validating that Series.name is hashable.  \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/70332392",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8263#issuecomment-70332392",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8263",
    "id": 70332392,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMzMyMzky",
    "user": {
      "login": "dr-leo",
      "id": 3160562,
      "node_id": "MDQ6VXNlcjMxNjA1NjI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3160562?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dr-leo",
      "html_url": "https://github.com/dr-leo",
      "followers_url": "https://api.github.com/users/dr-leo/followers",
      "following_url": "https://api.github.com/users/dr-leo/following{/other_user}",
      "gists_url": "https://api.github.com/users/dr-leo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dr-leo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dr-leo/subscriptions",
      "organizations_url": "https://api.github.com/users/dr-leo/orgs",
      "repos_url": "https://api.github.com/users/dr-leo/repos",
      "events_url": "https://api.github.com/users/dr-leo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dr-leo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-16T22:23:27Z",
    "updated_at": "2015-01-16T22:23:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Some thoughts:\n\nConsider the following script:\n\nfrom numpy.random import randn\nimport pandas as PD\nimport pdb\nidx = PD.MultiIndex.from_product((('one', 'two'), ('foo', 'bar')), names = ('level1', 'level2'))\ndf=PD.DataFrame(randn(4,4), columns = idx)\npdb.set_trace()\ns=df.one.bar \n1. The purpose of this issue is this: When extracting a column from a multi-indexed df, the returned series should not just have the immediate key at the lowest index level, but a namedtuple whose field names are the MI level names and whose items are the keys at each MI level.\n1. Tracing through the execution of a command such as s=df.one.foo shows what one would expect: The Series at df.one.bar is retrieved by walking down the MI levels. Here we have two levels. df.foo yields a 2-column df with one level and keys foo and bar. The first index level (one, two) is forgotten as it is not part of the sub-df. The second iteration yields the actual Series with name 'bar'. 3. If we want to set the Series.name to the namedtuple as described above, we need to remember the level names and the labels. How? Where?\n2. I find it inconsistent to attach to the Series the full path through the levels (i.e. Level1:one, Level2:bar, whereas df.one only yields a df with a simple index ('foo', 'bar'). df.one should have a multi-index as well having just 'one' at Level1 and ('foo','bar') at Level2. This would reflect the idea of attaching the corresponding subset of the multi-index to whatever subset of columns we extract from a df. In other words: Extracting a sub-frame or Series yields a multi-index with the same number of levels as the original frame, but with a smaller subset of tuples. For Series, the single tuple is stored in a namedtuple whereas a sub-frame will have a proper MultiIndex.\n   Does this semantics make sense? This would break some code, sure. But is the Series.name as namedtuple without also changing the behavior for sub-frames convincing? \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/70359091",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8263#issuecomment-70359091",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8263",
    "id": 70359091,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMzU5MDkx",
    "user": {
      "login": "toddrjen",
      "id": 2272878,
      "node_id": "MDQ6VXNlcjIyNzI4Nzg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2272878?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toddrjen",
      "html_url": "https://github.com/toddrjen",
      "followers_url": "https://api.github.com/users/toddrjen/followers",
      "following_url": "https://api.github.com/users/toddrjen/following{/other_user}",
      "gists_url": "https://api.github.com/users/toddrjen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toddrjen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toddrjen/subscriptions",
      "organizations_url": "https://api.github.com/users/toddrjen/orgs",
      "repos_url": "https://api.github.com/users/toddrjen/repos",
      "events_url": "https://api.github.com/users/toddrjen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toddrjen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-17T08:16:20Z",
    "updated_at": "2015-01-17T08:16:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think it should use similar mechanics to now, except with the addition of\na name.  So it should return the same number of values as it does now.  In\ncases where it currently drops a value, it should continue to do so.  In\ncases where it doesn't currently drop a value, the value should still be\nmaintained.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/70364049",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8263#issuecomment-70364049",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8263",
    "id": 70364049,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMzY0MDQ5",
    "user": {
      "login": "dr-leo",
      "id": 3160562,
      "node_id": "MDQ6VXNlcjMxNjA1NjI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3160562?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dr-leo",
      "html_url": "https://github.com/dr-leo",
      "followers_url": "https://api.github.com/users/dr-leo/followers",
      "following_url": "https://api.github.com/users/dr-leo/following{/other_user}",
      "gists_url": "https://api.github.com/users/dr-leo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dr-leo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dr-leo/subscriptions",
      "organizations_url": "https://api.github.com/users/dr-leo/orgs",
      "repos_url": "https://api.github.com/users/dr-leo/repos",
      "events_url": "https://api.github.com/users/dr-leo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dr-leo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-17T11:45:00Z",
    "updated_at": "2015-01-17T11:45:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just to make sure I understand what you mean:\n\nDo you agree that all NDFrames (Series, DataFrame, Index, MultiIndex and\nperhaps Panel) should have a name attribute?\n\nI think this would be a good idea as it would make things more\nconsistent and provide a place for simple metadata at DataFrame or Index\nlevel. So you could name a MultiIndex \"Earth\" and the levels continents,\ncountries, regions etc. A DataFrame with this MultiIndex could be named\n'GDP'. And df.America.Canada would have a 1-level column index with\nlabels for the regions. Its name would be a namedtuple with two fields\nfrom the original DF (Continent, Country). If you pick the series for\nthe region Quebec, the Series.name would have three fields: Continent,\nCountry, Region.\n\nThis would not break any code.\n\nAm 17.01.2015 um 09:16 schrieb toddrjen:\n\n> I think it should use similar mechanics to now, except with the\n> addition of\n> a name. So it should return the same number of values as it does now. In\n> cases where it currently drops a value, it should continue to do so. In\n> cases where it doesn't currently drop a value, the value should still be\n> maintained.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/pydata/pandas/issues/8263#issuecomment-70359091.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/70365335",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8263#issuecomment-70365335",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8263",
    "id": 70365335,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMzY1MzM1",
    "user": {
      "login": "toddrjen",
      "id": 2272878,
      "node_id": "MDQ6VXNlcjIyNzI4Nzg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2272878?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toddrjen",
      "html_url": "https://github.com/toddrjen",
      "followers_url": "https://api.github.com/users/toddrjen/followers",
      "following_url": "https://api.github.com/users/toddrjen/following{/other_user}",
      "gists_url": "https://api.github.com/users/toddrjen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toddrjen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toddrjen/subscriptions",
      "organizations_url": "https://api.github.com/users/toddrjen/orgs",
      "repos_url": "https://api.github.com/users/toddrjen/repos",
      "events_url": "https://api.github.com/users/toddrjen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toddrjen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-17T12:31:11Z",
    "updated_at": "2015-01-17T12:31:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "So names from successive slices should be appended to the existing name?\nWhat if the existing name is a string or ordinary tuple?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/70365819",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8263#issuecomment-70365819",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8263",
    "id": 70365819,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMzY1ODE5",
    "user": {
      "login": "dr-leo",
      "id": 3160562,
      "node_id": "MDQ6VXNlcjMxNjA1NjI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3160562?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dr-leo",
      "html_url": "https://github.com/dr-leo",
      "followers_url": "https://api.github.com/users/dr-leo/followers",
      "following_url": "https://api.github.com/users/dr-leo/following{/other_user}",
      "gists_url": "https://api.github.com/users/dr-leo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dr-leo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dr-leo/subscriptions",
      "organizations_url": "https://api.github.com/users/dr-leo/orgs",
      "repos_url": "https://api.github.com/users/dr-leo/repos",
      "events_url": "https://api.github.com/users/dr-leo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dr-leo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-17T12:48:07Z",
    "updated_at": "2015-01-17T12:48:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "In the Earth example, if you do\ndf=DataFrame(my_array, columns = my_multiindex, name='GDP')\n\nand then:\nGDp_Canada = df.Americas.Canada\n\ngdp_Canada would have an automatically generated name. It would be a\nnamedtuple as described earlier.\ngdp_Quebec = gdp_Canda.Quebec\n\nwouldd be a Series whose name would also be auto-generated as it is now,\nbut with more information on the position within the original frame. So\nthere is no conflict with user-generated names.\n\nAm 17.01.2015 um 13:31 schrieb toddrjen:\n\n> So names from successive slices should be appended to the existing name?\n> What if the existing name is a string or ordinary tuple?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/pydata/pandas/issues/8263#issuecomment-70365335.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/70386237",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8263#issuecomment-70386237",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8263",
    "id": 70386237,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwMzg2MjM3",
    "user": {
      "login": "toddrjen",
      "id": 2272878,
      "node_id": "MDQ6VXNlcjIyNzI4Nzg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2272878?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toddrjen",
      "html_url": "https://github.com/toddrjen",
      "followers_url": "https://api.github.com/users/toddrjen/followers",
      "following_url": "https://api.github.com/users/toddrjen/following{/other_user}",
      "gists_url": "https://api.github.com/users/toddrjen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toddrjen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toddrjen/subscriptions",
      "organizations_url": "https://api.github.com/users/toddrjen/orgs",
      "repos_url": "https://api.github.com/users/toddrjen/repos",
      "events_url": "https://api.github.com/users/toddrjen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toddrjen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-17T22:02:15Z",
    "updated_at": "2015-01-17T22:03:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "First, do we agree that both of these versions of `GDp_Canada` are identical?\n\n``` Python\n>>> GDp_Canada = df.Americas.Canada\n```\n\nand:\n\n``` Python\n>>> GDp_Americas = df.Americas\n>>> GDp_Canada = GDp_Americas.Canada\n```\n\nIf so, then I see two possible ways that the name generation can play out.  The first is that names of previous levels are dropped when generated new names:\n\n``` Python\n>>> df.name  # this has no pre-existing name\n''\n>>> GDp_Americas = df.Americas\n>>> GDp_Americas.name\nname(Continent='Americas')\n>>> GDp_Canada = GDp_Americas.Canada\n>>> GDp_Canada.name\nname(Country='Canada')\n>>> GDp_Quebec = GDp_Canada.Quebec\n>>> GDp_Quebec = GDp_Canada.name\nname(Region='Quebec')\n>>> df.Americas.Canada.Quebec.name\nname(Region='Quebec')\n```\n\nThe other is that names are appended to the existing name:\n\n``` Python\n>>> df.name  # this has no pre-existing name\n''\n>>> GDp_Americas = df.Americas\n>>> GDp_Americas.name\nname(Continent='Americas')\n>>> GDp_Canada = GDp_Americas.Canada\n>>> GDp_Canada.name\nname(Continent='Americas', Country='Canada')\n>>> GDp_Quebec = GDp_Canada.Quebec\n>>> GDp_Quebec = GDp_Canada.name\nname(Continent='Americas', Country='Canada', Region='Quebec')\n>>> df.Americas.Canada.Quebec.name\nname(Continent='Americas', Country='Canada', Region='Quebec')\n```\n\nThe problem arises here, if we use the second scenario:\n\n``` Python\n>>> df.name  # this now HAS a pre-existing name\n'GDP'\n>>> GDp_Americas = df.Americas\n>>> GDp_Americas.name\n????\n```\n\nWhat should be the resulting name from this situation?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/70404704",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8263#issuecomment-70404704",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8263",
    "id": 70404704,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNDA0NzA0",
    "user": {
      "login": "dr-leo",
      "id": 3160562,
      "node_id": "MDQ6VXNlcjMxNjA1NjI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3160562?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dr-leo",
      "html_url": "https://github.com/dr-leo",
      "followers_url": "https://api.github.com/users/dr-leo/followers",
      "following_url": "https://api.github.com/users/dr-leo/following{/other_user}",
      "gists_url": "https://api.github.com/users/dr-leo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dr-leo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dr-leo/subscriptions",
      "organizations_url": "https://api.github.com/users/dr-leo/orgs",
      "repos_url": "https://api.github.com/users/dr-leo/repos",
      "events_url": "https://api.github.com/users/dr-leo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dr-leo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-18T11:33:46Z",
    "updated_at": "2015-01-18T11:33:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Please see my responses below.\n\nIn summary, names are technically not generated by appending to the\nprevious name, but by creating a namedtuple class using the factory\nfunction collections.namedtuple(). Its fields are the index level names\nup to the current level. The name is set to an instance whose values\ncome from the index levels (keys) of the requested sub-frame\n(df.Americas.Canada or df.Americas.Mexico etc.) or series\n(df.Americas.Canada.Quebec or ...Ontario). You cannot append to a\nnamedtuple anyway. You have to make a class first, and then instantiate\nit. So you need exactly one namedtuple class (singleton) per index\nlevel. Any user-provided df-name is discarded.\n\nAm 17.01.2015 um 23:02 schrieb toddrjen:\n\n> First, do we agree that both of these versions of |GDp_Canada| are\n> identical?\n> \n> > > > GDp_Canada = df.Americas.Canada\n> \n> and:\n> \n> > > > GDp_Americas = df.Americas\n> > > > GDp_Canada = GDp_Americas.Canada\n> > > > **Yes. The '.' operator is and should remain associative.\n> \n> If so, then I see two possible ways that the name generation can play\n> out. The first is that names of previous levels are dropped when\n> generated new names:\n> \n> > > > df.name  # this has no pre-existing name\n> > > > *\\* It may have a user-provided name like s=Series([1,3], name='hello').\n> > > > DataFrame() would have an optional kwarg 'name'.\n> > > > \n> > > > GDp_Americas = df.Americas\n> > > > GDp_Americas.name\n> > > > name(Continent='Americas')\n> > > > GDp_Canada = GDp_Americas.Canada\n> > > > GDp_Canada.name\n> > > > name(Country='Canada')\n> > > > GDp_Quebec = GDp_Canada.Quebec\n> > > > GDp_Quebec = GDp_Canada.name\n> > > > name(Region='Quebec')\n> > > > df.Americas.Canada.Quebec.name\n> > > > name(Region='Quebec')\n> > > > *\\* IMHO this would be second-best as it would provide insufficient info.\n> > > > The big idea is to have name tell the user where the sub-frame/series is\n> > > > derived from.\n> \n> The other is that names are appended to the existing name:\n> \n> > > > df.name  # this has no pre-existing name ''\n> > > > *\\* Same as before: It may have user-provided name, or defaults to None,\n> > > > not ''.\n> > > > \n> > > > GDp_Americas = df.Americas\n> > > > GDp_Americas.name\n> > > > name(Continent='Americas')\n> > > > *\\* Yes. df.name is discarded. The appending business starts at the third\n> > > > index level. At the second level you have a namedtuple with one field,\n> > > > i.e. Continent.\n> > > > \n> > > > GDp_Canada = GDp_Americas.Canada\n> > > > GDp_Canada.name\n> > > > name(Continent='Americas', Country='Canada')\n> > > > GDp_Quebec = GDp_Canada.Quebec\n> > > > GDp_Quebec = GDp_Canada.name\n> > > > name(Continent='Americas', Country='Canada', Region='Quebec')\n> > > > df.Americas.Canada.Quebec.name\n> > > > name(Continent='Americas', Country='Canada', Region='Quebec')\n> > > > *\\* Exactly. That how I think it should be.\n> \n> The problem arises here:\n> \n> > > > df.name  # this now HAS a pre-existing name\n> > > > 'GDP'\n> > > > *\\* I'm not sure if I see your point. If 'GDP' was the user-provided\n> > > > name, df.Americas.name won't be appended to it but auto-generated from\n> > > > the first index level, whatever df.name might have been. df.Americas is\n> > > > a different frame after all. It is up to the user to recall that its\n> > > > values are about GDP.\n> > > > GDp_Americas = df.Americas\n> > > > GDp_Americas.name\n> > > > ????\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/pydata/pandas/issues/8263#issuecomment-70386237.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/70407190",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8263#issuecomment-70407190",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8263",
    "id": 70407190,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNDA3MTkw",
    "user": {
      "login": "toddrjen",
      "id": 2272878,
      "node_id": "MDQ6VXNlcjIyNzI4Nzg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2272878?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/toddrjen",
      "html_url": "https://github.com/toddrjen",
      "followers_url": "https://api.github.com/users/toddrjen/followers",
      "following_url": "https://api.github.com/users/toddrjen/following{/other_user}",
      "gists_url": "https://api.github.com/users/toddrjen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/toddrjen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/toddrjen/subscriptions",
      "organizations_url": "https://api.github.com/users/toddrjen/orgs",
      "repos_url": "https://api.github.com/users/toddrjen/repos",
      "events_url": "https://api.github.com/users/toddrjen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/toddrjen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-18T12:51:38Z",
    "updated_at": "2015-01-18T12:51:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "On Sun, Jan 18, 2015 at 12:33 PM, dr-leo notifications@github.com wrote:\n\n> > The problem arises here:\n> > \n> > > > > df.name # this now HAS a pre-existing name\n> > > > > 'GDP'\n> > > > > *\\* I'm not sure if I see your point. If 'GDP' was the user-provided\n> > > > > name, df.Americas.name won't be appended to it but auto-generated from\n> > > > > the first index level, whatever df.name might have been. df.Americas is\n> > > > > a different frame after all. It is up to the user to recall that its\n> > > > > values are about GDP.\n> \n> So what if the existing name is a namedtuple that is otherwise identical to\n> a generated one?  How can pandas tell the different between a user-defined\n> namedtuple and a generated one?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/70416379",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8263#issuecomment-70416379",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8263",
    "id": 70416379,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNDE2Mzc5",
    "user": {
      "login": "dr-leo",
      "id": 3160562,
      "node_id": "MDQ6VXNlcjMxNjA1NjI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3160562?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dr-leo",
      "html_url": "https://github.com/dr-leo",
      "followers_url": "https://api.github.com/users/dr-leo/followers",
      "following_url": "https://api.github.com/users/dr-leo/following{/other_user}",
      "gists_url": "https://api.github.com/users/dr-leo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dr-leo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dr-leo/subscriptions",
      "organizations_url": "https://api.github.com/users/dr-leo/orgs",
      "repos_url": "https://api.github.com/users/dr-leo/repos",
      "events_url": "https://api.github.com/users/dr-leo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dr-leo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-18T17:14:02Z",
    "updated_at": "2015-01-18T17:14:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "You have a point here. In a non-technical sense generating the new name\nis appending the first index level name as field and respective value to\nthe nametuple of the original df. Technically, to create the nametuple\nclass for the new name, you take the fields from df.name and add the\nhighest level name such as country... Hence, the name for the resulting\ndf or series is derived from the current name rather than the\nmulti-index of the original frame.\n\nThe answer to your problem is to do this whole business in a new\nread-only attribute named context, path, key or whatever. By default,\nits value would be an empty tuple, like so:\n\n> > > df.context == (,)\n> > >   True\n> > > df.Americas.context == ('continent': 'AMericas')\n> > > True\n\nSo we need not care about user-defined names. These could be propagated\nunchanged like so:\n\n> > > df.name == df.Americas.name == df.Americas.Canada.name == 'GDP'\n> > > True\n\nBut name propagation would be a separate issue. It could even be\ngeneralized to other types of column or row selection.\n\nAm 18.01.2015 um 13:51 schrieb toddrjen:\n\n> On Sun, Jan 18, 2015 at 12:33 PM, dr-leo notifications@github.com wrote:\n> \n> > > The problem arises here:\n> > > \n> > > > > > df.name # this now HAS a pre-existing name\n> > > > > > 'GDP'\n> > > > > > *\\* I'm not sure if I see your point. If 'GDP' was the user-provided\n> > > > > > name, df.Americas.name won't be appended to it but auto-generated from\n> > > > > > the first index level, whatever df.name might have been. df.Americas is\n> > > > > > a different frame after all. It is up to the user to recall that its\n> > > > > > values are about GDP.\n> > \n> > So what if the existing name is a namedtuple that is otherwise\n> > identical to\n> > a generated one? How can pandas tell the different between a user-defined\n> > namedtuple and a generated one?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/pydata/pandas/issues/8263#issuecomment-70407190.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/70451217",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8263#issuecomment-70451217",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8263",
    "id": 70451217,
    "node_id": "MDEyOklzc3VlQ29tbWVudDcwNDUxMjE3",
    "user": {
      "login": "dr-leo",
      "id": 3160562,
      "node_id": "MDQ6VXNlcjMxNjA1NjI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3160562?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dr-leo",
      "html_url": "https://github.com/dr-leo",
      "followers_url": "https://api.github.com/users/dr-leo/followers",
      "following_url": "https://api.github.com/users/dr-leo/following{/other_user}",
      "gists_url": "https://api.github.com/users/dr-leo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dr-leo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dr-leo/subscriptions",
      "organizations_url": "https://api.github.com/users/dr-leo/orgs",
      "repos_url": "https://api.github.com/users/dr-leo/repos",
      "events_url": "https://api.github.com/users/dr-leo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dr-leo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-19T06:28:41Z",
    "updated_at": "2015-01-19T06:28:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "I now think we need one attribute or rather property for this in each\ndimension. It should be attached to the indices like so:\n\ndf.Americas.Canada.columns.context = ('continent': 'Americas')\n\nor\n\ndf2.index.context = 'sex': 'female')\n\nSame for Panel. I withdraw my earlier comment that it should be attached\nto DataFrame etc. - Clearly, it should be attached to Series directly:\n\ndf.Americas.Canada.Quebec.area = (..., 'country': 'Canada')\n\nA more intuitive name might be area or selection rather than context.\n\nAn alternative implementation would use tuple rather than namedtuple\nplus a link to the index instance it has been derived from:\n\ndf.Americas.Canada.columns.area = ('Americas', )\ndf.Americas.Canada.columns.origin = df.columns\n\nBut this may have memory implications due to the reference to df.columns.\n\nAm 18.01.2015 um 18:13 schrieb Dr. Leo:\n\n> You have a point here. In a non-technical sense generating the new\n> name is appending the first index level name as field and respective\n> value to the nametuple of the original df. Technically, to create the\n> nametuple class for the new name, you take the fields from df.name and\n> add the highest level name such as country... Hence, the name for the\n> resulting df or series is derived from the current name rather than\n> the multi-index of the original frame.\n> \n> The answer to your problem is to do this whole business in a new\n> read-only attribute named context, path, key or whatever. By default,\n> its value would be an empty tuple, like so:\n> \n> > > > df.context == (,)\n> > > >   True\n> > > > df.Americas.context == ('continent': 'AMericas')\n> > > > True\n> \n> So we need not care about user-defined names. These could be\n> propagated unchanged like so:\n> \n> > > > df.name == df.Americas.name == df.Americas.Canada.name == 'GDP'\n> > > > True\n> \n> But name propagation would be a separate issue.\n> \n> Am 18.01.2015 um 13:51 schrieb toddrjen:\n> \n> > On Sun, Jan 18, 2015 at 12:33 PM, dr-leo notifications@github.com\n> > wrote:\n> > \n> > > > The problem arises here:\n> > > > \n> > > > > > > df.name # this now HAS a pre-existing name\n> > > > > > > 'GDP'\n> > > > > > > *\\* I'm not sure if I see your point. If 'GDP' was the user-provided\n> > > > > > > name, df.Americas.name won't be appended to it but auto-generated from\n> > > > > > > the first index level, whatever df.name might have been. df.Americas is\n> > > > > > > a different frame after all. It is up to the user to recall that its\n> > > > > > > values are about GDP.\n> > > \n> > > So what if the existing name is a namedtuple that is otherwise\n> > > identical to\n> > > a generated one? How can pandas tell the different between a user-defined\n> > > namedtuple and a generated one?\n> > \n> > —\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/pydata/pandas/issues/8263#issuecomment-70407190.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/403161741",
    "html_url": "https://github.com/pandas-dev/pandas/issues/8263#issuecomment-403161741",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8263",
    "id": 403161741,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzE2MTc0MQ==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-06T22:28:21Z",
    "updated_at": "2018-07-06T22:28:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Series.name now has to be hashable.\r\n\r\nNamedtuples are fine for series.name\r\n\r\nLet me know if there were unresolved issues in this thread."
  }
]
