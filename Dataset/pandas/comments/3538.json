[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/18774864",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3538#issuecomment-18774864",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3538",
    "id": 18774864,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4Nzc0ODY0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-31T22:23:48Z",
    "updated_at": "2013-05-31T22:23:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Using a single column of `None` makes the dtype `object` for that column. Since you can't pivot on a non-numeric column it is dropped.\n\nSpecify the column as `np.nan` instead.\n\n```\nIn [24]: df = pd.DataFrame({'A' : ['one', 'two'] * 3,'B' : ['x', 'y', 'z'] * 2,'C' : ['foo', 'bar', 'foobar', 'bar', 'foobar', 'foo'],'D' : np.random.randn(6),'E' : np.nan})\n\nIn [25]: pd.pivot_table(df, values=['D','E'], rows=['A','B'], cols=['C'])\nOut[25]: \n              D                        E             \nC           bar       foo    foobar  bar  foo  foobar\nA   B                                                \none x       NaN -0.160243       NaN  NaN  NaN     NaN\n    y       NaN       NaN  0.789371  NaN  NaN     NaN\n    z       NaN       NaN  1.158343  NaN  NaN     NaN\ntwo x  0.640552       NaN       NaN  NaN  NaN     NaN\n    y -0.341340       NaN       NaN  NaN  NaN     NaN\n    z       NaN -0.064847       NaN  NaN  NaN     NaN\n\n```\n\n`filna(0)` doesn't work for the same reason; it fills it with zeros, but the dtype is still `object`\n\n```\nIn [26]: df = pd.DataFrame({'A' : ['one', 'two'] * 3,'B' : ['x', 'y', 'z'] * 2,'C' : ['foo', 'bar', 'foobar', 'bar', 'foobar', 'foo'],'D' : np.random.randn(6),'E' : None})\n\n\nIn [27]: df.dtypes\nOut[27]: \nA     object\nB     object\nC     object\nD    float64\nE     object\ndtype: object\n\nIn [28]: df.fillna(0).dtypes\nOut[28]: \nA     object\nB     object\nC     object\nD    float64\nE     object\ndtype: object\n\n```\n\nPandas will treat a `None` as a `nan` if it can infer a proper dtype (e.g. there are other values), otherwise it must be treated as a python object; In general having `object` dtype means certain operations cannot proceed\n"
  }
]
