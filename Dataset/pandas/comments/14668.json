[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/260832834",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-260832834",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 260832834,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MDgzMjgzNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-16T02:10:01Z",
    "updated_at": "2016-11-16T02:10:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "cc @wesm @jorisvandenbossche @shoyer @TomAugspurger @sinhrks \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/260893757",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-260893757",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 260893757,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MDg5Mzc1Nw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-16T09:16:04Z",
    "updated_at": "2016-11-16T09:16:39Z",
    "author_association": "MEMBER",
    "body": "@jreback Cool!\n\nSome quick feedback based on your examples above:\n- I would keep `agg`/`aggregate` strictly for aggregations (so only allow functions that reduce the values to a single scalar). IMO, this will make the scope of this function easier to grasp and less corner cases (eg no varying output shape depending on what kind of function is passed)\n- This would mean that apply is _not_ an exact synonym, and that both reductive and transformation functions are not automatically handled (but we can do this for `apply`, this would then be the more general and flexible version. Maybe we could also have a `transform` method to fully mimic groupby methods?)\n- What happens when you pass a single function (not in a list) like `s.agg('min')`? I suppose you get a scalar result like `s.min()` ?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/260932822",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-260932822",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 260932822,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MDkzMjgyMg==",
    "user": {
      "login": "codecov-io",
      "id": 8655789,
      "node_id": "MDQ6VXNlcjg2NTU3ODk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/8655789?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov-io",
      "html_url": "https://github.com/codecov-io",
      "followers_url": "https://api.github.com/users/codecov-io/followers",
      "following_url": "https://api.github.com/users/codecov-io/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov-io/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov-io/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov-io/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov-io/orgs",
      "repos_url": "https://api.github.com/users/codecov-io/repos",
      "events_url": "https://api.github.com/users/codecov-io/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov-io/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-16T12:19:27Z",
    "updated_at": "2017-04-14T15:39:13Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/14668?src=pr&el=h1) Report\n> Merging [#14668](https://codecov.io/gh/pandas-dev/pandas/pull/14668?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/9991579c812e5a7c977e69f03b390adf7974445f?src=pr&el=desc) will **decrease** coverage by `0.08%`.\n> The diff coverage is `98.52%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/14668/graphs/tree.svg?width=650&height=150&src=pr&token=eZ4WkYLtcO)](https://codecov.io/gh/pandas-dev/pandas/pull/14668?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master   #14668      +/-   ##\n==========================================\n- Coverage   91.11%   91.02%   -0.09%     \n==========================================\n  Files         145      145              \n  Lines       50332    50391      +59     \n==========================================\n+ Hits        45858    45869      +11     \n- Misses       4474     4522      +48\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `88.82% <98.52%> (-0.09%)` | :arrow_down: |\n| #single | `40.33% <35.29%> (-0.01%)` | :arrow_down: |\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/14668?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/core/generic.py](https://codecov.io/gh/pandas-dev/pandas/pull/14668?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvZ2VuZXJpYy5weQ==) | `96.28% <100%> (+0.02%)` | :arrow_up: |\n| [pandas/core/base.py](https://codecov.io/gh/pandas-dev/pandas/pull/14668?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvYmFzZS5weQ==) | `96.19% <100%> (+3.87%)` | :arrow_up: |\n| [pandas/core/series.py](https://codecov.io/gh/pandas-dev/pandas/pull/14668?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvc2VyaWVzLnB5) | `95.08% <100%> (+0.09%)` | :arrow_up: |\n| [pandas/core/frame.py](https://codecov.io/gh/pandas-dev/pandas/pull/14668?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvZnJhbWUucHk=) | `97.65% <96.55%> (+0.07%)` | :arrow_up: |\n| [pandas/core/groupby.py](https://codecov.io/gh/pandas-dev/pandas/pull/14668?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvZ3JvdXBieS5weQ==) | `92.03% <0%> (-3.48%)` | :arrow_down: |\n| [pandas/core/algorithms.py](https://codecov.io/gh/pandas-dev/pandas/pull/14668?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvYWxnb3JpdGhtcy5weQ==) | `94.46% <0%> (-0.16%)` | :arrow_down: |\n| [pandas/types/cast.py](https://codecov.io/gh/pandas-dev/pandas/pull/14668?src=pr&el=tree#diff-cGFuZGFzL3R5cGVzL2Nhc3QucHk=) | `86.89% <0%> (+0.74%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/14668?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/14668?src=pr&el=footer). Last update [9991579...ae6c6f6](https://codecov.io/gh/pandas-dev/pandas/pull/14668?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/260945732",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-260945732",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 260945732,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MDk0NTczMg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-16T13:26:09Z",
    "updated_at": "2016-11-16T13:26:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche \n\n```\nIn [2]: s = Series(range(6))\n\nIn [3]: s.agg('min')\nOut[3]: 0\n\nIn [4]: s.agg(['min'])\nOut[4]:\nmin    0\ndtype: int64\n```\n\nso typically in groupby/rolling/resample we don't do transform operations, unless we explicity want them (e.g. by using `.transform`).\n\nWith a series/dataframe OTOH, I think this is fairly common. `.apply` does both ATM. So easy enough to separate out this behavior for reductions to `.agg` and transforms to `.transform`. \n\nI _may_ actually have to do the computations before can determine this though (and raise an appropriate error).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/261115016",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-261115016",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 261115016,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MTExNTAxNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-17T00:15:30Z",
    "updated_at": "2016-11-17T00:15:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "update the top section a bit.\n\nNot sure what I should do in cases like this. could skip, or maybe raise better message.\n\n```\nIn [16]: df = pd.DataFrame({'A': range(5), 'B': 5, 'C':'foo'})\n\nIn [17]: df\nOut[17]: \n   A  B    C\n0  0  5  foo\n1  1  5  foo\n2  2  5  foo\n3  3  5  foo\n4  4  5  foo\n\nIn [18]: df.transform(['log', 'abs'])\nAttributeError: 'str' object has no attribute 'log'\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/261115183",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-261115183",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 261115183,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MTExNTE4Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-17T00:16:30Z",
    "updated_at": "2016-11-17T00:16:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "we could add a `numeric_only=True` default.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/267471860",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-267471860",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 267471860,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NzQ3MTg2MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-15T23:10:34Z",
    "updated_at": "2016-12-15T23:10:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche any more comments?\r\n\r\nthis is for 0.20 so will be in master for a bit."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/269242905",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-269242905",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 269242905,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTI0MjkwNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-26T21:27:42Z",
    "updated_at": "2016-12-26T21:27:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "any remaining comments? @TomAugspurger @wesm @sinhrks \r\n\r\n@jorisvandenbossche all of your points were addressed.\r\n\r\nThis may not be perfect and need tweaking, but I think banging on it in master for a while is useful."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/269248373",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-269248373",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 269248373,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTI0ODM3Mw==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-26T23:19:32Z",
    "updated_at": "2016-12-26T23:19:32Z",
    "author_association": "MEMBER",
    "body": "Will take a last look tomorrow!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/269326973",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-269326973",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 269326973,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTMyNjk3Mw==",
    "user": {
      "login": "TomAugspurger",
      "id": 1312546,
      "node_id": "MDQ6VXNlcjEzMTI1NDY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1312546?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TomAugspurger",
      "html_url": "https://github.com/TomAugspurger",
      "followers_url": "https://api.github.com/users/TomAugspurger/followers",
      "following_url": "https://api.github.com/users/TomAugspurger/following{/other_user}",
      "gists_url": "https://api.github.com/users/TomAugspurger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TomAugspurger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TomAugspurger/subscriptions",
      "organizations_url": "https://api.github.com/users/TomAugspurger/orgs",
      "repos_url": "https://api.github.com/users/TomAugspurger/repos",
      "events_url": "https://api.github.com/users/TomAugspurger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TomAugspurger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-27T13:36:45Z",
    "updated_at": "2016-12-27T13:36:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "> This may not be perfect and need tweaking, but I think banging on it in master for a while is useful\r\n\r\nWon't have time to go through in detail, but based on my last skim I'm +1 on merge and iterate after Joris after today."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/269468649",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-269468649",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 269468649,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTQ2ODY0OQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-28T12:08:33Z",
    "updated_at": "2016-12-28T12:11:57Z",
    "author_association": "MEMBER",
    "body": "High level comments. I still think that:\r\n\r\n* `aggregate`/`agg` should be strictly for aggregations. IMO we should better disallow transforming functions in `agg` to keep the scope of `agg` limited. \r\n* aggregations of a Series should not return a DataFrame. I would rather go for a MultiIndex Series if you pass a nested dict. Current behaviour of PR:\r\n  \r\n    ```\r\n    In [14]: s = pd.Series(range(6))\r\n\r\n    In [15]: s.agg({'foo' : ['min','max'], 'bar' : ['sum', 'mean']})\r\n    Out[15]: \r\n          foo   bar\r\n    max   5.0   NaN\r\n    mean  NaN   2.5\r\n    min   0.0   NaN\r\n    sum   NaN  15.0\r\n    ```\r\n\r\n  but this could also result in:\r\n\r\n    ```\r\n    foo  max      5.0\r\n         min      0.0\r\n    bar  mean     2.5\r\n         sum     15.0\r\n    dtype: float64\r\n    ```\r\n\r\n  Then the return type does not depend on the actual content of the passed dict (but only: single function -> scalar, list of dict of functions -> Series). This keeps it IMO more simple and straightforward.\r\n\r\n* reducing functions in `transform` should work (result broadcasting to the origin size). But that can certainly be seen as a further enhancement for a next PR.\r\n\r\nWould love to hear some thought from others on this.\r\n\r\nFurther, just to keep track of this, a possible addition of `numeric_only=True` is also a to do item for future?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/269469475",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-269469475",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 269469475,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTQ2OTQ3NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-28T12:16:55Z",
    "updated_at": "2016-12-28T12:16:55Z",
    "author_association": "MEMBER",
    "body": "@jreback I also had a strange issue when testing:\r\n\r\n```\r\nIn [17]: df = pd.DataFrame({'A': range(6), 'B': 5}, index=range(6))\r\n\r\nIn [18]: df\r\nOut[18]: \r\n   A  B\r\n0  0  5\r\n1  1  5\r\n2  2  5\r\n3  3  5\r\n4  4  5\r\n5  5  5\r\n\r\nIn [19]: df.agg(lambda x: 1)\r\nOut[19]: \r\nA    1\r\nB    1\r\ndtype: int64\r\n\r\nIn [20]: df.agg([lambda x: 1])\r\nOut[20]: \r\n         A        B\r\n  <lambda> <lambda>\r\n0        1        1\r\n1        1        1\r\n2        1        1\r\n3        1        1\r\n4        1        1\r\n5        1        1\r\n```\r\n\r\nI often test with dummy functions like the above with a clear return shape of the single function (so here it is a custom passed reducing function that returns a scalar). In the first case it works, but when passing it in a list, it does not work.\r\n\r\nIf I slightly adapt the function:\r\n\r\n```\r\nIn [24]: df.agg([lambda x: min(1, x.max())])\r\nOut[24]: \r\n          A  B\r\n<lambda>  1  1\r\n```\r\nthen this now does work, although the function this returns exactly the same for all columns."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/269780098",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-269780098",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 269780098,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTc4MDA5OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-30T14:53:54Z",
    "updated_at": "2016-12-30T14:54:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "ok updated to return a Series if Series input always. It will be a MI if multiple aggregations are passed.\r\n\r\n```\r\nIn [1]: s = pd.Series(range(6))\r\n   ...: s.agg({'foo' : ['min','max'], 'bar' : ['sum', 'mean']})\r\n   ...: \r\nOut[1]: \r\nbar  mean     2.5\r\n     sum     15.0\r\nfoo  max      5.0\r\n     min      0.0\r\ndtype: float64\r\n```\r\n\r\nI am not actually naming the levels, but could think about that, maybe ``['keys', 'func']`` or something like that."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/269792249",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-269792249",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 269792249,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTc5MjI0OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-30T16:37:46Z",
    "updated_at": "2016-12-30T16:37:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here's what you will now get for a simultaneous agg & transform.\r\n\r\n```\r\nIn [1]: s = Series(range(5))\r\n\r\nIn [2]: s.agg({'foo': np.sqrt, 'bar': 'sum'})\r\nValueError: cannot perform both aggregation and transformation operations simultaneously\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/269794279",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-269794279",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 269794279,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTc5NDI3OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-30T16:54:30Z",
    "updated_at": "2016-12-30T16:58:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche \r\n> Further, just to keep track of this, a possible addition of numeric_only=True is also a to do item for future?\r\n\r\nyeah this is not well tested ATM, I think we need to exclude columns that raise by default (its not necessarily numeric though, e.g. min on a date column is fine).\r\n\r\nlets make a follow up for this case. #15015"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/269815234",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-269815234",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 269815234,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTgxNTIzNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-30T19:59:25Z",
    "updated_at": "2016-12-30T19:59:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "ok @jorisvandenbossche updated.\r\n\r\n(still a couple of questions you have raised), but can address later."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/269833419",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-269833419",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 269833419,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTgzMzQxOQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-30T23:12:04Z",
    "updated_at": "2016-12-30T23:12:44Z",
    "author_association": "MEMBER",
    "body": "Just taking a first look at this now (sorry I wasn't paying attention earlier!).\r\n\r\nI like the easy way to express multiple transformations or aggregations at once, but I have some concerns about the consistency of the syntax.\r\n\r\nIn particularly, the keys of a `dict` are interpreted very differently on `Series` vs `DataFrame`:\r\n- On a `Series`, dict keys are used to name the result.\r\n- On a `DataFrame`, dict keys are used to select the column to which the transform/aggregation is applied.\r\n\r\nThis makes it hard to understand and predict how these methods work without active experimentation. But, for what it's worth, I do recognize that this is consistent with how `groupby.agg` already works.\r\n\r\nI would be inclined to only support one of these use cases, though I'm not sure which one is more important. Ideally, we would have a separate orthogonal way to indicate how to name the result, so that could be used at the same time as column selection. Maybe keyword arguments would be a good way to distinguish, e.g., `df.agg(foo={'A': np.mean})` and `df.A.agg(foo=np.mean)`?\r\n\r\n---------\r\n\r\nAnother (possible) inconsistencies I noticed when trying this out:\r\n\r\n```\r\nIn [35]: df = pd.DataFrame({'A': range(5), 'B': [1, 1, 2, 2, 3]})\r\n\r\nIn [36]: df.groupby('B').agg({'A': [np.mean, np.sum], 'B': np.sum})\r\nOut[36]:\r\n    B    A\r\n  sum mean sum\r\nB\r\n1   2  0.5   1\r\n2   4  2.5   5\r\n3   3  4.0   4\r\n\r\nIn [37]: df.agg({'A': [np.mean, np.sum], 'B': np.sum})\r\nOut[37]:\r\n        B     A\r\nmean  NaN   2.0\r\nsum   9.0  10.0\r\n```\r\n\r\nI don't like how `DataFrame.agg` produces a ragged array (with NaNs). It might be a little more consistent with `DataFrame.groupby.agg` to return a Series with a `MultiIndex` (e.g., the columns from the `groupby.agg` result).\r\n\r\nThat said, I am still struggling to understand the full set of rules for these operations -- it's not obvious  to me when the result should use columns in a DataFrame or MultiIndex levels. Maybe that is an indication that we should consider simplifying these methods, to the cases where it's clear what the right behavior is."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/269844072",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-269844072",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 269844072,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTg0NDA3Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-31T02:20:30Z",
    "updated_at": "2016-12-31T02:21:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Maybe keyword arguments would be a good way to distinguish, e.g., df.agg(foo={'A': np.mean}) and df.A.agg(foo=np.mean)?\r\n\r\nthis is an idea (and its back-compat).\r\n\r\nThe biggest issue here is consistency between what users *already* do on groupby,rolling,resample. I don't think this PR should deviate at all. Its very familiar, and already quite well documented.\r\n\r\n```\r\nIn [35]: df = pd.DataFrame({'A': range(5), 'B': [1, 1, 2, 2, 3]})\r\n\r\nIn [36]: df.groupby('B').agg({'A': [np.mean, np.sum], 'B': np.sum})\r\nOut[36]:\r\n    B    A\r\n  sum mean sum\r\nB\r\n1   2  0.5   1\r\n2   4  2.5   5\r\n3   3  4.0   4\r\n\r\nIn [37]: df.agg({'A': [np.mean, np.sum], 'B': np.sum})\r\nOut[37]:\r\n        B     A\r\nmean  NaN   2.0\r\nsum   9.0  10.0\r\n```\r\n\r\nas far as the above example you pointed.\r\n\r\n- this is *exactly* what a typical ``.describe`` type operation does.\r\n\r\n```\r\nIn [50]: df.describe()\r\nOut[50]: \r\n              A        B\r\ncount  5.000000  5.00000\r\nmean   2.000000  1.80000\r\nstd    1.581139  0.83666\r\nmin    0.000000  1.00000\r\n25%    1.000000  1.00000\r\n50%    2.000000  2.00000\r\n75%    3.000000  2.00000\r\nmax    4.000000  3.00000\r\n```\r\n\r\n- the ``.groupby`` actually has another piece of information, namely the group indexer, which we don't have for the ``DataFrame.agg`` case\r\n- showing it like the groupby would be like this (ignore the gymnastics to get it here).\r\n\r\n```\r\nIn [47]: df.agg({'A': [np.mean, np.sum], 'B': np.sum}).unstack().dropna().to_frame().T.sort_index(axis=1)\r\nOut[47]: \r\n     A          B\r\n  mean   sum  sum\r\n0  2.0  10.0  9.0\r\n```\r\n\r\nbut this IMHO is not very useful (and kind of odd, e.g. what is the 0 index mean anyhow).\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/269844235",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-269844235",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 269844235,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTg0NDIzNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-31T02:24:39Z",
    "updated_at": "2016-12-31T02:24:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Here's what the MI Series would look like.\r\n```\r\nIn [53]: df.agg({'A': [np.mean, np.sum], 'B': np.sum}).unstack().sort_index()\r\nOut[53]: \r\nA  mean     2.0\r\n   sum     10.0\r\nB  mean     NaN\r\n   sum      9.0\r\ndtype: float64\r\n```\r\n\r\nAnd for comparison what we *ARE* doing with a Series\r\n```\r\nIn [54]: df.A.agg({'foo':[np.mean, np.sum], 'bar':np.sum})\r\nOut[54]: \r\nbar  sum     10.0\r\nfoo  mean     2.0\r\n     sum     10.0\r\nName: A, dtype: float64\r\n```\r\n\r\nSo I do like the consistency that Series -> Series, and DataFrame -> DataFrame. I think this is very predictable."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/271380231",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-271380231",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 271380231,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTM4MDIzMQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-09T19:19:55Z",
    "updated_at": "2017-01-09T19:19:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche if you have further thoughts."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/274339184",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-274339184",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 274339184,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDMzOTE4NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-22T15:56:21Z",
    "updated_at": "2017-01-22T15:56:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "unless any more comments, going to push this in soon."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/274376838",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-274376838",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 274376838,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDM3NjgzOA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-23T01:22:43Z",
    "updated_at": "2017-01-23T01:22:43Z",
    "author_association": "MEMBER",
    "body": "I am still -0 on the API here. Even though this is mostly consistent with how `.groupby(...).agg(...)` works, we should use this opportunity to clean up the API before extending it further.\r\n\r\nMy concern remains that there does not appear to be a simple set of rules we can write down for how this works without special cases at each leaf of the tree of possible call patterns. I want a short list of rules, not a flowchart."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/274377085",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-274377085",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 274377085,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDM3NzA4NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-23T01:25:45Z",
    "updated_at": "2017-01-23T01:25:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "any cleanup should be down after in another PR\r\n\r\nso what are the 'nice' simple rules that you propose?\r\n\r\nkeeping in mind the myriad of situations that we currently support?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/274378985",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-274378985",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 274378985,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDM3ODk4NQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-23T01:46:54Z",
    "updated_at": "2017-01-23T01:46:54Z",
    "author_association": "MEMBER",
    "body": "> any cleanup should be down after in another PR\r\n\r\nI don't like approach of adding features now and cleaning up the API later if someone gets around to it. As a mature library, we should add new features when we are confident that we have the right API.\r\n\r\nIn my opinion `.agg` is already one of pandas' features suitable for interactive use but not for production (https://github.com/pandas-dev/pandas/issues/13862), and we should not extend it in its current state.\r\n\r\n> so what are the 'nice' simple rules that you propose?\r\n>\r\n> keeping in mind the myriad of situations that we currently support?\r\n\r\nI don't have a proposal for handling the full generality of what `groupby(...).agg` allows. I think it's probably too complex already, and it would be better to support a subset of cases that can be done consistently.\r\n\r\nPossibly judgment from @wesm would be helpful here."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/274380904",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-274380904",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 274380904,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDM4MDkwNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-23T02:07:11Z",
    "updated_at": "2017-01-23T02:07:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "> In my opinion .agg is already one of pandas' features suitable for interactive use but not for production (#13862), and we should not extend it in its current state.\r\n\r\nand do you have *any* example of this? I find this statement pretty ridiculous actually. ``.agg`` is quite well defined.\r\n\r\n\r\n> I don't have a proposal for handling the full generality of what groupby(...).agg allows. I think it's probably too complex already, and it would be better to support a subset of cases that can be done consistently.\r\n\r\nwell that's not very helpful.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/274493738",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-274493738",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 274493738,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDQ5MzczOA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-23T13:56:09Z",
    "updated_at": "2017-01-23T13:56:09Z",
    "author_association": "MEMBER",
    "body": "Sorry I didn't reply earlier on the comments of @shoyer \r\n\r\nI agree with @shoyer that we should clean-up the API now, and not after merging the PR, *if* we want to do that (@jreback said above \"I don't think this PR should deviate at all [from the current groupby/rolling api]\", so that is a first point of discussion).\r\n\r\n>> I don't have a proposal for handling the full generality of what groupby(...).agg allows. I think it's probably too complex already, and it would be better to support a subset of cases that can be done consistently. \r\n>\r\n> well that's not very helpful.\r\n\r\nBut that's the point (AFAIU) that @shoyer makes: it will not be possible to handle all cases that groupby.agg currently supports with a cleaned-up API. So this is certainly a possible/helpful, although not yet concrete, proposal. \r\nRegarding the multiple ways how the dictionary keys are interpreted, @shoyer proposed above \"I would be inclined to only support one of these use cases, though I'm not sure which one is more important.\" \r\n\r\n---\r\n\r\nIn any case, having the rules very clearly specified is always useful, regardless of whether we end up simplifying them or not. \r\n(and this is currently not yet the case: the docstring is not fully complete (does not mention the renaming), and in the narrative docs it is scattered over examples (which is not bad, but a summary with the rules could be added).\r\n\r\nFirst try to get overview of current rules (from the top of my head, didn't check everything):\r\n\r\nAccepted values / returned output shape:\r\n\r\n- Scalar (function or string function name)\r\n  - For Series this gives a scalar\r\n  - For DataFrame this gives a Series with column names as labels\r\n- List of function specific\r\n  - For Series this gives a Series with function names as Series labels\r\n  - For DataFrame this gives a DataFrame with column names as column labels and function names as index labels\r\n- dict of scalar/list:\r\n  - output shape is similar to / depends on whether scalar or list is passed (*is this true?*)\r\n  - how dict keys are interpreted varies, see below\r\n\r\nInterpretation of dict structure:\r\n\r\n- For Series, the dict keys are use to name the result, instead of the default function name ('renaming' functionality)\r\n- For DataFrame:\r\n  - the dict keys are used to select columns and thus to apply specific functions to specific columns ('selection' functionality)\r\n  - but if the dict has multiple levels, the first level is used for 'selection', and the second level for 'renaming'.\r\n\r\nHere, the inconsistency is mainly between how dict keys are interpreted between Series / DataFrame.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/274495818",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-274495818",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 274495818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDQ5NTgxOA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-23T14:05:03Z",
    "updated_at": "2017-01-23T14:05:03Z",
    "author_association": "MEMBER",
    "body": "Related issue: https://github.com/pandas-dev/pandas/issues/8593. \r\nSee also https://github.com/pandas-dev/pandas/issues/9052#issuecomment-164759860 for a more detailed overview in case of `groupby` (and the comment above to indicate some further inconsistencies in the groupby case)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/274508089",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-274508089",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 274508089,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDUwODA4OQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-23T14:53:12Z",
    "updated_at": "2017-01-23T14:53:12Z",
    "author_association": "MEMBER",
    "body": "Regarding the different interpretation of the dict keys on Series vs DataFrame (renaming vs selecting), @shoyer said above:\r\n\r\n> This makes it hard to understand and predict how these methods work without active experimentation. But, for what it's worth, I do recognize that this is consistent with how groupby.agg already works. \r\n> I would be inclined to only support one of these use cases, though I'm not sure which one is more important. Ideally, we would have a separate orthogonal way to indicate how to name the result, so that could be used at the same time as column selection. Maybe keyword arguments would be a good way to distinguish\r\n\r\nTo explore the use of keyword arguments a bit further. \r\nFirst, I think the usage of `{col_name: ..}` is used in different places throughout the pandas API to specify actions on certain columns (eg astype, round, dtype=.., ...), so I think it would be logical to keep the dict keys for selection. That leaves keyword names for renaming (also consistent with eg `assign`)\r\n\r\nFor Series.agg, this would eliminate the use of dicts entirely:\r\n\r\n```\r\ns.agg(average=np.mean, standard_deviation='std')\r\n```\r\n\r\nFor DataFrame.agg, this would make the \"apply several functions to all columns but with custom name\"  actually easier:\r\n\r\n```\r\ndf.agg(average=np.mean, standard_deviation='std')\r\n```\r\n\r\n(where before you would have to specify a nested dict with repetition `{'colA': {'average':np.mean, 'standard_deviation':'std'}, 'colB': {'average':np.mean, 'standard_deviation':'std'}, ...}`) \r\nFor DataFrame, applying different functions on different columns stays the same:\r\n\r\n```\r\ndf.agg({'colA': 'mean', 'colB': 'count', ..})\r\n```\r\n\r\nOnly, if we keep dicts solely for selecting columns (so not using second level to rename), the complex examples of specifying different functions with custom name on different columns becomes more difficult, but still possible:\r\n\r\n```\r\ndf.agg(my_mean={'colA': 'mean'}, my_count={'colB': 'count'})\r\n```\r\n\r\n(but this is a bit ugly IMO)\r\n\r\nFrom writing this up, I actually seem to like this, but, it's not that the explanation will necessarily become less complex :-) (but more consistent between frame/series)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/274513870",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-274513870",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 274513870,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDUxMzg3MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-23T15:13:30Z",
    "updated_at": "2017-01-23T15:13:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "```\r\ndf.agg(my_mean={'colA': 'mean'}, my_count={'colB': 'count'})\r\n```\r\n\r\ncan be written like\r\n```\r\ndf.agg(my_mean=dict(colA='mean'), my_count=dict(colB='count'))\r\n```\r\n\r\nwhich IMHO 'looks' better (though functionally the same)\r\n\r\nin fact we talked about this in another issue to support named level lookup e.g.\r\n```df.loc[dict(level_0=1, level_2=['a', 'b'])]```, reminsent of ``xarray.sel()``, but using ``[]`` which support assignment (this obviously is a completely different purpose, I bring it up because the same issue of function call / vs dict syntax was important there)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/274828205",
    "html_url": "https://github.com/pandas-dev/pandas/pull/14668#issuecomment-274828205",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14668",
    "id": 274828205,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3NDgyODIwNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-24T15:01:02Z",
    "updated_at": "2017-01-26T08:20:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "ok, so if IIUC, @jorisvandenbossche and @shoyer main objections are in the *existing* interface w.r.t. how dict inputs are handled (differenty for Series/DataFrame).\r\n\r\nI would like to solve this objection first as its practically much easier to\r\n\r\n- fix the base infrastructure\r\n- deprecate what needs to be done\r\n- revise the API before this PR (which is just builds on the base structure)\r\n\r\nif we were to deprecate a dictionary passed to agg, in lieu of the using named args (that can accept scalar, list, dict) does this make things more clear?"
  }
]
