[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264251342",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14781#issuecomment-264251342",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14781",
    "id": 264251342,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDI1MTM0Mg==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-01T18:22:08Z",
    "updated_at": "2016-12-01T18:22:08Z",
    "author_association": "MEMBER",
    "body": "This is pretty lightweight and self-contained -- would be easy to copy into pandas: https://github.com/pydata/xarray/blob/master/xarray/core/extensions.py\r\n\r\nThe only change in the works is switching to warning instead of erroring when overriding a pre-existing attribute: https://github.com/pydata/xarray/pull/1149"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/312549000",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14781#issuecomment-312549000",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14781",
    "id": 312549000,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjU0OTAwMA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-03T04:50:13Z",
    "updated_at": "2017-07-03T04:50:13Z",
    "author_association": "MEMBER",
    "body": "Following up on this instead of opening a new issue: are accessors considered user-facing?  If so, is there a One True Way to put one together?  The `str` accessor comes from mixing in `strings.StringAccessorMixin`, while the `dt` and `cat` accessors are constructed inside the `Series` class definition.\r\n\r\nRelated 1: are `_make_dt_accessor` and `_make_cat_accessor` needed in the Series namespace?  Would those make sense to put into `_dir_deletions`?\r\n\r\nRelated 2: Right now `ser.dt == ser.dt` returns `False`.  If an enterprising young soul were to make a PR  implementing an `__eq__` method, what class would that belong in?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/312567562",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14781#issuecomment-312567562",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14781",
    "id": 312567562,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjU2NzU2Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-03T07:15:22Z",
    "updated_at": "2017-07-03T07:15:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jbrockmendel not sure what u are asking here"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/312687515",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14781#issuecomment-312687515",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14781",
    "id": 312687515,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjY4NzUxNQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-03T16:23:16Z",
    "updated_at": "2017-07-03T16:23:16Z",
    "author_association": "MEMBER",
    "body": "a) Are users supposed to be able to implement custom accessors?\r\nb) Is there a recipe for doing so?\r\n\r\nThe docstring [example](https://github.com/pydata/xarray/blob/master/xarray/core/extensions.py#L91) in  @shoyer's suggestion is pretty similar to what I have in mind.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/312718280",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14781#issuecomment-312718280",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14781",
    "id": 312718280,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjcxODI4MA==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-03T19:23:29Z",
    "updated_at": "2017-07-03T19:23:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "No, the existing accessor machinery is not user facing, this issue was about potentially adding some that is. \r\n\r\nI would be supportive of adding something like the xarray extension decorators, so PR would be welcome if you're interested in implementing something like that.  I think you could basically copy that implementation, most of the work would be docs and tests. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/314822559",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14781#issuecomment-314822559",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14781",
    "id": 314822559,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDgyMjU1OQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-12T16:24:40Z",
    "updated_at": "2017-07-12T16:24:40Z",
    "author_association": "MEMBER",
    "body": "Back-migrating question #16890 \r\n\r\n>> Are [`make_dt_accessor`, `_make_cat_accessor`, `_make_str_accesor`] needed in the user-facing namespace for some reason? If not, can we wedge them into _dir_deletions? I know the leading underscore makes it private, but dir(pd.DataFrame) and dir(pd.Series) have 444 and 441 members respectively. This gets pretty imposing.\r\n\r\n> not sure what you are mean here. accessor are by-definition namespaces that make the discovery easier and much more geared to the dtype.\r\n\r\nI communicated poorly by using `_add_series_or_dataframe_operations` as an example instead of the more-pertinent `_make_foo_accessor`.  My claim is that we can have e.g. the `dt` accessor without `_make_dt_accessor` being in the `Series` namespace.   Is there a reason it is needed in the namespace other than creating the accessor?\r\n\r\nThe \"wedge into _dir_deletions\" comment referred more generally to items that aren't so easy to get rid of entirely, but may be namespace-clutter.  This is not all that pertinent to the accessor topic.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/314831784",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14781#issuecomment-314831784",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14781",
    "id": 314831784,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNDgzMTc4NA==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-12T16:57:52Z",
    "updated_at": "2017-07-12T16:57:52Z",
    "author_association": "MEMBER",
    "body": "> Is there a reason it is needed in the namespace other than creating the accessor?\r\n\r\nI think these are basically one-time use methods. We're been somewhat sloppy about adding lots of private methods in the past, but since IPython exposes them in tab-completition there is indeed some virtue to cleaning things up later. Better still might be making these functions instead, so they never pollute the namespace in the first place."
  }
]
