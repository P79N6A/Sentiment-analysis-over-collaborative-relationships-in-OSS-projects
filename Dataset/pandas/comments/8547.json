[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/60207230",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8547#issuecomment-60207230",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8547",
    "id": 60207230,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjA3MjMw",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-23T08:25:16Z",
    "updated_at": "2014-10-23T08:25:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "**tl;dr** let's adopt `xxhash` for string hashing. cc-ing performance guys: @jreback, @bjonen, what do you think? Are there any other hash functions uses that may benefit by using xxhash? \n\nAs reported in #8524, new probing algorithm brings in a corner case: strings that have common prefix and differ in last few characters with `x31` hash function fall into neighbouring buckets which causes a lot more collisions because step sequence is `1, 3, 6, 10...` This causes serious performance degradation:\n\n### double hashing, hash=x31\n\n``` python\nIn [9]: %%timeit np.random.seed(0); s = pd.util.testing.rands_array(1, 10000)\nht = pd.hashtable.StringHashTable(len(s)); ht.factorize(s)\n   ...: \n10000 loops, best of 3: 157 µs per loop\n\n\nIn [2]: %%timeit np.random.seed(0); s = pd.util.testing.rands_array(2, 10000)\nht = pd.hashtable.StringHashTable(len(s)); ht.factorize(s)\n   ....: \n1000 loops, best of 3: 537 µs per loop\n\nIn [11]: %%timeit np.random.seed(0); s = ' ' * 100 + pd.util.testing.rands_array(2, 10000)\nht = pd.hashtable.StringHashTable(len(s)); ht.factorize(s)\n   ....: \n1000 loops, best of 3: 1.87 ms per loop\n```\n\n### quadratic probing, hash=x31\n\n``` python\n\nIn [1]: %%timeit np.random.seed(0); s = pd.util.testing.rands_array(1, 10000)\n..ht = pd.hashtable.StringHashTable(len(s)); ht.factorize(s)\n   ...: \n10000 loops, best of 3: 150 µs per loop\n\nIn [2]: %%timeit np.random.seed(0); s = pd.util.testing.rands_array(2, 10000)\nht = pd.hashtable.StringHashTable(len(s)); ht.factorize(s)\n   ...: \n100 loops, best of 3: 2.51 ms per loop\n\nIn [3]: %%timeit np.random.seed(0); s = ' ' * 100 + pd.util.testing.rands_array(2, 10000)\nht = pd.hashtable.StringHashTable(len(s)); ht.factorize(s)\n   ...: \n100 loops, best of 3: 5.17 ms per loop\n```\n\n### quadratic probing, hash=sbox\n\nI've tried using sbox hash as described [here](http://floodyberry.com/noncryptohashzoo/SBox.html):\n\n``` python\nIn [1]: %%timeit np.random.seed(0); s = pd.util.testing.rands_array(1, 10000)\nht = pd.hashtable.StringHashTable(len(s)); ht.factorize(s)\n   ...: \n10000 loops, best of 3: 159 µs per loop\n\nIn [2]: %%timeit np.random.seed(0); s = pd.util.testing.rands_array(2, 10000)\nht = pd.hashtable.StringHashTable(len(s)); ht.factorize(s)\n   ...: \n1000 loops, best of 3: 409 µs per loop\n\nIn [3]: %%timeit np.random.seed(0); s = ' ' * 100 + pd.util.testing.rands_array(2, 10000)\nht = pd.hashtable.StringHashTable(len(s)); ht.factorize(s)\n   ...: \n1000 loops, best of 3: 1.6 ms per loop\n```\n\nIt beats old version in all tested scenarios, but I was unable to find any licensing information, so bringing it in may be a grey-ish legal area\n\n### quadratic probing, hash=xxhash.\n\nThen I went to see comparative benchmarks involving sbox and found [this one](http://search.cpan.org/~sanko/Digest-xxHash-1.02/lib/Digest/xxHash.pm) mentioning `xxHash`. I pulled it in and it performed great on longer strings but had some slowness on the shortest ones: \n\n``` python\nIn [1]: %%timeit np.random.seed(0); s = pd.util.testing.rands_array(1, 10000)\nht = pd.hashtable.StringHashTable(len(s)); ht.factorize(s)\n   ...: \n1000 loops, best of 3: 211 µs per loop\n\nIn [2]: %%timeit np.random.seed(0); s = pd.util.testing.rands_array(2, 10000)\nht = pd.hashtable.StringHashTable(len(s)); ht.factorize(s)\n   ...: \n1000 loops, best of 3: 505 µs per loop\n\nIn [3]: %%timeit np.random.seed(0); s = ' ' * 100 + pd.util.testing.rands_array(2, 10000)\nht = pd.hashtable.StringHashTable(len(s)); ht.factorize(s)\n   ...: \n1000 loops, best of 3: 867 µs per loop\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/60227861",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8547#issuecomment-60227861",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8547",
    "id": 60227861,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjI3ODYx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-23T11:52:55Z",
    "updated_at": "2014-10-23T11:52:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "@immerrr would it be possible to do something like this (have to weight code complexitiy/ benefit here)\n\n```\nsample 3 values from the array, get lengths\nif avg length is small:\n   use exisiting hasher\nelse:\n   use new one\n```\n\n(obviously this could only be used INTERNALLY in a single function as the hashes are different)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/60228574",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8547#issuecomment-60228574",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8547",
    "id": 60228574,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjI4NTc0",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-23T12:01:24Z",
    "updated_at": "2014-10-23T12:01:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "This would require keeping two versions of khash, I strongly object against it.\n\nIt should be a lot easier to precompute xxhash values for 0-1 length strings and look them up from a table.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/60351484",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8547#issuecomment-60351484",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8547",
    "id": 60351484,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMzUxNDg0",
    "user": {
      "login": "immerrr",
      "id": 579798,
      "node_id": "MDQ6VXNlcjU3OTc5OA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/579798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/immerrr",
      "html_url": "https://github.com/immerrr",
      "followers_url": "https://api.github.com/users/immerrr/followers",
      "following_url": "https://api.github.com/users/immerrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/immerrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/immerrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/immerrr/subscriptions",
      "organizations_url": "https://api.github.com/users/immerrr/orgs",
      "repos_url": "https://api.github.com/users/immerrr/repos",
      "events_url": "https://api.github.com/users/immerrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/immerrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-10-24T07:02:02Z",
    "updated_at": "2014-10-24T07:02:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "Huh, so it turns out I was benchmarking wrong stuff :)\n\n`hashtable.StringHashtable` is not used anywhere, `pd.factorize` only uses int64, float64 and generic object tables, I wonder if we could use string table for factorization anywhere at all (without incurring type inference penalty).\n\nstrbox hash table OTOH is used, but at first sight I couldn't say what purpose does it serve there and how should I put together a representative benchmark for it.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/100510750",
    "html_url": "https://github.com/pandas-dev/pandas/pull/8547#issuecomment-100510750",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/8547",
    "id": 100510750,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDUxMDc1MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-09T16:07:16Z",
    "updated_at": "2015-05-09T16:07:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "closing pls reopen if/when updated\n"
  }
]
