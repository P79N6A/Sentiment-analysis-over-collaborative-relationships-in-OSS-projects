[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/473590713",
    "html_url": "https://github.com/pandas-dev/pandas/pull/25746#issuecomment-473590713",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25746",
    "id": 473590713,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzU5MDcxMw==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2019-03-16T20:33:17Z",
    "updated_at": "2019-03-16T20:33:17Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/25746?src=pr&el=h1) Report\n> Merging [#25746](https://codecov.io/gh/pandas-dev/pandas/pull/25746?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/65c0441a41b2dcaeebb648274d30978419a8661a?src=pr&el=desc) will **decrease** coverage by `<.01%`.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/25746/graphs/tree.svg?width=650&token=eZ4WkYLtcO&height=150&src=pr)](https://codecov.io/gh/pandas-dev/pandas/pull/25746?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master   #25746      +/-   ##\n==========================================\n- Coverage   91.25%   91.25%   -0.01%     \n==========================================\n  Files         172      172              \n  Lines       52977    52977              \n==========================================\n- Hits        48343    48342       -1     \n- Misses       4634     4635       +1\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `89.82% <ø> (ø)` | :arrow_up: |\n| #single | `41.74% <ø> (ø)` | :arrow_up: |\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/25746?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/util/testing.py](https://codecov.io/gh/pandas-dev/pandas/pull/25746/diff?src=pr&el=tree#diff-cGFuZGFzL3V0aWwvdGVzdGluZy5weQ==) | `88.98% <0%> (-0.1%)` | :arrow_down: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/25746?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/25746?src=pr&el=footer). Last update [65c0441...2c4ee4d](https://codecov.io/gh/pandas-dev/pandas/pull/25746?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/473590716",
    "html_url": "https://github.com/pandas-dev/pandas/pull/25746#issuecomment-473590716",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25746",
    "id": 473590716,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzU5MDcxNg==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2019-03-16T20:33:19Z",
    "updated_at": "2019-03-18T03:15:42Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/25746?src=pr&el=h1) Report\n> Merging [#25746](https://codecov.io/gh/pandas-dev/pandas/pull/25746?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/65c0441a41b2dcaeebb648274d30978419a8661a?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/25746/graphs/tree.svg?width=650&token=eZ4WkYLtcO&height=150&src=pr)](https://codecov.io/gh/pandas-dev/pandas/pull/25746?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master   #25746   +/-   ##\n=======================================\n  Coverage   91.25%   91.25%           \n=======================================\n  Files         172      172           \n  Lines       52977    52977           \n=======================================\n  Hits        48343    48343           \n  Misses       4634     4634\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `89.82% <ø> (ø)` | :arrow_up: |\n| #single | `41.74% <ø> (ø)` | :arrow_up: |\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/25746?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/25746?src=pr&el=footer). Last update [65c0441...27657f1](https://codecov.io/gh/pandas-dev/pandas/pull/25746?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/473592417",
    "html_url": "https://github.com/pandas-dev/pandas/pull/25746#issuecomment-473592417",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25746",
    "id": 473592417,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzU5MjQxNw==",
    "user": {
      "login": "mroeschke",
      "id": 10647082,
      "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10647082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mroeschke",
      "html_url": "https://github.com/mroeschke",
      "followers_url": "https://api.github.com/users/mroeschke/followers",
      "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
      "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
      "organizations_url": "https://api.github.com/users/mroeschke/orgs",
      "repos_url": "https://api.github.com/users/mroeschke/repos",
      "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mroeschke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-16T21:00:18Z",
    "updated_at": "2019-03-16T21:00:18Z",
    "author_association": "MEMBER",
    "body": "This looks to be a regression in 0.24 (from this PR https://github.com/pandas-dev/pandas/pull/21691) and eligible for backporting. "
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/473598164",
    "html_url": "https://github.com/pandas-dev/pandas/pull/25746#issuecomment-473598164",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25746",
    "id": 473598164,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzU5ODE2NA==",
    "user": {
      "login": "mroeschke",
      "id": 10647082,
      "node_id": "MDQ6VXNlcjEwNjQ3MDgy",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10647082?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mroeschke",
      "html_url": "https://github.com/mroeschke",
      "followers_url": "https://api.github.com/users/mroeschke/followers",
      "following_url": "https://api.github.com/users/mroeschke/following{/other_user}",
      "gists_url": "https://api.github.com/users/mroeschke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mroeschke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mroeschke/subscriptions",
      "organizations_url": "https://api.github.com/users/mroeschke/orgs",
      "repos_url": "https://api.github.com/users/mroeschke/repos",
      "events_url": "https://api.github.com/users/mroeschke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mroeschke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-16T22:34:18Z",
    "updated_at": "2019-03-16T22:34:18Z",
    "author_association": "MEMBER",
    "body": "Will need to `isort` this file.\r\n\r\n`ERROR: /home/vsts/work/1/s/pandas/tests/tslibs/test_conversion.py Imports are incorrectly sorted.`"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/473737228",
    "html_url": "https://github.com/pandas-dev/pandas/pull/25746#issuecomment-473737228",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25746",
    "id": 473737228,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzczNzIyOA==",
    "user": {
      "login": "pep8speaks",
      "id": 24736507,
      "node_id": "MDQ6VXNlcjI0NzM2NTA3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/24736507?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pep8speaks",
      "html_url": "https://github.com/pep8speaks",
      "followers_url": "https://api.github.com/users/pep8speaks/followers",
      "following_url": "https://api.github.com/users/pep8speaks/following{/other_user}",
      "gists_url": "https://api.github.com/users/pep8speaks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pep8speaks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pep8speaks/subscriptions",
      "organizations_url": "https://api.github.com/users/pep8speaks/orgs",
      "repos_url": "https://api.github.com/users/pep8speaks/repos",
      "events_url": "https://api.github.com/users/pep8speaks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pep8speaks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-18T01:19:50Z",
    "updated_at": "2019-03-18T02:37:58Z",
    "author_association": "NONE",
    "body": "Hello @ArtificialQualia! Thanks for updating this PR. We checked the lines you've touched for [PEP 8](https://www.python.org/dev/peps/pep-0008) issues, and found:\n\n\n\n\n\nThere are currently no PEP 8 issues detected in this Pull Request. Cheers! :beers: \n\n##### Comment last updated at 2019-03-18 02:37:58 UTC"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/473738130",
    "html_url": "https://github.com/pandas-dev/pandas/pull/25746#issuecomment-473738130",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25746",
    "id": 473738130,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzczODEzMA==",
    "user": {
      "login": "ArtificialQualia",
      "id": 25773476,
      "node_id": "MDQ6VXNlcjI1NzczNDc2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/25773476?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArtificialQualia",
      "html_url": "https://github.com/ArtificialQualia",
      "followers_url": "https://api.github.com/users/ArtificialQualia/followers",
      "following_url": "https://api.github.com/users/ArtificialQualia/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArtificialQualia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArtificialQualia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArtificialQualia/subscriptions",
      "organizations_url": "https://api.github.com/users/ArtificialQualia/orgs",
      "repos_url": "https://api.github.com/users/ArtificialQualia/repos",
      "events_url": "https://api.github.com/users/ArtificialQualia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArtificialQualia/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-18T01:26:39Z",
    "updated_at": "2019-03-18T01:26:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "> pls show if this causes any perf issues\r\n\r\nI ran the perf testing and did have some significant deviations with many of them in places I wouldn't expect to see any differences.  I'll run them again tonight and see if the deviations are consistent."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/473829105",
    "html_url": "https://github.com/pandas-dev/pandas/pull/25746#issuecomment-473829105",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25746",
    "id": 473829105,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MzgyOTEwNQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-18T09:16:58Z",
    "updated_at": "2019-03-18T09:16:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "no on the backport and this need perf checking"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/473947173",
    "html_url": "https://github.com/pandas-dev/pandas/pull/25746#issuecomment-473947173",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25746",
    "id": 473947173,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3Mzk0NzE3Mw==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-18T15:01:42Z",
    "updated_at": "2019-03-18T15:01:42Z",
    "author_association": "MEMBER",
    "body": "> I ran the perf testing and did have some significant deviations with many of them in places I wouldn't expect to see any differences. I'll run them again tonight and see if the deviations are consistent.\r\n\r\nYah this is a common issue with `asv` when looking at cython code.  If it persists, just show some relevant `%timeit` results.\r\n\r\nBecause this is replacing a C function call with a python attribute lookup, I'd expect the performance to take a hit.  The question is whether this is called enough times for that perf hit to be non-trivial.\r\n\r\nAlso, there are a handful of places where we use `not Datetime_CheckExact(x)` as a proxy for `isinstance(x, Timestamp)`.  Ideally if we fix one of these, we should fix them all."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/474115291",
    "html_url": "https://github.com/pandas-dev/pandas/pull/25746#issuecomment-474115291",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25746",
    "id": 474115291,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDExNTI5MQ==",
    "user": {
      "login": "ArtificialQualia",
      "id": 25773476,
      "node_id": "MDQ6VXNlcjI1NzczNDc2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/25773476?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArtificialQualia",
      "html_url": "https://github.com/ArtificialQualia",
      "followers_url": "https://api.github.com/users/ArtificialQualia/followers",
      "following_url": "https://api.github.com/users/ArtificialQualia/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArtificialQualia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArtificialQualia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArtificialQualia/subscriptions",
      "organizations_url": "https://api.github.com/users/ArtificialQualia/orgs",
      "repos_url": "https://api.github.com/users/ArtificialQualia/repos",
      "events_url": "https://api.github.com/users/ArtificialQualia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArtificialQualia/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-18T21:50:20Z",
    "updated_at": "2019-03-18T21:50:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "**%timeit Results**\r\n\r\nFor the performance tests that over both runs had a factor > 1.1 (did not test the factor < 0.9) here are the %timeit results:\r\n\r\n**`multiindex_object.GetLoc.time_large_get_loc`**\r\nThis PR:\r\n```\r\nIn [4]: %timeit get_loc.time_large_get_loc()\r\n11.8 µs ± 52.4 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\r\n```\r\nMaster:\r\n```\r\nIn [4]: %timeit get_loc.time_large_get_loc()\r\n11.7 µs ± 30 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\r\n```\r\n\r\n**`inference.NumericInferOps.time_subtract(<class 'numpy.int16'>)`**\r\nThis PR:\r\n```\r\nIn [5]: %timeit nio.time_subtract(np.int16)\r\n431 µs ± 2.31 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\r\n```\r\nMaster:\r\n```\r\nIn [5]: %timeit nio.time_subtract(np.int16)\r\n428 µs ± 1.94 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\r\n```\r\n\r\n**`timeseries.ResampleSeries.time_resample('datetime', '5min', 'mean')`**\r\nThis PR:\r\n```\r\nIn [4]: %timeit rs.time_resample('datetime', '5min', 'mean')\r\n3.68 ms ± 56.7 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\r\n```\r\nMaster:\r\n```\r\nIn [4]: %timeit rs.time_resample('datetime', '5min', 'mean')\r\n3.78 ms ± 41.3 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\r\n```\r\n\r\n**`series_methods.NSort.time_nsmallest('last')`**\r\nThis PR:\r\n```\r\nIn [4]: %timeit ns.time_nsmallest('last')\r\n2.04 ms ± 7.51 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\r\n```\r\nMaster:\r\n```\r\nIn [4]: %timeit ns.time_nsmallest('last')\r\n2.3 ms ± 13.3 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\r\n```\r\n\r\n**`multiindex_object.Integer.time_get_indexer`**\r\nThis PR:\r\n```\r\nIn [4]: %timeit i.time_get_indexer()\r\n1.27 ms ± 9.8 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\r\n```\r\nMaster:\r\n```\r\nIn [4]: %timeit i.time_get_indexer()\r\n1.28 ms ± 2.73 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\r\n```\r\n\r\nOut of these, the only 'significant' result was `series_methods.NSort.time_nsmallest('last')` which is a little faster in this PR's code, but that's probably a fluke."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/474125408",
    "html_url": "https://github.com/pandas-dev/pandas/pull/25746#issuecomment-474125408",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25746",
    "id": 474125408,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDEyNTQwOA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-18T22:26:50Z",
    "updated_at": "2019-03-18T22:26:50Z",
    "author_association": "MEMBER",
    "body": "For the %timeit checks, I was suggesting that you run just the affected code, e.g `%timeit localize_pydatetime(whatever)` (for values that would be affected by the PR).  Or if there are other functions that call localize_pydatetime a lot in a loop, time those."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/474127016",
    "html_url": "https://github.com/pandas-dev/pandas/pull/25746#issuecomment-474127016",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25746",
    "id": 474127016,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDEyNzAxNg==",
    "user": {
      "login": "ArtificialQualia",
      "id": 25773476,
      "node_id": "MDQ6VXNlcjI1NzczNDc2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/25773476?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArtificialQualia",
      "html_url": "https://github.com/ArtificialQualia",
      "followers_url": "https://api.github.com/users/ArtificialQualia/followers",
      "following_url": "https://api.github.com/users/ArtificialQualia/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArtificialQualia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArtificialQualia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArtificialQualia/subscriptions",
      "organizations_url": "https://api.github.com/users/ArtificialQualia/orgs",
      "repos_url": "https://api.github.com/users/ArtificialQualia/repos",
      "events_url": "https://api.github.com/users/ArtificialQualia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArtificialQualia/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-18T22:32:30Z",
    "updated_at": "2019-03-19T11:19:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Also, there are a handful of places where we use `not Datetime_CheckExact(x)` as a proxy for `isinstance(x, Timestamp)`. Ideally if we fix one of these, we should fix them all.\r\n\r\nI'm happy to do that, but should that be done in a separate issue/PR?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/474540649",
    "html_url": "https://github.com/pandas-dev/pandas/pull/25746#issuecomment-474540649",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25746",
    "id": 474540649,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDU0MDY0OQ==",
    "user": {
      "login": "ArtificialQualia",
      "id": 25773476,
      "node_id": "MDQ6VXNlcjI1NzczNDc2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/25773476?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArtificialQualia",
      "html_url": "https://github.com/ArtificialQualia",
      "followers_url": "https://api.github.com/users/ArtificialQualia/followers",
      "following_url": "https://api.github.com/users/ArtificialQualia/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArtificialQualia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArtificialQualia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArtificialQualia/subscriptions",
      "organizations_url": "https://api.github.com/users/ArtificialQualia/orgs",
      "repos_url": "https://api.github.com/users/ArtificialQualia/repos",
      "events_url": "https://api.github.com/users/ArtificialQualia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArtificialQualia/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-19T19:27:00Z",
    "updated_at": "2019-03-19T19:27:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "> so rather than using PyDateTime_CheckExact, if we switch this to PyDateTime_Check it will likely work, though IIRC we did this as a perf issue? @jbrockmendel do you remember\r\n\r\nI thought that might work, but since we are using `not PyDateTime_CheckExact` as a proxy for `isinstance(x, Timestamp)`, it wouldn't work to switch that out for `PyDateTime_Check` since Timestamp is itself a subclass of datetime."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/474553552",
    "html_url": "https://github.com/pandas-dev/pandas/pull/25746#issuecomment-474553552",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25746",
    "id": 474553552,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDU1MzU1Mg==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-19T19:56:25Z",
    "updated_at": "2019-03-19T19:56:25Z",
    "author_association": "MEMBER",
    "body": "> so rather than using PyDateTime_CheckExact, if we switch this to PyDateTime_Check it will likely work, though IIRC we did this as a perf issue?\r\n\r\n@ArtificialQualia's comment about `not PyDateTime_CheckExact(x)` being a proxy for `isinstance(x, Timestamp)` is correct, as is @jreback's point that we are using this proxy for performance reasons.\r\n\r\nAn ideal solution would be to implement a `is_timestamp` function with C performance.  Some speculation about what that might look like:\r\n- if we somehow merged `Timestamp` with `_Timestamp`, so that `Timestamp` itself were a cdef class, then I _think_ `type(x) is Timestamp` would be a pointer comparison, i.e. fast.  Might merit checking on the cython mailing list about this.\r\n- this might require a refactor to avoid circular dependencies.  Presumably such an `is_timestamp` would be defined in `tslibs.timestamps` (which depends on `tslibs.conversion`), but ATM we use this heuristic in `tslibs.conversion` (also`tslibs.timedeltas` and `tslib`)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/474626641",
    "html_url": "https://github.com/pandas-dev/pandas/pull/25746#issuecomment-474626641",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25746",
    "id": 474626641,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDYyNjY0MQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-19T23:40:32Z",
    "updated_at": "2019-03-19T23:40:32Z",
    "author_association": "MEMBER",
    "body": "pinged the cython mailing list about fast isinstance checks:  https://groups.google.com/forum/#!topic/cython-users/AQSGs-Sx9Pc\r\n\r\nIt sounds like `isinstance(x, _Timestamp)` might be significantly faster than `isinstance(x, Timestamp)`"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/474634650",
    "html_url": "https://github.com/pandas-dev/pandas/pull/25746#issuecomment-474634650",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25746",
    "id": 474634650,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDYzNDY1MA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-20T00:19:57Z",
    "updated_at": "2019-03-20T00:19:57Z",
    "author_association": "MEMBER",
    "body": "After doing some profiling, it looks like the try/except AttributeError check is _way_ slower than basically every other alternative:\r\n\r\nWithin cython, had a function run each of the following 10k times.  Then ran that function in `%timeit`\r\n\r\n```\r\n                                 Timestamp     datetime\r\nisinstance(x, _Timestamp) -->    16.1µs        17.3µs\r\nisinstance(x, Timestamp)  -->    74.6µs        198µs\r\nnot PyDateTime_CheckExact(x) --> 119ns         113 ns\r\ntry/except  -->                  3.22 ms       3.21 ms\r\n\r\n```\r\n\r\nSo the best \"do it right\" (`isinstance(x, _Timestamp)`) is 135x slower than the current check, but 200x better than the try/except check.\r\n\r\nThere are a couple of extant places where we use this check.  I'm going to make a PR to get rid of those.  @ArtificialQualia are you OK with putting this on hold until a performant solution is in place?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/474662237",
    "html_url": "https://github.com/pandas-dev/pandas/pull/25746#issuecomment-474662237",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25746",
    "id": 474662237,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDY2MjIzNw==",
    "user": {
      "login": "ArtificialQualia",
      "id": 25773476,
      "node_id": "MDQ6VXNlcjI1NzczNDc2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/25773476?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArtificialQualia",
      "html_url": "https://github.com/ArtificialQualia",
      "followers_url": "https://api.github.com/users/ArtificialQualia/followers",
      "following_url": "https://api.github.com/users/ArtificialQualia/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArtificialQualia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArtificialQualia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArtificialQualia/subscriptions",
      "organizations_url": "https://api.github.com/users/ArtificialQualia/orgs",
      "repos_url": "https://api.github.com/users/ArtificialQualia/repos",
      "events_url": "https://api.github.com/users/ArtificialQualia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArtificialQualia/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-20T02:44:02Z",
    "updated_at": "2019-03-20T02:45:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jbrockmendel I tried to replicate your results based on your testing criteria, and got some similar results with some exceptions.  For instance:\r\n- `isinstance(x, _Timestamp)` was as fast as `not PyDateTime_CheckExact(x)` within a few nanoseconds.\r\n- `try/except` was only in the `ms` order of magnitude when it actually *catches* an exception.  When no exception was raised (which would almost always be the case in this code), it was only about 200x slower than `isinstance(x, _Timestamp)`\r\n\r\nEither way, it seems to me as well the answer is to use `isinstance(x, _Timestamp)`.\r\n\r\nI'm happy to put this on hold until your other PR is merged."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/474677477",
    "html_url": "https://github.com/pandas-dev/pandas/pull/25746#issuecomment-474677477",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25746",
    "id": 474677477,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDY3NzQ3Nw==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-20T04:11:11Z",
    "updated_at": "2019-03-20T04:11:11Z",
    "author_association": "MEMBER",
    "body": "> I tried to replicate your results based on your testing criteria, and got some similar results with some exceptions\r\n\r\nWhen I tried this, I found the signature of the `is_timestamp` functions affected the results quite a bit.  In particular, the timings I reported all had the signature `cdef bint is_timestamp(datetime obj)` as opposed to `cdef bint is_timestamp(object obj)`.  Can that account for the difference in results?\r\n\r\n> I'm happy to put this on hold until your other PR is merged.\r\n\r\nMy first attempt at this failed and I don't know when I'll be able to circle back to it.  Better not to wait on me."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/475030347",
    "html_url": "https://github.com/pandas-dev/pandas/pull/25746#issuecomment-475030347",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25746",
    "id": 475030347,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTAzMDM0Nw==",
    "user": {
      "login": "ArtificialQualia",
      "id": 25773476,
      "node_id": "MDQ6VXNlcjI1NzczNDc2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/25773476?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArtificialQualia",
      "html_url": "https://github.com/ArtificialQualia",
      "followers_url": "https://api.github.com/users/ArtificialQualia/followers",
      "following_url": "https://api.github.com/users/ArtificialQualia/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArtificialQualia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArtificialQualia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArtificialQualia/subscriptions",
      "organizations_url": "https://api.github.com/users/ArtificialQualia/orgs",
      "repos_url": "https://api.github.com/users/ArtificialQualia/repos",
      "events_url": "https://api.github.com/users/ArtificialQualia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArtificialQualia/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-20T21:12:22Z",
    "updated_at": "2019-03-20T21:12:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "> When I tried this, I found the signature of the `is_timestamp` functions affected the results quite a bit. In particular, the timings I reported all had the signature `cdef bint is_timestamp(datetime obj)` as opposed to `cdef bint is_timestamp(object obj)`. Can that account for the difference in results?\r\n\r\nMy signature was `cpdef inline void test_1(datetime dt)`, so there are some differences but the arg was the same at least.\r\n\r\nI found a very large difference depending on how `_Timestamp` was imported.  If it was imported with a python `import` then 10,000 `isinstance(dt, _Timestamp)` took `55.7 µs` and `167 µs` for Timestamp and datetime respectively.  But if I did a `cimport _Timestamp` (requires additional .pxd changes of course) then that went back down to `70.2 ns` and `64.5 ns` respectively.  Maybe that is where the difference is?  Which import method did you use?\r\n\r\nI'm happy to make the PR for the larger scope of changes, but if you were thinking of having someone else do it that is fine with me as well."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/480358339",
    "html_url": "https://github.com/pandas-dev/pandas/pull/25746#issuecomment-480358339",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/25746",
    "id": 480358339,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4MDM1ODMzOQ==",
    "user": {
      "login": "ArtificialQualia",
      "id": 25773476,
      "node_id": "MDQ6VXNlcjI1NzczNDc2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/25773476?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArtificialQualia",
      "html_url": "https://github.com/ArtificialQualia",
      "followers_url": "https://api.github.com/users/ArtificialQualia/followers",
      "following_url": "https://api.github.com/users/ArtificialQualia/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArtificialQualia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArtificialQualia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArtificialQualia/subscriptions",
      "organizations_url": "https://api.github.com/users/ArtificialQualia/orgs",
      "repos_url": "https://api.github.com/users/ArtificialQualia/repos",
      "events_url": "https://api.github.com/users/ArtificialQualia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArtificialQualia/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-04-05T17:31:30Z",
    "updated_at": "2019-04-05T17:31:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "#25853 implements this"
  }
]
