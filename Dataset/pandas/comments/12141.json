[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/174748445",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12141#issuecomment-174748445",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12141",
    "id": 174748445,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NDc0ODQ0NQ==",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-26T00:40:18Z",
    "updated_at": "2016-01-26T00:40:18Z",
    "author_association": "MEMBER",
    "body": "Why don't we adapt the algorithms from `bottleneck` (which are faster and do not require using skiplists)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/174755129",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12141#issuecomment-174755129",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12141",
    "id": 174755129,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NDc1NTEyOQ==",
    "user": {
      "login": "kawochen",
      "id": 10709573,
      "node_id": "MDQ6VXNlcjEwNzA5NTcz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10709573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kawochen",
      "html_url": "https://github.com/kawochen",
      "followers_url": "https://api.github.com/users/kawochen/followers",
      "following_url": "https://api.github.com/users/kawochen/following{/other_user}",
      "gists_url": "https://api.github.com/users/kawochen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kawochen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kawochen/subscriptions",
      "organizations_url": "https://api.github.com/users/kawochen/orgs",
      "repos_url": "https://api.github.com/users/kawochen/repos",
      "events_url": "https://api.github.com/users/kawochen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kawochen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-26T01:12:04Z",
    "updated_at": "2016-01-26T01:12:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "`rolling_max` and `rolling_min` are from `bottleneck`.  I think skiplists are used in `rolling_median` and `rolling_quantile` (an alternative is max-median-min-heap)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/174841519",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12141#issuecomment-174841519",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12141",
    "id": 174841519,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NDg0MTUxOQ==",
    "user": {
      "login": "jennolsen84",
      "id": 10360673,
      "node_id": "MDQ6VXNlcjEwMzYwNjcz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10360673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jennolsen84",
      "html_url": "https://github.com/jennolsen84",
      "followers_url": "https://api.github.com/users/jennolsen84/followers",
      "following_url": "https://api.github.com/users/jennolsen84/following{/other_user}",
      "gists_url": "https://api.github.com/users/jennolsen84/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jennolsen84/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jennolsen84/subscriptions",
      "organizations_url": "https://api.github.com/users/jennolsen84/orgs",
      "repos_url": "https://api.github.com/users/jennolsen84/repos",
      "events_url": "https://api.github.com/users/jennolsen84/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jennolsen84/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-26T05:36:31Z",
    "updated_at": "2016-01-26T05:36:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah, I was thinking of `rolling_median`.  Bottleneck's implementation doesn't ignore NaNs (http://berkeleyanalytics.com/bottleneck/reference.html#bottleneck.move_median).  I will see if I can contribute an implementation there that accepts NaNs.\n\nThis one and only commit comment doesn't look that encouraging though :)  https://github.com/kwgoodman/bottleneck/commits/5a9ecb818b63ffcb8d6e787e51a236a109302c6a/bottleneck/src/auto_pyx/csrc/move_median.c\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/175112103",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12141#issuecomment-175112103",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12141",
    "id": 175112103,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NTExMjEwMw==",
    "user": {
      "login": "kawochen",
      "id": 10709573,
      "node_id": "MDQ6VXNlcjEwNzA5NTcz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10709573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kawochen",
      "html_url": "https://github.com/kawochen",
      "followers_url": "https://api.github.com/users/kawochen/followers",
      "following_url": "https://api.github.com/users/kawochen/following{/other_user}",
      "gists_url": "https://api.github.com/users/kawochen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kawochen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kawochen/subscriptions",
      "organizations_url": "https://api.github.com/users/kawochen/orgs",
      "repos_url": "https://api.github.com/users/kawochen/repos",
      "events_url": "https://api.github.com/users/kawochen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kawochen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-26T16:51:50Z",
    "updated_at": "2016-01-26T16:51:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "wow `bottleneck` is quite a bit faster.  Should work for `rolling_quantile` too.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/175121865",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12141#issuecomment-175121865",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12141",
    "id": 175121865,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NTEyMTg2NQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-26T17:10:36Z",
    "updated_at": "2016-01-26T17:10:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "@kawochen can you post any benchmarks? as an aside, still need to keep these routines as `bottleneck`is optional (though that is a separate issue)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/175230757",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12141#issuecomment-175230757",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12141",
    "id": 175230757,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NTIzMDc1Nw==",
    "user": {
      "login": "jennolsen84",
      "id": 10360673,
      "node_id": "MDQ6VXNlcjEwMzYwNjcz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10360673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jennolsen84",
      "html_url": "https://github.com/jennolsen84",
      "followers_url": "https://api.github.com/users/jennolsen84/followers",
      "following_url": "https://api.github.com/users/jennolsen84/following{/other_user}",
      "gists_url": "https://api.github.com/users/jennolsen84/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jennolsen84/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jennolsen84/subscriptions",
      "organizations_url": "https://api.github.com/users/jennolsen84/orgs",
      "repos_url": "https://api.github.com/users/jennolsen84/repos",
      "events_url": "https://api.github.com/users/jennolsen84/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jennolsen84/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-26T21:07:27Z",
    "updated_at": "2016-01-26T21:07:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "When benchmarking, please remember to benchmark for different window sizes and different axis.\n\nWhen testing median, I came across different implementations where the running times were very different depending on window_size due to the algorithms being used.  E.g. if window sizes are small, maintaining multiple heaps hurts performance compared to running quickselect multiple times.  Whereas, with big window sizes, it (big O) starts to matter a lot and multiple heap implementations start to win.  \n\nAlso, with bigger matrices, and iterating across different axis, the cache effects could matter a bit too.  So, when you benchmark, please be careful about these effects.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/176235530",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12141#issuecomment-176235530",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12141",
    "id": 176235530,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NjIzNTUzMA==",
    "user": {
      "login": "kawochen",
      "id": 10709573,
      "node_id": "MDQ6VXNlcjEwNzA5NTcz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10709573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kawochen",
      "html_url": "https://github.com/kawochen",
      "followers_url": "https://api.github.com/users/kawochen/followers",
      "following_url": "https://api.github.com/users/kawochen/following{/other_user}",
      "gists_url": "https://api.github.com/users/kawochen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kawochen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kawochen/subscriptions",
      "organizations_url": "https://api.github.com/users/kawochen/orgs",
      "repos_url": "https://api.github.com/users/kawochen/repos",
      "events_url": "https://api.github.com/users/kawochen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kawochen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-28T15:26:30Z",
    "updated_at": "2016-01-28T15:26:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Will work on that :)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/181342367",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12141#issuecomment-181342367",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12141",
    "id": 181342367,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4MTM0MjM2Nw==",
    "user": {
      "login": "jennolsen84",
      "id": 10360673,
      "node_id": "MDQ6VXNlcjEwMzYwNjcz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10360673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jennolsen84",
      "html_url": "https://github.com/jennolsen84",
      "followers_url": "https://api.github.com/users/jennolsen84/followers",
      "following_url": "https://api.github.com/users/jennolsen84/following{/other_user}",
      "gists_url": "https://api.github.com/users/jennolsen84/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jennolsen84/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jennolsen84/subscriptions",
      "organizations_url": "https://api.github.com/users/jennolsen84/orgs",
      "repos_url": "https://api.github.com/users/jennolsen84/repos",
      "events_url": "https://api.github.com/users/jennolsen84/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jennolsen84/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-08T12:20:41Z",
    "updated_at": "2016-02-08T12:20:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "`rolling_median` is an operation that can be sped up using multi-threading easily.  The C library can easily export a re-entrant function that doesn't use the GIL and takes in an input and an output buffer.\n\nWhat is the pandas policy regarding this?  E.g. numexpr evals automatically use multiple cores (unless explicitly told to use only one core), but bottleneck uses 1 core by default.  If it is OK to use multiple threads, should I just create a `concurrent.futures.ThreadPoolExecutor`, and submit the tasks there?\n (if the input size is big enough, and the window size is small enough of course)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/181790366",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12141#issuecomment-181790366",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12141",
    "id": 181790366,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4MTc5MDM2Ng==",
    "user": {
      "login": "jennolsen84",
      "id": 10360673,
      "node_id": "MDQ6VXNlcjEwMzYwNjcz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10360673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jennolsen84",
      "html_url": "https://github.com/jennolsen84",
      "followers_url": "https://api.github.com/users/jennolsen84/followers",
      "following_url": "https://api.github.com/users/jennolsen84/following{/other_user}",
      "gists_url": "https://api.github.com/users/jennolsen84/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jennolsen84/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jennolsen84/subscriptions",
      "organizations_url": "https://api.github.com/users/jennolsen84/orgs",
      "repos_url": "https://api.github.com/users/jennolsen84/repos",
      "events_url": "https://api.github.com/users/jennolsen84/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jennolsen84/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-09T09:58:01Z",
    "updated_at": "2016-02-09T09:58:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback @wesm any feedback on the pandas policy?  I would like to avoid doing un-necessary work, if possible.  In this case, I am referring to writing a threaded implementation, and have the PR in pandas get rejected.\n\nI have upgraded the move_median algorithm in bottleneck to accept nans, and `min_period` (but it is called `min_count` in bottleneck).\n\nI benched it in different scenarios and am consistently getting ~ 3.5 - 5.5x performance of the pandas master [except for the trivial case of window_size=1, which bn optimizes].  So, I am guessing that the pandas' rolling median is using an algorithm with a  `O(n * lg window_size)` running time already.\n\nThe double heap algorithm implementation (contributed by someone else) in bottleneck is pretty efficient.  Also, bottleneck generates code for double, float, int32, and int64 data types at compile time.\n\nIn case you're interested in the move median implementation:\n\nhttps://github.com/jennolsen84/bottleneck/tree/movemedian\n\nI have to clean up the function names a little bit and add more documentation.  I have tested the implementation thoroughly so it should be good.  Test cases were a bit tough to generate -- could use advice on this.  I ended up hammering the implementation with random datasets, and that helped shake out (hopefully all?) a lot of bugs.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/181793964",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12141#issuecomment-181793964",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12141",
    "id": 181793964,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4MTc5Mzk2NA==",
    "user": {
      "login": "jennolsen84",
      "id": 10360673,
      "node_id": "MDQ6VXNlcjEwMzYwNjcz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10360673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jennolsen84",
      "html_url": "https://github.com/jennolsen84",
      "followers_url": "https://api.github.com/users/jennolsen84/followers",
      "following_url": "https://api.github.com/users/jennolsen84/following{/other_user}",
      "gists_url": "https://api.github.com/users/jennolsen84/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jennolsen84/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jennolsen84/subscriptions",
      "organizations_url": "https://api.github.com/users/jennolsen84/orgs",
      "repos_url": "https://api.github.com/users/jennolsen84/repos",
      "events_url": "https://api.github.com/users/jennolsen84/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jennolsen84/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-09T10:05:45Z",
    "updated_at": "2016-02-09T10:05:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "here is the timing data (I stopped it after while, as it wasn't that interesting):\n\nhttps://gist.github.com/jennolsen84/70cf058cd0e02ef299d3\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/182084503",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12141#issuecomment-182084503",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12141",
    "id": 182084503,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4MjA4NDUwMw==",
    "user": {
      "login": "wesm",
      "id": 329591,
      "node_id": "MDQ6VXNlcjMyOTU5MQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/329591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wesm",
      "html_url": "https://github.com/wesm",
      "followers_url": "https://api.github.com/users/wesm/followers",
      "following_url": "https://api.github.com/users/wesm/following{/other_user}",
      "gists_url": "https://api.github.com/users/wesm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wesm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wesm/subscriptions",
      "organizations_url": "https://api.github.com/users/wesm/orgs",
      "repos_url": "https://api.github.com/users/wesm/repos",
      "events_url": "https://api.github.com/users/wesm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wesm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-09T21:34:27Z",
    "updated_at": "2016-02-09T21:34:27Z",
    "author_association": "MEMBER",
    "body": "@jennolsen84 is it possible to handle the multithreading using pthreads in C rather than via Python threads? \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/182104570",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12141#issuecomment-182104570",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12141",
    "id": 182104570,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4MjEwNDU3MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-09T22:20:20Z",
    "updated_at": "2016-02-09T22:20:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jennolsen84 so in general to play nice, you can:\n- release the GIL whenever possible (though have to be careful as sometimes this can add overhead in some cases)\n- you shouldn't use python threads or python multiprocessing as this doesn't play nice with higher level than pandas who want to use python threads. \n\nnote that:`numexpr` recently (IIRC in 2.5, just released) now actually plays nice by holding a lock its own thread usage (before it was not threadsafe).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/182216471",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12141#issuecomment-182216471",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12141",
    "id": 182216471,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE4MjIxNjQ3MQ==",
    "user": {
      "login": "jennolsen84",
      "id": 10360673,
      "node_id": "MDQ6VXNlcjEwMzYwNjcz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10360673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jennolsen84",
      "html_url": "https://github.com/jennolsen84",
      "followers_url": "https://api.github.com/users/jennolsen84/followers",
      "following_url": "https://api.github.com/users/jennolsen84/following{/other_user}",
      "gists_url": "https://api.github.com/users/jennolsen84/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jennolsen84/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jennolsen84/subscriptions",
      "organizations_url": "https://api.github.com/users/jennolsen84/orgs",
      "repos_url": "https://api.github.com/users/jennolsen84/repos",
      "events_url": "https://api.github.com/users/jennolsen84/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jennolsen84/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-10T06:11:34Z",
    "updated_at": "2016-02-10T06:11:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jreback yep, I sent in the PR to numexpr for that lock.. :) https://github.com/pydata/numexpr/pull/200 .\n\n@wesm yes, can definitely use pthreads.  How many threads should be used?  I was thinking of peeking at numexpr settings, but numexpr is not required by pandas.\n\nOn a bigger picture.  I think the best option might be to expose something that returns a list of functions, which can then be scheduled as the user pleases.  This allows the user to use an existing threadpool (one that might be partially in use, so this can avoid oversaturation of the CPU, etc).  At this moment, it is not possible to implement efficiently on top of pandas due to the function signatures in pandas.  (The `out` parameter gets us part of the way there, we would also need to have a window for warmup). \n\nThoughts?  I can move the discussion of the last paragraph to a separate issue, if you would like.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/233258310",
    "html_url": "https://github.com/pandas-dev/pandas/issues/12141#issuecomment-233258310",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/12141",
    "id": 233258310,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMzI1ODMxMA==",
    "user": {
      "login": "jennolsen84",
      "id": 10360673,
      "node_id": "MDQ6VXNlcjEwMzYwNjcz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/10360673?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jennolsen84",
      "html_url": "https://github.com/jennolsen84",
      "followers_url": "https://api.github.com/users/jennolsen84/followers",
      "following_url": "https://api.github.com/users/jennolsen84/following{/other_user}",
      "gists_url": "https://api.github.com/users/jennolsen84/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jennolsen84/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jennolsen84/subscriptions",
      "organizations_url": "https://api.github.com/users/jennolsen84/orgs",
      "repos_url": "https://api.github.com/users/jennolsen84/repos",
      "events_url": "https://api.github.com/users/jennolsen84/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jennolsen84/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-18T07:56:00Z",
    "updated_at": "2016-07-18T07:56:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "bottleneck 1.1 now has a good implementation of move median.  It can handle nans, etc.  There is talk about implementing parallel algorithms in bottleneck as well.  Perhaps pandas can just use those.\n"
  }
]
