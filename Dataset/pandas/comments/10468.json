[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/116599617",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10468#issuecomment-116599617",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10468",
    "id": 116599617,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNjU5OTYxNw==",
    "user": {
      "login": "fabianrost84",
      "id": 7300030,
      "node_id": "MDQ6VXNlcjczMDAwMzA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7300030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fabianrost84",
      "html_url": "https://github.com/fabianrost84",
      "followers_url": "https://api.github.com/users/fabianrost84/followers",
      "following_url": "https://api.github.com/users/fabianrost84/following{/other_user}",
      "gists_url": "https://api.github.com/users/fabianrost84/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fabianrost84/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fabianrost84/subscriptions",
      "organizations_url": "https://api.github.com/users/fabianrost84/orgs",
      "repos_url": "https://api.github.com/users/fabianrost84/repos",
      "events_url": "https://api.github.com/users/fabianrost84/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fabianrost84/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-29T10:42:14Z",
    "updated_at": "2015-06-29T10:42:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "I just confirmed the issue for the current version of pandas:\n\n``` python\nINSTALLED VERSIONS\n------------------\ncommit: None\npython: 2.7.6.final.0\npython-bits: 64\nOS: Linux\nOS-release: 3.13.0-55-generic\nmachine: x86_64\nprocessor: x86_64\nbyteorder: little\nLC_ALL: None\nLANG: en_US.UTF-8\n\npandas: 0.16.2\nnose: 1.3.1\nCython: 0.20.1post0\nnumpy: 1.9.2\nscipy: 0.13.3\nstatsmodels: 0.5.0\nIPython: 3.2.0\nsphinx: None\npatsy: 0.3.0\ndateutil: 2.4.2\npytz: 2015.4\nbottleneck: None\ntables: 3.1.1\nnumexpr: 2.2.2\nmatplotlib: 1.3.1\nopenpyxl: 1.7.0\nxlrd: 0.9.2\nxlwt: 0.7.5\nxlsxwriter: None\nlxml: None\nbs4: 4.2.1\nhtml5lib: 0.999\nhttplib2: 0.8\napiclient: None\nsqlalchemy: 0.8.4\npymysql: None\npsycopg2: 2.4.5 (dt dec mx pq3 ext)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/116610792",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10468#issuecomment-116610792",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10468",
    "id": 116610792,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNjYxMDc5Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-29T11:07:26Z",
    "updated_at": "2015-06-29T11:07:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "see docs [here](http://pandas.pydata.org/pandas-docs/stable/groupby.html#na-and-nat-group-handling)\n\nby-definition groupby skips nan groups\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/116631218",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10468#issuecomment-116631218",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10468",
    "id": 116631218,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNjYzMTIxOA==",
    "user": {
      "login": "fabianrost84",
      "id": 7300030,
      "node_id": "MDQ6VXNlcjczMDAwMzA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7300030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fabianrost84",
      "html_url": "https://github.com/fabianrost84",
      "followers_url": "https://api.github.com/users/fabianrost84/followers",
      "following_url": "https://api.github.com/users/fabianrost84/following{/other_user}",
      "gists_url": "https://api.github.com/users/fabianrost84/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fabianrost84/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fabianrost84/subscriptions",
      "organizations_url": "https://api.github.com/users/fabianrost84/orgs",
      "repos_url": "https://api.github.com/users/fabianrost84/repos",
      "events_url": "https://api.github.com/users/fabianrost84/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fabianrost84/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-29T12:15:52Z",
    "updated_at": "2015-06-29T12:15:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "i see the point and that makes sense. \nBut the behaviour of groupby is still a little bit inconsistent. If I group just by one column containing nan the corresponding elements are immediately removed: \n\n``` python\nIn [9]: grouped2 = df.groupby(['b'])\n\nIn [10]: grouped2.groups\nOut[10]: {1.0: [0]}\n```\n\nBut in the example I posted above where I grouped using multiple columns the nan entry is still listed as a group:\n\n``` python\nIn [11]: grouped = df.groupby(['a', 'b'])\n\nIn [12]: print grouped.groups\n{('a', 1.0): [0], ('b', nan): [1]}\n```\n\nShouldn't the second entry not be there because it contains a nan?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/116737817",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10468#issuecomment-116737817",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10468",
    "id": 116737817,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNjczNzgxNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-29T15:45:21Z",
    "updated_at": "2015-06-29T15:45:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "no, the 2nd is not `nan`, but a tuple (that happens to contain nan). having nan in your groupers is pretty odd. can you show a full example of what you are trying to do?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/117843125",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10468#issuecomment-117843125",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10468",
    "id": 117843125,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzg0MzEyNQ==",
    "user": {
      "login": "fabianrost84",
      "id": 7300030,
      "node_id": "MDQ6VXNlcjczMDAwMzA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7300030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fabianrost84",
      "html_url": "https://github.com/fabianrost84",
      "followers_url": "https://api.github.com/users/fabianrost84/followers",
      "following_url": "https://api.github.com/users/fabianrost84/following{/other_user}",
      "gists_url": "https://api.github.com/users/fabianrost84/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fabianrost84/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fabianrost84/subscriptions",
      "organizations_url": "https://api.github.com/users/fabianrost84/orgs",
      "repos_url": "https://api.github.com/users/fabianrost84/repos",
      "events_url": "https://api.github.com/users/fabianrost84/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fabianrost84/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-01T22:39:46Z",
    "updated_at": "2015-07-01T22:39:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Exactly it's a tuple containing `nan`. Sorry, I was a bit sloppy.\n\nThe example in which I encountered `nan` in my groupers goes as follows. I have some (biological) data x and they were measured under 2 different conditions, condition1 and condition2. It happened that for condition2 also the spatial position was important and this data was categorized in two subcategories zone1 and zone2 (the spatial position itself was not recorded). For condition1 the spatial position was not measured and therefore this data was missing. The DataFrame looked like this:\n\n``` python\n>>>df = pd.DataFrame()\n>>>df['condition']=3*['condition1']+6*['condition2']\n>>>df['zone']=3*[sp.nan]+3*['zone1']+3*['zone2']\n>>>df['x']=[1,3,2,1,4,3,2,1,2]\n>>>print df\n\n    condition   zone  x\n0  condition1    NaN  1\n1  condition1    NaN  3\n2  condition1    NaN  2\n3  condition2  zone1  1\n4  condition2  zone1  4\n5  condition2  zone1  3\n6  condition2  zone2  2\n7  condition2  zone2  1\n8  condition2  zone2  2\n```\n\n I did univariate scatter plots for the measurements from the 3 conditions \"condition1\", \"condition2, zone1\" and \"condition2, zone2\":\n\n``` python\ngrouped = df.groupby(['condition', 'zone'])\nfor i, (name, group) in enumerate(grouped):\n    plt.scatter(len(group)*[i], group['x'])\n```\n\nThen I wanted to set the xticks according to the group names by\n\n``` python\nplt.xticks(range(len(group)), grouped.groups.keys())\nplt.show()\n```\n\nTo my surprise I produced 3 labels but only had data in 2 groups. \nNow, I do understand that this behavior comes from the fact, that the groups with a `nan` in the group name are ignored in the loop but they are present in the grouped.groups dict. I think the behavior would be more consistent if the groups with a `nan` in the group name are not present in the grouped.groups dict.\nWould you agree?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/117847040",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10468#issuecomment-117847040",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10468",
    "id": 117847040,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzg0NzA0MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-01T23:10:54Z",
    "updated_at": "2015-07-01T23:10:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "usual way to do this is simply to fill your missing groups (with a value or '')\n\n```\nIn [34]: df.fillna('missing').groupby(['condition','zone']).sum()\nOut[34]: \n                    x\ncondition  zone      \ncondition1 missing  6\ncondition2 zone1    8\n           zone2    5\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/117847754",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10468#issuecomment-117847754",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10468",
    "id": 117847754,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNzg0Nzc1NA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-07-01T23:15:57Z",
    "updated_at": "2015-07-01T23:15:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "I put up an example in #10484 \n\nThis could be a bug; the state is inconsitent.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/352871642",
    "html_url": "https://github.com/pandas-dev/pandas/issues/10468#issuecomment-352871642",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/10468",
    "id": 352871642,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1Mjg3MTY0Mg==",
    "user": {
      "login": "bear24rw",
      "id": 778194,
      "node_id": "MDQ6VXNlcjc3ODE5NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/778194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bear24rw",
      "html_url": "https://github.com/bear24rw",
      "followers_url": "https://api.github.com/users/bear24rw/followers",
      "following_url": "https://api.github.com/users/bear24rw/following{/other_user}",
      "gists_url": "https://api.github.com/users/bear24rw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bear24rw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bear24rw/subscriptions",
      "organizations_url": "https://api.github.com/users/bear24rw/orgs",
      "repos_url": "https://api.github.com/users/bear24rw/repos",
      "events_url": "https://api.github.com/users/bear24rw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bear24rw/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-12-19T20:06:47Z",
    "updated_at": "2017-12-19T20:06:47Z",
    "author_association": "NONE",
    "body": "I also just hit this. I understand that `nan != nan` but I would still like to be able to group by nans without having to fill them with some random value.\r\n```python\r\nIn [1]: df = pd.DataFrame({'a':[0,0,0,1,1,1],'b':[np.nan,np.nan,np.nan,np.nan,np.nan,np.nan], 'c':[9,8,7,6,5,54]})\r\nIn [2]: df.groupby(['a','b']).groups\r\nOut[2]:\r\n{(0, nan): Int64Index([0, 1, 2], dtype='int64'),\r\n (1, nan): Int64Index([3, 4, 5], dtype='int64')}\r\nIn [3]: for group, group_df in df.groupby(['a','b']):\r\n    ...:     print(group)\r\n    ...:\r\nIn [4]: for group, group_df in df.fillna('missing').groupby(['a','b']):\r\n    ...:     print(group)\r\n    ...:\r\n(0, 'missing')\r\n(1, 'missing')\r\n```\r\nI'd really like to have the group tuple contain a `nan` instead  of having to fill it with a value. There are times I want to write `group_df` to a csv and having to replace `missing` with `nan` again before doing so is annoying."
  }
]
