[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/159090056",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11683#issuecomment-159090056",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11683",
    "id": 159090056,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1OTA5MDA1Ng==",
    "user": {
      "login": "litchfield",
      "id": 130636,
      "node_id": "MDQ6VXNlcjEzMDYzNg==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/130636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/litchfield",
      "html_url": "https://github.com/litchfield",
      "followers_url": "https://api.github.com/users/litchfield/followers",
      "following_url": "https://api.github.com/users/litchfield/following{/other_user}",
      "gists_url": "https://api.github.com/users/litchfield/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/litchfield/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/litchfield/subscriptions",
      "organizations_url": "https://api.github.com/users/litchfield/orgs",
      "repos_url": "https://api.github.com/users/litchfield/repos",
      "events_url": "https://api.github.com/users/litchfield/events{/privacy}",
      "received_events_url": "https://api.github.com/users/litchfield/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-23T22:37:52Z",
    "updated_at": "2015-11-23T22:37:52Z",
    "author_association": "NONE",
    "body": "I realise pandas doesn't officially support pymssql but it is DBAPI2 and \"almost\" works. I wonder if anyone else is keen to see better support?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/167115345",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11683#issuecomment-167115345",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11683",
    "id": 167115345,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2NzExNTM0NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-24T13:56:30Z",
    "updated_at": "2015-12-24T13:56:30Z",
    "author_association": "MEMBER",
    "body": "@litchfield it does work correctly when using an sqlalchemy engine together with pymssql?\n\nThe thing is that we do not want to add special cases for certain database flavors (once we start doing that, that becomes a rabbit hole, and that is also the reason that we are using sqlalchemy for lots of this abstraction). \nBut, I think it would be possible to solve this in a neutral way. As the DBAPI2 says, the `parameters` should be a sequence: https://www.python.org/dev/peps/pep-0249/#id15. So it would be possible to relax the current conversion to a list, and eg only make it a list if it is not yet a sequence.\n\nWould you be interested in contributing a patch for this?\n"
  }
]
