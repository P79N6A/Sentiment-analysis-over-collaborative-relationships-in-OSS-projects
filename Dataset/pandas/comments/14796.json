[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264693649",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14796#issuecomment-264693649",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14796",
    "id": 264693649,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDY5MzY0OQ==",
    "user": {
      "login": "shoyer",
      "id": 1217238,
      "node_id": "MDQ6VXNlcjEyMTcyMzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/shoyer",
      "html_url": "https://github.com/shoyer",
      "followers_url": "https://api.github.com/users/shoyer/followers",
      "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
      "organizations_url": "https://api.github.com/users/shoyer/orgs",
      "repos_url": "https://api.github.com/users/shoyer/repos",
      "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/shoyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-04T09:37:31Z",
    "updated_at": "2016-12-04T09:37:31Z",
    "author_association": "MEMBER",
    "body": "I am opposed to this for the exact reasons discussed in #2801: it would mislead users who might expect a performance benefit."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/264712934",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14796#issuecomment-264712934",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14796",
    "id": 264712934,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDcxMjkzNA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-04T16:15:17Z",
    "updated_at": "2016-12-04T16:15:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "Virtually all of pandas methods return a new object, the exception being the indexing operations. Using ``inplace`` is not idiomatic, quite unreadable and not (more) performant at all.\r\n\r\nClosing, though if someone thinks that we should add a signature like\r\n\r\n``(...., inplace=False)``, and then raise a ``TypeError`` if ``inplace=True`` to give a nice error message, then we can reopen for that purpose. \r\n\r\n```\r\nIn [2]: df = pd.DataFrame(np.random.rand(5,3), columns=list('abc'))\r\n   ...: df.append(pd.DataFrame(np.random.rand(5,3), columns=list('abc')), inplace=True)\r\nTypeError: append() got an unexpected keyword argument 'inplace'\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/319543850",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14796#issuecomment-319543850",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14796",
    "id": 319543850,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxOTU0Mzg1MA==",
    "user": {
      "login": "remidebette",
      "id": 16523229,
      "node_id": "MDQ6VXNlcjE2NTIzMjI5",
      "avatar_url": "https://avatars2.githubusercontent.com/u/16523229?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/remidebette",
      "html_url": "https://github.com/remidebette",
      "followers_url": "https://api.github.com/users/remidebette/followers",
      "following_url": "https://api.github.com/users/remidebette/following{/other_user}",
      "gists_url": "https://api.github.com/users/remidebette/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/remidebette/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/remidebette/subscriptions",
      "organizations_url": "https://api.github.com/users/remidebette/orgs",
      "repos_url": "https://api.github.com/users/remidebette/repos",
      "events_url": "https://api.github.com/users/remidebette/events{/privacy}",
      "received_events_url": "https://api.github.com/users/remidebette/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-02T01:40:08Z",
    "updated_at": "2017-08-02T01:40:08Z",
    "author_association": "NONE",
    "body": "In the case of a [namedtuple](https://docs.python.org/3/library/collections.html#collections.namedtuple) which contains a Series object, the inplace approach would be nice to have as a feature.\r\nThis would not be related in any way to the performance but would be a way to expose data to users.\r\n\r\nIndeed, the nametuple objects are by design providing a way for writing a library and exposing it to a user   allowing them to only modify it inplace. \r\nTrying to overwrite an attribute of a namedtuple is intentionally raising `AttributeError: can't set attribute` so that the user does not try to affect your library. But mutable attributes are allowed.\r\n\r\nConsider the following dummy code:\r\n```python\r\nfrom collections import namedtuple\r\nfrom pandas import Series\r\n\r\n# ----- Library part ------\r\nsample_schema = {\r\n    \"name\": str,\r\n    \"some_info\": str,\r\n    \"content\": Series\r\n}\r\n\r\nmy_data_type = namedtuple(\"MyDataType\", sample_schema.keys())\r\n\r\nexposed_data = my_data_type(\r\n    name=\"Library data\",\r\n    some_info=\"Modify the content as you want\",\r\n    content=Series({\"a\": 0})\r\n)\r\n\r\n\r\n# ----- User code part ------\r\nseries_to_be_appended = Series({\"b\": 0})\r\n\r\n # This is forbidden\r\nexposed_data.content = exposed_data.content.append(series_to_be_appended)\r\n\r\n# This would be allowed but is not implemented in Series\r\nexposed_data.content.append(series_to_be_appended, inplace=True)\r\n```\r\n\r\nThe `name` and `some_info` attributes are string and therefore immutable. A user would not (easily) be able to affect them. But here the `content` can be modified as long as it is not set to a new object altogether.\r\n\r\nI would think inplace methods are nice to have on any mutable object in general."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/472583195",
    "html_url": "https://github.com/pandas-dev/pandas/issues/14796#issuecomment-472583195",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/14796",
    "id": 472583195,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MjU4MzE5NQ==",
    "user": {
      "login": "rtruxal",
      "id": 2837324,
      "node_id": "MDQ6VXNlcjI4MzczMjQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2837324?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rtruxal",
      "html_url": "https://github.com/rtruxal",
      "followers_url": "https://api.github.com/users/rtruxal/followers",
      "following_url": "https://api.github.com/users/rtruxal/following{/other_user}",
      "gists_url": "https://api.github.com/users/rtruxal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rtruxal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rtruxal/subscriptions",
      "organizations_url": "https://api.github.com/users/rtruxal/orgs",
      "repos_url": "https://api.github.com/users/rtruxal/repos",
      "events_url": "https://api.github.com/users/rtruxal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rtruxal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-03-13T20:02:45Z",
    "updated_at": "2019-03-13T20:02:45Z",
    "author_association": "NONE",
    "body": "So the consensus among the maintainers is that it would be too confusing to have an `append()` method which actually appends?\r\n\r\nI'd suggest removing the method from `DataFrame` entirely, or potentially renaming it. Someone familiar with pandas might find it confusing, but the opposite is currently true for those of us without your level of experience."
  }
]
