[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/326453669",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17406#issuecomment-326453669",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17406",
    "id": 326453669,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjQ1MzY2OQ==",
    "user": {
      "login": "chris-b1",
      "id": 1924092,
      "node_id": "MDQ6VXNlcjE5MjQwOTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1924092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chris-b1",
      "html_url": "https://github.com/chris-b1",
      "followers_url": "https://api.github.com/users/chris-b1/followers",
      "following_url": "https://api.github.com/users/chris-b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/chris-b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chris-b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chris-b1/subscriptions",
      "organizations_url": "https://api.github.com/users/chris-b1/orgs",
      "repos_url": "https://api.github.com/users/chris-b1/repos",
      "events_url": "https://api.github.com/users/chris-b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chris-b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-01T00:18:06Z",
    "updated_at": "2017-09-01T00:18:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah, you definitely have the right change, our `.copy(deep=True)`, which `__deepcopy__`  now calls isn't fully recursive\r\n```\r\nIn [108]: df.copy?\r\nSignature: df.copy(deep=True)\r\nDocstring:\r\nMake a copy of this objects data.\r\n\r\nParameters\r\n----------\r\ndeep : boolean or string, default True\r\n    Make a deep copy, including a copy of the data and the indices.\r\n    With ``deep=False`` neither the indices or the data are copied.\r\n\r\n    Note that when ``deep=True`` data is copied, actual python objects\r\n    will not be copied recursively, only the reference to the object.\r\n    This is in contrast to ``copy.deepcopy`` in the Standard Library,\r\n    which recursively copies object data.\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/326455980",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17406#issuecomment-326455980",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17406",
    "id": 326455980,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjQ1NTk4MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-01T00:36:09Z",
    "updated_at": "2017-09-01T00:36:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "embedding mutable objects inside a. DataFrame is an antipattern\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/326459219",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17406#issuecomment-326459219",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17406",
    "id": 326459219,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjQ1OTIxOQ==",
    "user": {
      "login": "ebolyen",
      "id": 3976804,
      "node_id": "MDQ6VXNlcjM5NzY4MDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3976804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ebolyen",
      "html_url": "https://github.com/ebolyen",
      "followers_url": "https://api.github.com/users/ebolyen/followers",
      "following_url": "https://api.github.com/users/ebolyen/following{/other_user}",
      "gists_url": "https://api.github.com/users/ebolyen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ebolyen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ebolyen/subscriptions",
      "organizations_url": "https://api.github.com/users/ebolyen/orgs",
      "repos_url": "https://api.github.com/users/ebolyen/repos",
      "events_url": "https://api.github.com/users/ebolyen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ebolyen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-01T01:00:03Z",
    "updated_at": "2017-09-01T01:00:03Z",
    "author_association": "NONE",
    "body": "@jreback, definitely agree. We use pandas to manage metadata about objects that have positions. We also implement `__deepcopy__` and so our tests specifically set up this situation to ensure everything matches the spec. We don't have a lot of control over what users might put here, and it absolutely could be argued that they *shouldn't* put something that is mutable there, but `__deepcopy__` did work in the past for pandas.\r\n\r\nOut of curiosity, wouldn't it be better to not implement the `__deepcopy__` protocol if it isn't supported?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/326576820",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17406#issuecomment-326576820",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17406",
    "id": 326576820,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjU3NjgyMA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-01T13:14:37Z",
    "updated_at": "2017-09-01T13:14:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Out of curiosity, wouldn't it be better to not implement the __deepcopy__ protocol if it isn't supported?\r\n\r\nit was already there; this just allows a method to actually work on it. The fact that you cannot deepcopy mutable objects is clearly indicated. I think numpy also does this.\r\n\r\nWould take a patch to fix it though."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/427680211",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17406#issuecomment-427680211",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17406",
    "id": 427680211,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyNzY4MDIxMQ==",
    "user": {
      "login": "asishm",
      "id": 1978117,
      "node_id": "MDQ6VXNlcjE5NzgxMTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1978117?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asishm",
      "html_url": "https://github.com/asishm",
      "followers_url": "https://api.github.com/users/asishm/followers",
      "following_url": "https://api.github.com/users/asishm/following{/other_user}",
      "gists_url": "https://api.github.com/users/asishm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asishm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asishm/subscriptions",
      "organizations_url": "https://api.github.com/users/asishm/orgs",
      "repos_url": "https://api.github.com/users/asishm/repos",
      "events_url": "https://api.github.com/users/asishm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asishm/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-07T19:33:17Z",
    "updated_at": "2018-10-07T19:33:17Z",
    "author_association": "NONE",
    "body": "@jreback Just my view, but there are methods in pandas that return mutable objects, a notable one being `.str.split`. I would say that while having mutable objects at the start/end of a pipeline may be an antipattern, but it definitely shows up in intermediate steps. I can't think of any other use-cases right now, but a lot of NLP tools (word embeddings, tokenizers) etc. do return mutable objects as well."
  }
]
