[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/334110257",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17775#issuecomment-334110257",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17775",
    "id": 334110257,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDExMDI1Nw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-04T10:09:06Z",
    "updated_at": "2017-10-04T10:09:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "see the docs http://pandas-docs.github.io/pandas-docs-travis/groupby.html#filtration.\r\n\r\n``.head()`` gives you as ordered in the frame. ``sort=True`` on the groupby only applies to the actual ordering of the *groups*, not the elements within a group.  This is as expected.\r\n\r\n I suppose the fact that you are manually iterating is in sorted order could be better documented. Can you submit a PR to that effect (may use your example in a warning or note box in http://pandas-docs.github.io/pandas-docs-travis/groupby.html#iterating-through-groups. agree it could be slightly unexpected."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/334248933",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17775#issuecomment-334248933",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17775",
    "id": 334248933,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNDI0ODkzMw==",
    "user": {
      "login": "jmcarcell",
      "id": 22276694,
      "node_id": "MDQ6VXNlcjIyMjc2Njk0",
      "avatar_url": "https://avatars3.githubusercontent.com/u/22276694?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jmcarcell",
      "html_url": "https://github.com/jmcarcell",
      "followers_url": "https://api.github.com/users/jmcarcell/followers",
      "following_url": "https://api.github.com/users/jmcarcell/following{/other_user}",
      "gists_url": "https://api.github.com/users/jmcarcell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jmcarcell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jmcarcell/subscriptions",
      "organizations_url": "https://api.github.com/users/jmcarcell/orgs",
      "repos_url": "https://api.github.com/users/jmcarcell/repos",
      "events_url": "https://api.github.com/users/jmcarcell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jmcarcell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-04T18:32:34Z",
    "updated_at": "2017-10-04T18:39:30Z",
    "author_association": "NONE",
    "body": "> sort=True on the groupby only applies to the actual ordering of the groups, not the elements within a group. This is as expected.\r\n\r\nThis is true and is well documented.\r\n\r\nThe problem I find is not with iterating through groups but with `.head()` itself. I tested and all of the following methods give you a well ordered result: `.all, .any, .count, .cov, .describe, .get_group, .max, .mean, .median, .nth` etc. However, `.head()` returns the first rows of each group in the order they appear in `DataFrame` (in my example, this means that every other method yields a result where the block with A=1 is first and A=2 is second while head yields first the rows of the block A=2 and then A=1), besides being a method of the GroupBy object (that should be ordered because of the `sort = True`!). If you don't know this and use the result of `head()` and any other method your computations will be wrong, as you will be using an ordered result with an unordered result. Silly example: \r\n\r\n```\r\nimport pandas as pd\r\n\r\ndf = pd.DataFrame([[2, 100], [2, 200], [2, 300], [1, 400], [1, 500], [1, 600]], columns = ['A', 'B'])\r\n\r\ngrouped = df.groupby(df['A'], sort = True)\r\ndf1 = grouped.sum()\r\ndf2 = grouped.head(1)\r\nprint(df1['B'].values - df2['B'].values)\r\n```\r\nIf you subtract the first value to the sum you should get the sum of the other two but since the order is different you do not.\r\nI think the expected behaviour should be that `head` returns the first rows with the new order, as all the other methods do. \r\n\r\nEdit: \r\nIn http://pandas.pydata.org/pandas-docs/stable/generated/pandas.core.groupby.GroupBy.head.html\r\nit sais that it is esentially equivalent to `.apply(lambda x: x.head(n))` yet when you use this expression you obtain, again, a well ordered result and when using `.head()` you don't.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/338819578",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17775#issuecomment-338819578",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17775",
    "id": 338819578,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODgxOTU3OA==",
    "user": {
      "login": "mattayes",
      "id": 8622473,
      "node_id": "MDQ6VXNlcjg2MjI0NzM=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8622473?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattayes",
      "html_url": "https://github.com/mattayes",
      "followers_url": "https://api.github.com/users/mattayes/followers",
      "following_url": "https://api.github.com/users/mattayes/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattayes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattayes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattayes/subscriptions",
      "organizations_url": "https://api.github.com/users/mattayes/orgs",
      "repos_url": "https://api.github.com/users/mattayes/repos",
      "events_url": "https://api.github.com/users/mattayes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattayes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-23T22:51:31Z",
    "updated_at": "2017-10-23T22:51:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hey @Ifnister, so to be clear:\r\n\r\n```python\r\n# Setup\r\ndata = [\r\n    {'species': 'setosa', 'sepal_length': 5.1},\r\n    {'species': 'versicolar', 'sepal_length': 5.6},\r\n    {'species': 'virginica', 'sepal_length': 5.7},\r\n]\r\ndf = pd.DataFrame(data).sort_values('species', ascending=False)\r\ndf\r\n```\r\n```\r\n   sepal_length     species\r\n0           5.7   virginica\r\n1           5.6  versicolar\r\n2           5.1      setosa\r\n```\r\nThis is what you currently get using `head()` (the order of `species` matches the original order):\r\n```python\r\ndf.groupby('species').head()\r\n```\r\n```\r\n   sepal_length     species\r\n0           5.7   virginica\r\n1           5.6  versicolar\r\n2           5.1      setosa\r\n```\r\nHowever, this is what you get if you use `sum()` or most other methods (`species` is sorted and doesn't match the original order):\r\n```python\r\ndf.groupby('species').sepal_length.sum()\r\n```\r\n```\r\nspecies\r\nsetosa        5.1\r\nversicolar    5.6\r\nvirginica     5.7\r\nName: sepal_length, dtype: float64\r\n```\r\nAnd you expect the output of `head()` to look like this:\r\n```\r\n   sepal_length     species\r\n0           5.1      setosa\r\n1           5.6  versicolar\r\n2           5.7   virginica\r\n```\r\n\r\nIs that right?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/344769963",
    "html_url": "https://github.com/pandas-dev/pandas/issues/17775#issuecomment-344769963",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/17775",
    "id": 344769963,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM0NDc2OTk2Mw==",
    "user": {
      "login": "tdpetrou",
      "id": 7226751,
      "node_id": "MDQ6VXNlcjcyMjY3NTE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7226751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tdpetrou",
      "html_url": "https://github.com/tdpetrou",
      "followers_url": "https://api.github.com/users/tdpetrou/followers",
      "following_url": "https://api.github.com/users/tdpetrou/following{/other_user}",
      "gists_url": "https://api.github.com/users/tdpetrou/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tdpetrou/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tdpetrou/subscriptions",
      "organizations_url": "https://api.github.com/users/tdpetrou/orgs",
      "repos_url": "https://api.github.com/users/tdpetrou/repos",
      "events_url": "https://api.github.com/users/tdpetrou/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tdpetrou/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-11-15T23:59:58Z",
    "updated_at": "2017-11-16T00:01:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "There is a big problem with the docstrings here for `DataFrameGroupBy.head`. They say:\r\n\r\n```\r\nEssentially equivalent to ``.apply(lambda x: x.head(n))``,\r\nexcept ignores as_index flag.\r\n```\r\n`Dataframegroupby.head` keeps the original ordering of the dataframe. It doesn't even order by the keys. Using `.apply(lambda x: x.head(n))` puts the group keys in the index and sorts them.\r\n\r\nEdit, I see that @Ifnister already pointed this out. I think it would make a lot more sense to actually do `.apply(lambda x: x.head(n))`."
  }
]
