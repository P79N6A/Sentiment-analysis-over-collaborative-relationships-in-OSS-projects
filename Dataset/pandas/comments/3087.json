[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/15107890",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3087#issuecomment-15107890",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3087",
    "id": 15107890,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MTA3ODkw",
    "user": {
      "login": "dhirschfeld",
      "id": 881019,
      "node_id": "MDQ6VXNlcjg4MTAxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/881019?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhirschfeld",
      "html_url": "https://github.com/dhirschfeld",
      "followers_url": "https://api.github.com/users/dhirschfeld/followers",
      "following_url": "https://api.github.com/users/dhirschfeld/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhirschfeld/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhirschfeld/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhirschfeld/subscriptions",
      "organizations_url": "https://api.github.com/users/dhirschfeld/orgs",
      "repos_url": "https://api.github.com/users/dhirschfeld/repos",
      "events_url": "https://api.github.com/users/dhirschfeld/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhirschfeld/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-03-19T10:52:42Z",
    "updated_at": "2013-03-19T10:52:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Since the actual usecase which exposed the issue was a TimeSeries of dates the below test also tests that functionality in case it takes a different in codepath.\n\n``` python\ndef test_resample_nonnumeric():\n    import numpy as np\n    import pandas as pd\n    dates = pd.date_range('01-Jan-2014','05-Jan-2014', freq='D')\n    series = pd.TimeSeries(['a','b','c','d','e'], index=dates)\n    resampled_series = series[[0,1,3,4]].resample('D', fill_method='ffill')\n    assert (resampled_series.index == dates).all()\n    assert (resampled_series.values == np.asarray(['a','b','c','d','e'], dtype=object)).all()\n    series = pd.TimeSeries(dates, index=dates)\n    resampled_series = series[[0,1,3,4]].resample('D', fill_method='ffill')\n    assert (resampled_series.index == dates).all()\n    assert (resampled_series.values == series[[0,1,1,3,4]]).all()\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/17810323",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3087#issuecomment-17810323",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3087",
    "id": 17810323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3ODEwMzIz",
    "user": {
      "login": "cpcloud",
      "id": 417981,
      "node_id": "MDQ6VXNlcjQxNzk4MQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/417981?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpcloud",
      "html_url": "https://github.com/cpcloud",
      "followers_url": "https://api.github.com/users/cpcloud/followers",
      "following_url": "https://api.github.com/users/cpcloud/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpcloud/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpcloud/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpcloud/subscriptions",
      "organizations_url": "https://api.github.com/users/cpcloud/orgs",
      "repos_url": "https://api.github.com/users/cpcloud/repos",
      "events_url": "https://api.github.com/users/cpcloud/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpcloud/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-13T13:10:32Z",
    "updated_at": "2013-05-13T13:10:32Z",
    "author_association": "MEMBER",
    "body": "@dhirschfeld What would the `how` argument do in this case? Be ignored?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/17862755",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3087#issuecomment-17862755",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3087",
    "id": 17862755,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3ODYyNzU1",
    "user": {
      "login": "dhirschfeld",
      "id": 881019,
      "node_id": "MDQ6VXNlcjg4MTAxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/881019?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhirschfeld",
      "html_url": "https://github.com/dhirschfeld",
      "followers_url": "https://api.github.com/users/dhirschfeld/followers",
      "following_url": "https://api.github.com/users/dhirschfeld/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhirschfeld/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhirschfeld/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhirschfeld/subscriptions",
      "organizations_url": "https://api.github.com/users/dhirschfeld/orgs",
      "repos_url": "https://api.github.com/users/dhirschfeld/repos",
      "events_url": "https://api.github.com/users/dhirschfeld/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhirschfeld/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-05-14T08:19:56Z",
    "updated_at": "2013-05-14T08:19:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "The docstring says `how` is for downsampling whilst `fill_method` is for upsampling. \n\nOT: This has always bothered me - can't one argument suffice? I'm constantly having to check the docstring to find out which argument I'm supposed to be using depending on whether I happen to be upsampling or downsampling. Also, `reindex` calls the same argument `method` further adding to the confusion.\n\nIn either case I'd expect that if you do something that's not well defined for the type of your object it's reasonable to let whatever exception is created filter through. i.e. if you passed a (theoretical) linear argument to `fill_method` you'd expect a TypeError because you can't divide a string by a numeric value:\n\n``` python\nIn [28]: ('a'+'b')/2\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-28-5523b85b2ca5> in <module>()\n----> 1 ('a'+'b')/2\n\nTypeError: unsupported operand type(s) for /: 'str' and 'int'\n```\n\nif it's possible for it to work it should. Because summing strings is possible you'd expect that to work, but not mean. This in fact seems to be the case:\n\n``` python\nIn [39]: dates = pd.date_range('01-Jan-2014', periods=26, freq='D')\n    ...: series = pd.TimeSeries(map(chr, range(97, 123)), index=dates)\n    ...: \n\nIn [40]: series\nOut[40]: \n2014-01-01    a\n2014-01-02    b\n2014-01-03    c\n2014-01-04    d\n2014-01-05    e\n2014-01-06    f\n2014-01-07    g\n2014-01-08    h\n2014-01-09    i\n2014-01-10    j\n2014-01-11    k\n2014-01-12    l\n2014-01-13    m\n2014-01-14    n\n2014-01-15    o\n2014-01-16    p\n2014-01-17    q\n2014-01-18    r\n2014-01-19    s\n2014-01-20    t\n2014-01-21    u\n2014-01-22    v\n2014-01-23    w\n2014-01-24    x\n2014-01-25    y\n2014-01-26    z\nFreq: D, dtype: object\n\nIn [41]: series.resample('W', how='sum')\nOut[41]: \n2014-01-05      abcde\n2014-01-12    fghijkl\n2014-01-19    mnopqrs\n2014-01-26    tuvwxyz\nFreq: W-SUN, dtype: object\n\nseries.resample('W', how='mean')\n---------------------------------------------------------------------------\nDataError                                 Traceback (most recent call last)\n<ipython-input-42-e4ce7d0b1edd> in <module>()\n----> 1 series.resample('W', how='mean')\n\nC:\\dev\\bin\\Python27\\lib\\site-packages\\pandas\\core\\generic.pyc in resample(self, rule, how, axis, fill_method, closed, label, convention, kind, loffset, limit, base)\n    255                               fill_method=fill_method, convention=convention,\n    256                               limit=limit, base=base)\n--> 257         return sampler.resample(self)\n    258 \n    259     def first(self, offset):\n\nC:\\dev\\bin\\Python27\\lib\\site-packages\\pandas\\tseries\\resample.pyc in resample(self, obj)\n     81 \n     82         if isinstance(axis, DatetimeIndex):\n---> 83             rs = self._resample_timestamps(obj)\n     84         elif isinstance(axis, PeriodIndex):\n     85             offset = to_offset(self.freq)\n\nC:\\dev\\bin\\Python27\\lib\\site-packages\\pandas\\tseries\\resample.pyc in _resample_timestamps(self, obj)\n    206             if len(grouper.binlabels) < len(axlabels) or self.how is not None:\n    207                 grouped = obj.groupby(grouper, axis=self.axis)\n--> 208                 result = grouped.aggregate(self._agg_method)\n    209             else:\n    210                 # upsampling shortcut\n\nC:\\dev\\bin\\Python27\\lib\\site-packages\\pandas\\core\\groupby.pyc in aggregate(self, func_or_funcs, *args, **kwargs)\n   1409         \"\"\"\n   1410         if isinstance(func_or_funcs, basestring):\n-> 1411             return getattr(self, func_or_funcs)(*args, **kwargs)\n   1412 \n   1413         if hasattr(func_or_funcs, '__iter__'):\n\nC:\\dev\\bin\\Python27\\lib\\site-packages\\pandas\\core\\groupby.pyc in mean(self)\n    351         \"\"\"\n    352         try:\n--> 353             return self._cython_agg_general('mean')\n    354         except GroupByError:\n    355             raise\n\nC:\\dev\\bin\\Python27\\lib\\site-packages\\pandas\\core\\groupby.pyc in _cython_agg_general(self, how, numeric_only)\n    466 \n    467         if len(output) == 0:\n--> 468             raise DataError('No numeric types to aggregate')\n    469 \n    470         return self._wrap_aggregated_output(output, names)\n\nDataError: No numeric types to aggregate\n```\n\nStranger, it seems that `ffill` _does_ work, but only if you don't index it first:\n\n```\nIn [43]: dates = pd.date_range('01-Jan-2014','05-Jan-2014', freq='D')\n    ...: series = pd.TimeSeries(['a','b','c','d','e'], index=dates)\n    ...: series.resample('H', fill_method='ffill')\n    ...: \nOut[43]: \n2014-01-01 00:00:00    a\n2014-01-01 01:00:00    a\n2014-01-01 02:00:00    a\n2014-01-01 03:00:00    a\n2014-01-01 04:00:00    a\n2014-01-01 05:00:00    a\n2014-01-01 06:00:00    a\n2014-01-01 07:00:00    a\n2014-01-01 08:00:00    a\n2014-01-01 09:00:00    a\n2014-01-01 10:00:00    a\n2014-01-01 11:00:00    a\n2014-01-01 12:00:00    a\n2014-01-01 13:00:00    a\n2014-01-01 14:00:00    a\n...\n2014-01-04 10:00:00    d\n2014-01-04 11:00:00    d\n2014-01-04 12:00:00    d\n2014-01-04 13:00:00    d\n2014-01-04 14:00:00    d\n2014-01-04 15:00:00    d\n2014-01-04 16:00:00    d\n2014-01-04 17:00:00    d\n2014-01-04 18:00:00    d\n2014-01-04 19:00:00    d\n2014-01-04 20:00:00    d\n2014-01-04 21:00:00    d\n2014-01-04 22:00:00    d\n2014-01-04 23:00:00    d\n2014-01-05 00:00:00    e\nFreq: H, Length: 97, dtype: object\n\nIn [44]: series[[0,1,3,4]].resample('H', fill_method='ffill')\n---------------------------------------------------------------------------\nDataError                                 Traceback (most recent call last)\n<ipython-input-44-6621beea2243> in <module>()\n----> 1 series[[0,1,3,4]].resample('H', fill_method='ffill')\n\nC:\\dev\\bin\\Python27\\lib\\site-packages\\pandas\\core\\generic.pyc in resample(self, rule, how, axis, fill_method, closed, label, convention, kind, loffset, limit, base)\n    255                               fill_method=fill_method, convention=convention,\n    256                               limit=limit, base=base)\n--> 257         return sampler.resample(self)\n    258 \n    259     def first(self, offset):\n\nC:\\dev\\bin\\Python27\\lib\\site-packages\\pandas\\tseries\\resample.pyc in resample(self, obj)\n     81 \n     82         if isinstance(axis, DatetimeIndex):\n---> 83             rs = self._resample_timestamps(obj)\n     84         elif isinstance(axis, PeriodIndex):\n     85             offset = to_offset(self.freq)\n\nC:\\dev\\bin\\Python27\\lib\\site-packages\\pandas\\tseries\\resample.pyc in _resample_timestamps(self, obj)\n    221             # Irregular data, have to use groupby\n    222             grouped = obj.groupby(grouper, axis=self.axis)\n--> 223             result = grouped.aggregate(self._agg_method)\n    224 \n    225             if self.fill_method is not None:\n\nC:\\dev\\bin\\Python27\\lib\\site-packages\\pandas\\core\\groupby.pyc in aggregate(self, func_or_funcs, *args, **kwargs)\n   1409         \"\"\"\n   1410         if isinstance(func_or_funcs, basestring):\n-> 1411             return getattr(self, func_or_funcs)(*args, **kwargs)\n   1412 \n   1413         if hasattr(func_or_funcs, '__iter__'):\n\nC:\\dev\\bin\\Python27\\lib\\site-packages\\pandas\\core\\groupby.pyc in mean(self)\n    351         \"\"\"\n    352         try:\n--> 353             return self._cython_agg_general('mean')\n    354         except GroupByError:\n    355             raise\n\nC:\\dev\\bin\\Python27\\lib\\site-packages\\pandas\\core\\groupby.pyc in _cython_agg_general(self, how, numeric_only)\n    466 \n    467         if len(output) == 0:\n--> 468             raise DataError('No numeric types to aggregate')\n    469 \n    470         return self._wrap_aggregated_output(output, names)\n\nDataError: No numeric types to aggregate\n\nIn [45]: pd.__version__\nOut[45]: '0.11.0'\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/403166794",
    "html_url": "https://github.com/pandas-dev/pandas/issues/3087#issuecomment-403166794",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/3087",
    "id": 403166794,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMzE2Njc5NA==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-07-06T23:03:36Z",
    "updated_at": "2018-07-06T23:03:36Z",
    "author_association": "MEMBER",
    "body": "Original example is no longer reproducible - if you have an updated example feel free to reopen!"
  }
]
