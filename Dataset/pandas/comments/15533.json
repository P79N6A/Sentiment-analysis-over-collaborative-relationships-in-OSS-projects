[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/283180770",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15533#issuecomment-283180770",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15533",
    "id": 283180770,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzE4MDc3MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-28T22:24:25Z",
    "updated_at": "2017-02-28T22:24:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "this is kind of like ``_maybe_promote``, see here: https://github.com/pandas-dev/pandas/blob/master/pandas/types/cast.py#L230, though in this case its a validator, but same idea.\r\n\r\na lot of the validation is prob occuring now but at a lower level and with no consistency of error messages. A lot of the routines expect certain types for filling, IOW filling floats needs a compatible float/int (or would raise). \r\n\r\nSo a friendly high level check would be nice. The hard part about this issue is not the code changes, but the tests :>\r\n\r\nAlso collecting these tests into a standard place would be fine as well (this is tricky because we *like* to keep the with the types, e.g. in ``pandas/tests/series``, but for example routines in ``pandas/tests/missing`` would be nice as well.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/283199351",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15533#issuecomment-283199351",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15533",
    "id": 283199351,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzE5OTM1MQ==",
    "user": {
      "login": "ResidentMario",
      "id": 3466341,
      "node_id": "MDQ6VXNlcjM0NjYzNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3466341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ResidentMario",
      "html_url": "https://github.com/ResidentMario",
      "followers_url": "https://api.github.com/users/ResidentMario/followers",
      "following_url": "https://api.github.com/users/ResidentMario/following{/other_user}",
      "gists_url": "https://api.github.com/users/ResidentMario/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ResidentMario/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ResidentMario/subscriptions",
      "organizations_url": "https://api.github.com/users/ResidentMario/orgs",
      "repos_url": "https://api.github.com/users/ResidentMario/repos",
      "events_url": "https://api.github.com/users/ResidentMario/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ResidentMario/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-28T23:51:32Z",
    "updated_at": "2017-02-28T23:51:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm hopeful I can figure out how to implement. Why are the tests the hard part? I assume you mean figuring out where to put them, which does sound challenging...might collect them in a separate file instead, just for the meantime."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/284126229",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15533#issuecomment-284126229",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15533",
    "id": 284126229,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDEyNjIyOQ==",
    "user": {
      "login": "ResidentMario",
      "id": 3466341,
      "node_id": "MDQ6VXNlcjM0NjYzNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3466341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ResidentMario",
      "html_url": "https://github.com/ResidentMario",
      "followers_url": "https://api.github.com/users/ResidentMario/followers",
      "following_url": "https://api.github.com/users/ResidentMario/following{/other_user}",
      "gists_url": "https://api.github.com/users/ResidentMario/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ResidentMario/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ResidentMario/subscriptions",
      "organizations_url": "https://api.github.com/users/ResidentMario/orgs",
      "repos_url": "https://api.github.com/users/ResidentMario/repos",
      "events_url": "https://api.github.com/users/ResidentMario/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ResidentMario/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-04T04:22:38Z",
    "updated_at": "2017-03-04T04:29:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "`_maybe_upcast` doesn't have guards against upcasting \"weird\" stuff. So for example the following is legal:\r\n\r\n    _maybe_upcast(np.array([np]))\r\n\r\nWhen a `fill_value` parameter is passed, `_maybe_upcast` is the first and only validation step that parameter has to go through. So since the above is legal, so is whatever garbage you pass it, e.g. `Series.shift(fill_value=<class 'garbage_type'>)`.\r\n\r\nIn other cases (e.g. `fillna`) there is additional validation that prevents this from happening.\r\n\r\nShould `_maybe_upcast` (continue to) allow this behavior? This is deep in the internals, so I suspect not touching it would be best, but it does seem like an odd thing to allow, to me.\r\n\r\nIt wouldn't be too hard to add a separate check to prevent this sort of input from reaching `_maybe_upcast` at all."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/284126526",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15533#issuecomment-284126526",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15533",
    "id": 284126526,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDEyNjUyNg==",
    "user": {
      "login": "ResidentMario",
      "id": 3466341,
      "node_id": "MDQ6VXNlcjM0NjYzNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3466341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ResidentMario",
      "html_url": "https://github.com/ResidentMario",
      "followers_url": "https://api.github.com/users/ResidentMario/followers",
      "following_url": "https://api.github.com/users/ResidentMario/following{/other_user}",
      "gists_url": "https://api.github.com/users/ResidentMario/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ResidentMario/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ResidentMario/subscriptions",
      "organizations_url": "https://api.github.com/users/ResidentMario/orgs",
      "repos_url": "https://api.github.com/users/ResidentMario/repos",
      "events_url": "https://api.github.com/users/ResidentMario/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ResidentMario/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-04T04:29:34Z",
    "updated_at": "2017-03-04T04:29:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "(sorry about the close/open, fat-fingered the wrong button there)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/284134459",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15533#issuecomment-284134459",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15533",
    "id": 284134459,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDEzNDQ1OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-04T07:30:40Z",
    "updated_at": "2017-03-04T07:30:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "you might be able to add a check here\r\nthough i suspect have a _maybe_cast_fill which does validation might be easier\r\n\r\ninternal routines just have implicit (or better yet explicit guarantees that are in the docstring)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/284263622",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15533#issuecomment-284263622",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15533",
    "id": 284263622,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDI2MzYyMg==",
    "user": {
      "login": "ResidentMario",
      "id": 3466341,
      "node_id": "MDQ6VXNlcjM0NjYzNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3466341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ResidentMario",
      "html_url": "https://github.com/ResidentMario",
      "followers_url": "https://api.github.com/users/ResidentMario/followers",
      "following_url": "https://api.github.com/users/ResidentMario/following{/other_user}",
      "gists_url": "https://api.github.com/users/ResidentMario/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ResidentMario/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ResidentMario/subscriptions",
      "organizations_url": "https://api.github.com/users/ResidentMario/orgs",
      "repos_url": "https://api.github.com/users/ResidentMario/repos",
      "events_url": "https://api.github.com/users/ResidentMario/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ResidentMario/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-05T21:19:35Z",
    "updated_at": "2017-03-05T21:20:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "FYI, this is legal in `fillna` right now:\r\n\r\n    pd.Series([1, 2, np.nan]).fillna(lambda f: f)\r\n\r\nWhich is counter-factual w.r.t a (separate) `TypeError` statement in the method body:\r\n\r\n        if isinstance(value, (list, tuple)):\r\n            raise TypeError('\"value\" parameter must be a scalar or dict, but '\r\n                            'you passed a \"{0}\"'.format(type(value).__name__))\r\n\r\n(to fix this you could do `if isinstance(value, (list, tuple)) or callable(value)`)"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/284269649",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15533#issuecomment-284269649",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15533",
    "id": 284269649,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDI2OTY0OQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-05T22:43:41Z",
    "updated_at": "2017-03-05T22:43:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "yeah you prob have to check inclusion rather than exclusion\r\n\r\ne.g. is_scalar, is_dict_like, is_list_like"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/284269794",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15533#issuecomment-284269794",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15533",
    "id": 284269794,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDI2OTc5NA==",
    "user": {
      "login": "ResidentMario",
      "id": 3466341,
      "node_id": "MDQ6VXNlcjM0NjYzNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3466341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ResidentMario",
      "html_url": "https://github.com/ResidentMario",
      "followers_url": "https://api.github.com/users/ResidentMario/followers",
      "following_url": "https://api.github.com/users/ResidentMario/following{/other_user}",
      "gists_url": "https://api.github.com/users/ResidentMario/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ResidentMario/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ResidentMario/subscriptions",
      "organizations_url": "https://api.github.com/users/ResidentMario/orgs",
      "repos_url": "https://api.github.com/users/ResidentMario/repos",
      "events_url": "https://api.github.com/users/ResidentMario/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ResidentMario/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-05T22:45:52Z",
    "updated_at": "2017-03-05T22:45:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yeah. Funny little bug with that:\r\n\r\n     >>> import import pandas.core.common as com\r\n     >>> com.is_string_dtype(type)\r\n     True"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/284270022",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15533#issuecomment-284270022",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15533",
    "id": 284270022,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDI3MDAyMg==",
    "user": {
      "login": "ResidentMario",
      "id": 3466341,
      "node_id": "MDQ6VXNlcjM0NjYzNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3466341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ResidentMario",
      "html_url": "https://github.com/ResidentMario",
      "followers_url": "https://api.github.com/users/ResidentMario/followers",
      "following_url": "https://api.github.com/users/ResidentMario/following{/other_user}",
      "gists_url": "https://api.github.com/users/ResidentMario/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ResidentMario/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ResidentMario/subscriptions",
      "organizations_url": "https://api.github.com/users/ResidentMario/orgs",
      "repos_url": "https://api.github.com/users/ResidentMario/repos",
      "events_url": "https://api.github.com/users/ResidentMario/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ResidentMario/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-05T22:49:00Z",
    "updated_at": "2017-03-05T22:49:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "In `com.is_string_type`:\r\n\r\n    dtype.kind in ('O', 'S', 'U')\r\n\r\nThe type checker naively assumes that if you passed it an object, it must have been a string!"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/284270591",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15533#issuecomment-284270591",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15533",
    "id": 284270591,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDI3MDU5MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-05T22:57:51Z",
    "updated_at": "2017-03-05T22:57:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "``is_string_dtype`` is not strict. It really can't be w/o a lot of code inference (which is not cheap). You can certainly add a comment to it if you'd like. If you really *need* inference then you can do ``lib.infer_type`` which IS strict. (but again is not free, though not too bad as it short-circuits)."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/284270991",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15533#issuecomment-284270991",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15533",
    "id": 284270991,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDI3MDk5MQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-05T23:03:43Z",
    "updated_at": "2017-03-05T23:03:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ResidentMario note that imports from ``pandas.core.common`` are almost all deprecated, use ``pandas.types.common``"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/285306175",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15533#issuecomment-285306175",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15533",
    "id": 285306175,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTMwNjE3NQ==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-09T09:54:08Z",
    "updated_at": "2017-03-09T09:54:13Z",
    "author_association": "MEMBER",
    "body": "@ResidentMario Is the description at the top of this issue still up to date with how you are trying to implement things in #15587 ?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/285395280",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15533#issuecomment-285395280",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15533",
    "id": 285395280,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTM5NTI4MA==",
    "user": {
      "login": "ResidentMario",
      "id": 3466341,
      "node_id": "MDQ6VXNlcjM0NjYzNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3466341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ResidentMario",
      "html_url": "https://github.com/ResidentMario",
      "followers_url": "https://api.github.com/users/ResidentMario/followers",
      "following_url": "https://api.github.com/users/ResidentMario/following{/other_user}",
      "gists_url": "https://api.github.com/users/ResidentMario/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ResidentMario/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ResidentMario/subscriptions",
      "organizations_url": "https://api.github.com/users/ResidentMario/orgs",
      "repos_url": "https://api.github.com/users/ResidentMario/repos",
      "events_url": "https://api.github.com/users/ResidentMario/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ResidentMario/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-09T16:06:23Z",
    "updated_at": "2017-03-09T16:06:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hmm. This list is incomplete, and I think there's been a couple of changes there:\r\n\r\n* `Period` is `O` dtype, the implementation there uses `object` rules for `Period` columns because of that. (probably just need to investigate this further?)\r\n* I'm being a bit more strict with only allowing datetime types to `datetime64[ns]` columns, not numerical types (so no `int`, `float`, etc.).\r\n\r\nA big question right now is whether or not in the case of a `DataFrame` we want to validate column-by-column or consolidate the `dtype` (probably into `object`) and use the rules for filling that instead."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/285441648",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15533#issuecomment-285441648",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15533",
    "id": 285441648,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTQ0MTY0OA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-09T18:43:21Z",
    "updated_at": "2017-03-09T18:43:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Period is O dtype, the implementation there uses object rules for Period columns because of that. (probably just need to investigate this further?)\r\n\r\nyes this is a special case atm, you you can simply use ``is_period_arraylike`` on an object column to check, and if true, then restrict the fill value.\r\n\r\n\r\n> I'm being a bit more strict with only allowing datetime types to datetime64[ns] columns, not numerical types (so no int, float, etc.).\r\n\r\nyes\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/285442956",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15533#issuecomment-285442956",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15533",
    "id": 285442956,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTQ0Mjk1Ng==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-09T18:48:13Z",
    "updated_at": "2017-03-09T18:48:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "> A big question right now is whether or not in the case of a DataFrame we want to validate column-by-column or consolidate the dtype (probably into object) and use the rules for filling that instead.\r\n\r\nI think a reasonable way to do this is to:\r\n\r\n- add a ``errors='ignore'|'raise'|'force'`` kw to ``.fillna*`` routines\r\n- if ``errors='ignore'`` (default), then allow filling of a column only if the types match (IOW don't fill datetimes with ints, just skip them)\r\n- if ``errors='raise'`` then raise on anything that is not compat with the filling\r\n- if ``errors='force'`` then coerce the columns as needed (even to ``object``).\r\n\r\nthis would give nice behavior by default of filling things that can take that value and providing error checking otherwise (with an option for ``force`` filling, but that's user selected).\r\n\r\nThe current situation is effectively ``errors='force'``.\r\n```\r\nIn [2]: df = DataFrame({'A':[1,2,3],'B':pd.date_range('20130101',periods=3)})\r\n\r\nIn [3]: df\r\nOut[3]: \r\n   A          B\r\n0  1 2013-01-01\r\n1  2 2013-01-02\r\n2  3 2013-01-03\r\n\r\nIn [4]: df.iloc[1] = np.nan\r\n\r\nIn [5]: df\r\nOut[5]: \r\n     A          B\r\n0  1.0 2013-01-01\r\n1  NaN        NaT\r\n2  3.0 2013-01-03\r\n\r\nIn [6]: df.fillna(0)\r\nOut[6]: \r\n     A          B\r\n0  1.0 2013-01-01\r\n1  0.0 1970-01-01\r\n2  3.0 2013-01-03\r\n\r\nIn [7]: df.fillna(pd.Timestamp('20130110'))\r\nOut[7]: \r\n                     A          B\r\n0                    1 2013-01-01\r\n1  2013-01-10 00:00:00 2013-01-10\r\n2                    3 2013-01-03\r\n```\r\nI suppose  we could also make the default ``errors='raise'``, though not back-compat . This would be more obvious. ``errors='ignore'`` is more convenient.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/285762262",
    "html_url": "https://github.com/pandas-dev/pandas/issues/15533#issuecomment-285762262",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/15533",
    "id": 285762262,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NTc2MjI2Mg==",
    "user": {
      "login": "ResidentMario",
      "id": 3466341,
      "node_id": "MDQ6VXNlcjM0NjYzNDE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3466341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ResidentMario",
      "html_url": "https://github.com/ResidentMario",
      "followers_url": "https://api.github.com/users/ResidentMario/followers",
      "following_url": "https://api.github.com/users/ResidentMario/following{/other_user}",
      "gists_url": "https://api.github.com/users/ResidentMario/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ResidentMario/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ResidentMario/subscriptions",
      "organizations_url": "https://api.github.com/users/ResidentMario/orgs",
      "repos_url": "https://api.github.com/users/ResidentMario/repos",
      "events_url": "https://api.github.com/users/ResidentMario/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ResidentMario/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-10T19:29:07Z",
    "updated_at": "2017-03-10T19:29:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ok so then:\r\n\r\n1. New PR implementing an `errors` param for `fillna` via a new validator func (#11953).\r\n2. PR implementing that validator func in the various `fill_value` routines with the default validator func behavior (#15533; [PR#15587](https://github.com/pandas-dev/pandas/pull/15587)).\r\n3. PR adding the `errors` param to `shift` (#15486; [PR#15527](https://github.com/pandas-dev/pandas/pull/15527)).\r\n\r\nI suggest also adding a new `pd.set_option` param for letting the user pick their error coercion mode if they want."
  }
]
