[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/363928520",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19577#issuecomment-363928520",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19577",
    "id": 363928520,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzkyODUyMA==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-07T22:12:01Z",
    "updated_at": "2018-02-07T22:12:01Z",
    "author_association": "MEMBER",
    "body": "Migrated from #19520:\r\n\r\n> A thorny issue: What to do with comparison methods\r\n\r\nI've been planning on moving the Index/Series arithmetic/comparison ops into Array subclasses, so that `Series.__op__(other)` could just wrap `self._data.blocks[0].__op__(other)` and we get consistency between Series/DataFrame ops for free.\r\n\r\nMost of the comparison ops are ready to make that jump; I can prioritize it if getting that done quickly will help you out.\r\n\r\nOne caveat I'm concerned about is that the existing implementations in the Index subclasses have gotten tangled up with a bunch of unrelated Index machinery. Ideally I'd like these operations to go into self-contained mixin classes that rely on constructor methods, but are independent of slicing/concat/reindex/dropna/... mentioned above."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/365988249",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19577#issuecomment-365988249",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19577",
    "id": 365988249,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTk4ODI0OQ==",
    "user": {
      "login": "jbrockmendel",
      "id": 8078968,
      "node_id": "MDQ6VXNlcjgwNzg5Njg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8078968?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbrockmendel",
      "html_url": "https://github.com/jbrockmendel",
      "followers_url": "https://api.github.com/users/jbrockmendel/followers",
      "following_url": "https://api.github.com/users/jbrockmendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbrockmendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbrockmendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbrockmendel/subscriptions",
      "organizations_url": "https://api.github.com/users/jbrockmendel/orgs",
      "repos_url": "https://api.github.com/users/jbrockmendel/repos",
      "events_url": "https://api.github.com/users/jbrockmendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbrockmendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-15T16:47:15Z",
    "updated_at": "2018-02-15T16:47:15Z",
    "author_association": "MEMBER",
    "body": "@TomAugspurger two quick namespace-gameplan questions.\r\n\r\nAssuming the arith/comparison methods currently in DatetimeIndexOpsMixin/DTI/TDI/PI get moved into analogous array classes, do you envision these getting a) mixed into the appropriate Index/Block subclasses or b) accessed via composition?  If the latter, what name (`DatetimeIndex._??_values`) should these use to get at the pdarray implementation?\r\n\r\nBecause the datetimelike methods wrap some of the base Index methods, some of those will need to move up too.  Where do you envision something like BaseArray living?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/365992050",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19577#issuecomment-365992050",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19577",
    "id": 365992050,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTk5MjA1MA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-15T16:58:34Z",
    "updated_at": "2018-02-15T16:58:34Z",
    "author_association": "MEMBER",
    "body": "It will be composition (that is what Block is already doing), and for Index it will be the \"_values\" attribute IIRC"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/383724939",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19577#issuecomment-383724939",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19577",
    "id": 383724939,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzcyNDkzOQ==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-23T21:12:41Z",
    "updated_at": "2018-04-23T21:12:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "@TomAugspurger So now I've hit upon this issue of how to deal with the binary operators, and the question is what should these operators return (in the case of the arithmetic operators).  Consider the `decimal` example in `tests/extension/decimal` and the following code:\r\n```\r\nIn [1]: import decimal\r\n\r\nIn [2]: import pandas as pd\r\n\r\nIn [3]: from pandas.tests.extension.decimal.array import DecimalArray\r\n   ...:\r\n   ...: a = DecimalArray([decimal.Decimal(str(i)) for i in range(5)])\r\n   ...: b = a.values\r\n   ...: sa = pd.Series(a)\r\n   ...: sb = pd.Series(b)\r\n   ...: tb = sb + sb\r\n   ...:\r\n\r\nIn [4]: tb\r\nOut[4]:\r\n0    0\r\n1    2\r\n2    4\r\n3    6\r\n4    8\r\ndtype: object\r\n\r\nIn [5]: ta = sa + sa\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\core\\ops.py in na_op(x, y)\r\n   1008         try:\r\n-> 1009             result = expressions.evaluate(op, str_rep, x, y, **eval_kwargs)\r\n   1010         except TypeError:\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\core\\computation\\expressions.py in evaluate(op, op_str, a, b, use_numexpr, **eval_kwargs)\r\n    204     if use_numexpr:\r\n--> 205         return _evaluate(op, op_str, a, b, **eval_kwargs)\r\n    206     return _evaluate_standard(op, op_str, a, b)\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\core\\computation\\expressions.py in _evaluate_numexpr(op, op_str, a, b, truediv, reversed, **eval_kwargs)\r\n    119     if result is None:\r\n--> 120         result = _evaluate_standard(op, op_str, a, b)\r\n    121\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\core\\computation\\expressions.py in _evaluate_standard(op, op_str, a, b, **eval_kwargs)\r\n     64     with np.errstate(all='ignore'):\r\n---> 65         return op(a, b)\r\n     66\r\n\r\nTypeError: unsupported operand type(s) for +: 'DecimalArray' and 'DecimalArray'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nAssertionError                            Traceback (most recent call last)\r\n<ipython-input-5-8612afbce1b2> in <module>()\r\n----> 1 ta = sa + sa\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\core\\ops.py in wrapper(left, right)\r\n   1064             rvalues = rvalues.values\r\n   1065\r\n-> 1066         result = safe_na_op(lvalues, rvalues)\r\n   1067         return construct_result(left, result,\r\n   1068                                 index=left.index, name=res_name, dtype=None)\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\core\\ops.py in safe_na_op(lvalues, rvalues)\r\n   1028         try:\r\n   1029             with np.errstate(all='ignore'):\r\n-> 1030                 return na_op(lvalues, rvalues)\r\n   1031         except Exception:\r\n   1032             if is_object_dtype(lvalues):\r\n\r\nC:\\EclipseWorkspaces\\LiClipseWorkspace\\pandas-dev\\pandas36\\pandas\\core\\ops.py in na_op(x, y)\r\n   1015                 result[mask] = op(x[mask], com._values_from_object(y[mask]))\r\n   1016             else:\r\n-> 1017                 assert isinstance(x, np.ndarray)\r\n   1018                 result = np.empty(len(x), dtype=x.dtype)\r\n   1019                 mask = notna(x)\r\n\r\nAssertionError:\r\n```\r\n\r\nSo if the `Decimal` values are in a `Series` with `dtype` `object`, I can add them just fine, and I get a `Series` with dtype `object`.  In the case of adding the `Series` that is backed by a `DecimalArray`, then it fails.  It's not clear to me if we want to result to be the type of the subclass of `ExtensionArray` or if the person implementing the subclass can specify which class is used for each operator.  (One could imagine that the result of a binary operator could be a _different_ ExtensionArray subclass, or even that the result of different binary operators could be different subclasses.  For example, arithmetic operators produce objects, and relational operators produce booleans).\r\n\r\nSo there are 3 options as I see it:\r\n\r\n1. Make it the responsibility of the person subclassing `ExtensionArray` to implement the operators to determine the return type\r\n2. Make the result of all `ExtensionArraySubclass.binop(ExtensionArraySubclass)` always be `ExtensionArraySubclass`\r\n3. Set up something in the `ExtensionArray` implementation that allows the class containing results of operators to be defined by the person implementing the subclass.\r\n\r\nI think I'd favor (3), but I could live with (2).  I'd prefer to not do (1), as that is a lot of effort that it seems people would have to repeat.\r\n\r\nThoughts?\r\n\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/383728434",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19577#issuecomment-383728434",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19577",
    "id": 383728434,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzcyODQzNA==",
    "user": {
      "login": "jorisvandenbossche",
      "id": 1020496,
      "node_id": "MDQ6VXNlcjEwMjA0OTY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1020496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jorisvandenbossche",
      "html_url": "https://github.com/jorisvandenbossche",
      "followers_url": "https://api.github.com/users/jorisvandenbossche/followers",
      "following_url": "https://api.github.com/users/jorisvandenbossche/following{/other_user}",
      "gists_url": "https://api.github.com/users/jorisvandenbossche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jorisvandenbossche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jorisvandenbossche/subscriptions",
      "organizations_url": "https://api.github.com/users/jorisvandenbossche/orgs",
      "repos_url": "https://api.github.com/users/jorisvandenbossche/repos",
      "events_url": "https://api.github.com/users/jorisvandenbossche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jorisvandenbossche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-23T21:25:42Z",
    "updated_at": "2018-04-23T21:25:42Z",
    "author_association": "MEMBER",
    "body": "I think initially we should go for option 1, and make sure that pandas actually dispatches to it. But I don't fully understand your option 3. Can you clarify a bit more?\r\n\r\nI don't think option 2 is actually an option (IMO it is also independent of deciding where the actual operation is implemented), because, as you mention, the result of an operation does not necessarily need to be of the same type (additional example: substraction of datetimes gives timedelta. That is definitely a case we need to handle)\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/383730631",
    "html_url": "https://github.com/pandas-dev/pandas/issues/19577#issuecomment-383730631",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/19577",
    "id": 383730631,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MzczMDYzMQ==",
    "user": {
      "login": "Dr-Irv",
      "id": 15113894,
      "node_id": "MDQ6VXNlcjE1MTEzODk0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/15113894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dr-Irv",
      "html_url": "https://github.com/Dr-Irv",
      "followers_url": "https://api.github.com/users/Dr-Irv/followers",
      "following_url": "https://api.github.com/users/Dr-Irv/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dr-Irv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dr-Irv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dr-Irv/subscriptions",
      "organizations_url": "https://api.github.com/users/Dr-Irv/orgs",
      "repos_url": "https://api.github.com/users/Dr-Irv/repos",
      "events_url": "https://api.github.com/users/Dr-Irv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dr-Irv/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-23T21:34:21Z",
    "updated_at": "2018-04-23T21:34:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jorisvandenbossche Yes, I see now that option 2 isn't viable.\r\n\r\nMy idea on option 3 is something like this.  The subclass implements a `_binop_result_class` class attribute that contains a dictionary.  The keys to that dictionary are the different operators, and the values for each key are the array class that the operator returns.  Any operators not in the dictionary use default pandas behaviors (e.g., return np.array([], dtype='object') for arithmetic operators, and booleans for logical ones).\r\n\r\nThe default behavior is to just do an element-by-element operation.  If the class of the underlying dtype has implemented the operator, then it gets called automatically, and all is well.\r\n\r\n"
  }
]
