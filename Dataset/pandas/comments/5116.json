[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/25741921",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5116#issuecomment-25741921",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5116",
    "id": 25741921,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzQxOTIx",
    "user": {
      "login": "jtratner",
      "id": 1598379,
      "node_id": "MDQ6VXNlcjE1OTgzNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1598379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtratner",
      "html_url": "https://github.com/jtratner",
      "followers_url": "https://api.github.com/users/jtratner/followers",
      "following_url": "https://api.github.com/users/jtratner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtratner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtratner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtratner/subscriptions",
      "organizations_url": "https://api.github.com/users/jtratner/orgs",
      "repos_url": "https://api.github.com/users/jtratner/repos",
      "events_url": "https://api.github.com/users/jtratner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtratner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-05T04:35:35Z",
    "updated_at": "2013-10-05T04:35:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "To start with, @azbones can you clarify something: does the behavior you cite _only_ occur when using the BigQuery module or does it happen with pandas generally?  What happens if you remove the print statements from the PR?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/25741943",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5116#issuecomment-25741943",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5116",
    "id": 25741943,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzQxOTQz",
    "user": {
      "login": "jtratner",
      "id": 1598379,
      "node_id": "MDQ6VXNlcjE1OTgzNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1598379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtratner",
      "html_url": "https://github.com/jtratner",
      "followers_url": "https://api.github.com/users/jtratner/followers",
      "following_url": "https://api.github.com/users/jtratner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtratner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtratner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtratner/subscriptions",
      "organizations_url": "https://api.github.com/users/jtratner/orgs",
      "repos_url": "https://api.github.com/users/jtratner/repos",
      "events_url": "https://api.github.com/users/jtratner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtratner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-05T04:37:40Z",
    "updated_at": "2013-10-05T04:37:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "Snippet of @azbones report here:\n\n> Hey @sean-schaefer if you have some time, could you try a clean install of this branch of Pandas using the standard 2.7.x and try the read_gbq and write_gbq? Other than any Pandas dependencies, you should only need to easy_install bigquery. I've tested it on Canopy on Mac OSX and Windows 7 and using Anaconda on Windows 7. I have a trouble ticket in with Enthought and they gave me some guidance on how to perhaps isolate the issue we saw with the Canopy iPython Editor throwing that \"pkgutil.py find_module() takes exactly 3 arguments (2 given)\" error which I will try tomorrow.\n> \n> If you could try the base 2.7.x Python with whatever OSs you have that would be great.\n\n---\n\n> @sean-schaefer it seems to be a problem just with the Canopy app editor version of ipython as ipython --pylab=qt which uses qt console also does not seem to throw that bug. They told me that is the ipython mode that the app runs in, so not sure what is going on. I'll post when I know more. You might try just ipython and then ipython --pylab=qt\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/25935531",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5116#issuecomment-25935531",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5116",
    "id": 25935531,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTM1NTMx",
    "user": {
      "login": "azbones",
      "id": 4975596,
      "node_id": "MDQ6VXNlcjQ5NzU1OTY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4975596?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/azbones",
      "html_url": "https://github.com/azbones",
      "followers_url": "https://api.github.com/users/azbones/followers",
      "following_url": "https://api.github.com/users/azbones/following{/other_user}",
      "gists_url": "https://api.github.com/users/azbones/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/azbones/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/azbones/subscriptions",
      "organizations_url": "https://api.github.com/users/azbones/orgs",
      "repos_url": "https://api.github.com/users/azbones/repos",
      "events_url": "https://api.github.com/users/azbones/events{/privacy}",
      "received_events_url": "https://api.github.com/users/azbones/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-08T23:12:23Z",
    "updated_at": "2013-10-08T23:12:47Z",
    "author_association": "NONE",
    "body": "@jtratner I've only seen it with the BigQuery module so far and not Pandas in general.  Specifically, it seems to only be within the Enthought Canopy distribution when using the iPython editor when launched from the Canopy UI.  I've seen it across Windows 7 and Mac OSX.  I updated my ticket with Enthought and was waiting to see if they had any other thoughts.  Initially, they thought it was the QT_API binding as they used pyside, but I think I have eliminated that as the sole potential cause.\n\nHere is the last message I left on the Enthought ticket I opened:\n\nI finally got to try this again. I tried it on a cleaner Win 7 system that had 64-bit Canopy Version: 1.1.0.1371 installed as the default Python environment. What I found was:\n\nSetting the QT binding: \n\n> set QT_API=pyqt\n\nLaunching iPython three different ways: \n\n> ipython \n> ipython qtconsole \n> ipython qtconsole --pylab=qt\n\nIn all three configurations, our code worked.\n\nchanging the QT binding to: \n\n> set QT_API=pyside\n\nAll three configurations of iPython also worked correctly with our code. I know per your earlier link (https://support.enthought.com/entries/22305234-IPython-updating-this-package-affects-IPython-in-terminal-but-not-in-Canopy-application) , that the command line iPython and the iPython within the Canopy GUI may be different. **version** yields 1.7.1 in both the Canopy App version and the pylab command line iPython.\n\nSo, pyside in the command line doesn't seem to be the issue. The other thing I tried was changing the Canopy Pylab backend preferences to 'wx'. This, like disabling Pylab in the preference, also allows our code to work without the error. I've never used wx, so not sure if this is a viable option to QT or not.\n\nThe issue seems to be isolated to just iPython within the Canopy UI. I have several work arounds:\n\n-disable Pylab \n-change backend to wx \n-(the overly hackish) insert an empty list like so \"loader = importer.find_module(fullname,[])\" in C:\\Users\\collin\\AppData\\Local\\Enthought\\Canopy\\App\\appdata\\canopy-1.1.0.1371.win-x86_64\\Lib\\pkgutil.py \n-use qtconsole from the command line\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/25936036",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5116#issuecomment-25936036",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5116",
    "id": 25936036,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTM2MDM2",
    "user": {
      "login": "jtratner",
      "id": 1598379,
      "node_id": "MDQ6VXNlcjE1OTgzNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1598379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtratner",
      "html_url": "https://github.com/jtratner",
      "followers_url": "https://api.github.com/users/jtratner/followers",
      "following_url": "https://api.github.com/users/jtratner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtratner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtratner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtratner/subscriptions",
      "organizations_url": "https://api.github.com/users/jtratner/orgs",
      "repos_url": "https://api.github.com/users/jtratner/repos",
      "events_url": "https://api.github.com/users/jtratner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtratner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-08T23:22:48Z",
    "updated_at": "2013-10-08T23:22:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "It's incredible to me that the code could do that. Can you tell if it's the\npandas module vs the Google library?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/25936118",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5116#issuecomment-25936118",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5116",
    "id": 25936118,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTM2MTE4",
    "user": {
      "login": "jtratner",
      "id": 1598379,
      "node_id": "MDQ6VXNlcjE1OTgzNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1598379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtratner",
      "html_url": "https://github.com/jtratner",
      "followers_url": "https://api.github.com/users/jtratner/followers",
      "following_url": "https://api.github.com/users/jtratner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtratner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtratner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtratner/subscriptions",
      "organizations_url": "https://api.github.com/users/jtratner/orgs",
      "repos_url": "https://api.github.com/users/jtratner/repos",
      "events_url": "https://api.github.com/users/jtratner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtratner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-08T23:24:23Z",
    "updated_at": "2013-10-08T23:24:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm going to see if I can reproduce it locally. Btw - have you tried\nIPython notebook? Interactive like QT console but it's much nicer to use\n(with better tab completion)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/25936282",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5116#issuecomment-25936282",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5116",
    "id": 25936282,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTM2Mjgy",
    "user": {
      "login": "azbones",
      "id": 4975596,
      "node_id": "MDQ6VXNlcjQ5NzU1OTY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4975596?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/azbones",
      "html_url": "https://github.com/azbones",
      "followers_url": "https://api.github.com/users/azbones/followers",
      "following_url": "https://api.github.com/users/azbones/following{/other_user}",
      "gists_url": "https://api.github.com/users/azbones/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/azbones/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/azbones/subscriptions",
      "organizations_url": "https://api.github.com/users/azbones/orgs",
      "repos_url": "https://api.github.com/users/azbones/repos",
      "events_url": "https://api.github.com/users/azbones/events{/privacy}",
      "received_events_url": "https://api.github.com/users/azbones/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-08T23:27:28Z",
    "updated_at": "2013-10-08T23:52:30Z",
    "author_association": "NONE",
    "body": "@jtratner here is the stack trace.  I'm guessing it has something to do with the iPython within Canopy app using different components than the command line.  It took a while to isolate it because we were all using different flavors of iPython.  \n\nI'll try it with notebook as I haven't yet. \n\n```\n#note gbq.read_gbq is our module. Also, we have seen this error across Mac OSX and Windows 7 so far.\n\ngbq.read_gbq('SELECT * FROM [publicdata:samples.shakespeare]') \n--------------------------------------------------------------------------- \nTypeError Traceback (most recent call last) \n<ipython-input-2-c86774d931e9> in <module>() \n----> 1 gbq.read_gbq('SELECT * FROM [publicdata:samples.shakespeare]')\n\n/Users/uschaj3/Repositories/pandas/pandas/io/gbq.pyc in read_gbq(query, project_id, destination_table, index_col, col_order, **kwargs) \n452 raise \n453 try: \n--> 454 job = client.Query(**query_args) \n455 except bigquery_client.BigqueryInvalidQueryError as Ex: \n456 print('Error Parsing Query: ' + str(query))\n\n/Users/uschaj3/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/bigquery-2.0.15-py2.7.egg/bigquery_client.pyc in Query(self, query, destination_table, create_disposition, write_disposition, priority, preserve_nulls, allow_large_results, dry_run, use_cache, min_completion_ratio, **kwds) \n1923 request = {'query': query_config} \n1924 _ApplyParameters(request, dry_run=dry_run) \n-> 1925 return self.ExecuteJob(request, **kwds) \n1926 \n1927 def Load(self, destination_table_reference, source,\n\n/Users/uschaj3/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/bigquery-2.0.15-py2.7.egg/bigquery_client.pyc in ExecuteJob(self, configuration, sync, project_id, upload_file, job_id) \n1588 job = self.RunJobSynchronously( \n1589 configuration, project_id=project_id, upload_file=upload_file, \n-> 1590 job_id=job_id) \n1591 else: \n1592 job = self.StartJob(\n\n/Users/uschaj3/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/bigquery-2.0.15-py2.7.egg/bigquery_client.pyc in RunJobSynchronously(self, configuration, project_id, upload_file, job_id) \n1573 upload_file=None, job_id=None): \n1574 result = self.StartJob(configuration, project_id=project_id, \n-> 1575 upload_file=upload_file, job_id=job_id) \n1576 if result['status']['state'] != 'DONE': \n1577 job_reference = BigqueryClient.ConstructObjectReference(result)\n\n/Users/uschaj3/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/bigquery-2.0.15-py2.7.egg/bigquery_client.pyc in StartJob(self, configuration, project_id, upload_file, job_id) \n1478 filename=upload_file, mimetype='application/octet-stream', \n1479 resumable=resumable) \n-> 1480 result = self.apiclient.jobs().insert( \n1481 body=job_request, media_body=media_upload, \n1482 projectId=project_id).execute()\n\n/Users/uschaj3/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/bigquery-2.0.15-py2.7.egg/bigquery_client.pyc in apiclient(self) \n469 discovery_document = pkgutil.get_data( \n470 'bigquery_client', 'discovery/%s.bigquery.%s.rest.json' \n--> 471 % (_ToFilename(self.api), self.api_version)) \n472 except IOError: \n473 discovery_document = None\n\n/Applications/Canopy.app/appdata/canopy-1.1.0.1371.macosx-x86_64/Canopy.app/Contents/lib/python2.7/pkgutil.pyc in get_data(package, resource) \n576 \"\"\" \n577 \n--> 578 loader = get_loader(package) \n579 if loader is None or not hasattr(loader, 'get_data'): \n580 return None\n\n/Applications/Canopy.app/appdata/canopy-1.1.0.1371.macosx-x86_64/Canopy.app/Contents/lib/python2.7/pkgutil.pyc in get_loader(module_or_name) \n462 else: \n463 fullname = module_or_name \n--> 464 return find_loader(fullname) \n465 \n466 def find_loader(fullname):\n\n/Applications/Canopy.app/appdata/canopy-1.1.0.1371.macosx-x86_64/Canopy.app/Contents/lib/python2.7/pkgutil.pyc in find_loader(fullname) \n473 \"\"\" \n474 for importer in iter_importers(fullname): \n--> 475 loader = importer.find_module(fullname) \n476 if loader is not None: \n477 return loader\n\nTypeError: find_module() takes exactly 3 arguments (2 given)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/25937514",
    "html_url": "https://github.com/pandas-dev/pandas/issues/5116#issuecomment-25937514",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/5116",
    "id": 25937514,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTM3NTE0",
    "user": {
      "login": "jtratner",
      "id": 1598379,
      "node_id": "MDQ6VXNlcjE1OTgzNzk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1598379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtratner",
      "html_url": "https://github.com/jtratner",
      "followers_url": "https://api.github.com/users/jtratner/followers",
      "following_url": "https://api.github.com/users/jtratner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtratner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtratner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtratner/subscriptions",
      "organizations_url": "https://api.github.com/users/jtratner/orgs",
      "repos_url": "https://api.github.com/users/jtratner/repos",
      "events_url": "https://api.github.com/users/jtratner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtratner/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-10-08T23:55:49Z",
    "updated_at": "2013-10-08T23:55:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "okay, this error is pretty clearly the fault of google's biquery module's call to pkgutil (`469 discovery_document = pkgutil.get_data(`), so there's no way for pandas to fix it (and you'd encounter this if you were using google's bigquery directly), so I'm going to close this, because we have no control over it. If you/we can figure out a minimal working example of the error, might be useful to pass it along to the bigquery people.\n"
  }
]
