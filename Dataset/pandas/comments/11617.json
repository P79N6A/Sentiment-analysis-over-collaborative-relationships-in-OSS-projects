[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/157164742",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11617#issuecomment-157164742",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11617",
    "id": 157164742,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzE2NDc0Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-16T20:48:43Z",
    "updated_at": "2015-11-16T20:48:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "hmm, that is a bit inconsistent. I would expect all of these to give the same result (and not coerce), adding `.iloc` here and not change the dtype.\n\n```\nIn [23]: d\nOut[23]: \n      a    b\n0  1.23  666\n\nIn [24]: d.dtypes\nOut[24]: \na    float64\nb      int64\ndtype: object\n\nIn [25]: d.ix[0, \"b\"]\nOut[25]: 666\n\nIn [26]: d.loc[0, \"b\"]\nOut[26]: 666.0\n\nIn [28]: d.iloc[0,1]\nOut[28]: 666.0\n```\n\nif you'd like to dig in would be great!\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/157343258",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11617#issuecomment-157343258",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11617",
    "id": 157343258,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzM0MzI1OA==",
    "user": {
      "login": "samueljohn",
      "id": 725299,
      "node_id": "MDQ6VXNlcjcyNTI5OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/725299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/samueljohn",
      "html_url": "https://github.com/samueljohn",
      "followers_url": "https://api.github.com/users/samueljohn/followers",
      "following_url": "https://api.github.com/users/samueljohn/following{/other_user}",
      "gists_url": "https://api.github.com/users/samueljohn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/samueljohn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/samueljohn/subscriptions",
      "organizations_url": "https://api.github.com/users/samueljohn/orgs",
      "repos_url": "https://api.github.com/users/samueljohn/repos",
      "events_url": "https://api.github.com/users/samueljohn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/samueljohn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-17T11:30:51Z",
    "updated_at": "2015-11-17T11:30:51Z",
    "author_association": "NONE",
    "body": "Wow ... I have been deep down in the 5k LOC internals.py... I don't think I wanna go there again :-)\nI somehow assumed pandas was something \"lightweight\" on top of numpy. \n\nSo, indeed a creation of a `Series` seems involved.\n\nIn the following, I used the latest release for tracing but I do point into the master codebase. Perhaps If you have installed pandas master you could try if this still applies (I think yes).\n\nI have traced it so far as first a Series is created for the first key in the tuple `(0,\"b\")`. The call to `d.loc.obj._xs(0, axis=0)` calls `d.loc.obj._data.fast_xs(0)` here:\nhttps://github.com/pydata/pandas/blob/master/pandas/core/generic.py#L1498-L1500\n\nIn the creation of the Series, the blocks are still correct:\n`(FloatBlock: slice(0, 1, 1), 1 x 1, dtype: float64, IntBlock: slice(1, 2, 1), 1 x 1, dtype: int64)`\n\nBut then in the dtype is determined by `dtype = _interleaved_dtype(self.blocks)` (https://github.com/pydata/pandas/blob/master/pandas/core/internals.py#L3170) and returns `float64` which makes sense from a number theoretical POV. That method is also in internals:\nhttps://github.com/pydata/pandas/blob/master/pandas/core/internals.py#L4114\n\nI think this is how pandas Series are defined (they must contain just one type).\n\nBut the question is if the creation of the series should perhaps better be done _after_ the second key (in this example the column `\"b\"`) is evaluated. Because then the dtype would not need to be a float64 at all.\n\nNot sure if this is still `Effort Low`.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/157345663",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11617#issuecomment-157345663",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11617",
    "id": 157345663,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1NzM0NTY2Mw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-17T11:41:36Z",
    "updated_at": "2015-11-17T11:41:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "@samueljohn haha, indexing is pretty complex!\n\nWe don't distinguish between all scalar keys upfront, hence the serial conversions. Easiest thing to do is try changing and see if your tests for this behavior (and original tests pass). That is the part about indexing, preserving the API when making changes.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/216767947",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11617#issuecomment-216767947",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11617",
    "id": 216767947,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNjc2Nzk0Nw==",
    "user": {
      "login": "ch41rmn",
      "id": 1684060,
      "node_id": "MDQ6VXNlcjE2ODQwNjA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1684060?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ch41rmn",
      "html_url": "https://github.com/ch41rmn",
      "followers_url": "https://api.github.com/users/ch41rmn/followers",
      "following_url": "https://api.github.com/users/ch41rmn/following{/other_user}",
      "gists_url": "https://api.github.com/users/ch41rmn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ch41rmn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ch41rmn/subscriptions",
      "organizations_url": "https://api.github.com/users/ch41rmn/orgs",
      "repos_url": "https://api.github.com/users/ch41rmn/repos",
      "events_url": "https://api.github.com/users/ch41rmn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ch41rmn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-04T07:41:31Z",
    "updated_at": "2016-05-04T07:41:31Z",
    "author_association": "NONE",
    "body": "Hi @jreback , @samueljohn.\n\nI also encountered this problem today. After a little digging around, the following may help:\n\nFirstly, the dataframe behaves correctly if there is a non-numeric object in the dataframe:\n\n```\n>>> df = pd.DataFrame({'x': [1,2,3], 'y': [1.0, 2.0, 3.0]}, columns=['x', 'y'])\n>>> df.loc[0]\nx    1.0\ny    1.0\nName: 0, dtype: float64\n>>> [type(v) for v in df.loc[0]]\n[numpy.float64, numpy.float64]\n\n>>> df['z'] = 'foo'\n>>> df.loc[0]\nx    1  \ny    1  \nz    foo\nName: 0, dtype: object\n>>> [type(v) forv in df.loc[0]]\n[numpy.int64, numpy.float64, str]\n```\n\nSecondly, this may be fixed by simply changing how the Series constructor is called:\n\n```\n>>> s = pd.Series([np.int64(1), np.float64(1.0)])\n>>> print s\n0    1.0\n1    1.0\ndtype: float64\n>>> [type(v) for v in s]\n[numpy.float64, numpy.float64]\n\n>>> s = pd.Series([np.int64(1), np.float64(1.0)], dtype='object')\n>>> print s\n0    1\n1    1\ndtype: object\n>>> [type(v) for v in s]\n[numpy.int64, numpy.float64]\n```\n\nAny thoughts on possible performance hits if `df.loc[...]` always returns a series with `dtype='object'`?\n\nCheers,\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/216842090",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11617#issuecomment-216842090",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11617",
    "id": 216842090,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNjg0MjA5MA==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-04T12:13:55Z",
    "updated_at": "2016-05-04T12:13:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "returning as `object` is only appropriate if it actually includes things that are not representable as baser types. right now we coerce ints to floats if needed, this is pretty standard practice as it leads to much more efficiency.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/217023266",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11617#issuecomment-217023266",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11617",
    "id": 217023266,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNzAyMzI2Ng==",
    "user": {
      "login": "ch41rmn",
      "id": 1684060,
      "node_id": "MDQ6VXNlcjE2ODQwNjA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1684060?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ch41rmn",
      "html_url": "https://github.com/ch41rmn",
      "followers_url": "https://api.github.com/users/ch41rmn/followers",
      "following_url": "https://api.github.com/users/ch41rmn/following{/other_user}",
      "gists_url": "https://api.github.com/users/ch41rmn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ch41rmn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ch41rmn/subscriptions",
      "organizations_url": "https://api.github.com/users/ch41rmn/orgs",
      "repos_url": "https://api.github.com/users/ch41rmn/repos",
      "events_url": "https://api.github.com/users/ch41rmn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ch41rmn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-04T22:30:09Z",
    "updated_at": "2016-05-04T22:30:09Z",
    "author_association": "NONE",
    "body": "I propose a fix in  _interleaved_dtype(blocks).\n\nI think there are use cases for both scenarios:\n- always coerce numeric dtypes into a dtype that supports all dtypes in the block, for calculation-heavy applications which don't care too much about preserving numerical dtypes\n- always preserve numerical dtypes, using dtype('object') where different numerical types are present. For applications where preserving the dtypes of a data frame is important.\n\nMaybe it could be added as a pandas option, perhaps 'mode.coerce_numerical_dtypes'?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/217025817",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11617#issuecomment-217025817",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11617",
    "id": 217025817,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNzAyNTgxNw==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-04T22:43:18Z",
    "updated_at": "2016-05-04T22:43:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Try to address the specific change of verifying that all of the cases above return the same dtype. Doing something more complicated like returning an `object` dtype is prob ok, but only in very certain circumnstances.\n\nDoing what you are suggesting above is not going to back-compat and likely break lots of things. Start small.\n\nAdding an option is also a non-starter.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/217027175",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11617#issuecomment-217027175",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11617",
    "id": 217027175,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNzAyNzE3NQ==",
    "user": {
      "login": "ch41rmn",
      "id": 1684060,
      "node_id": "MDQ6VXNlcjE2ODQwNjA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1684060?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ch41rmn",
      "html_url": "https://github.com/ch41rmn",
      "followers_url": "https://api.github.com/users/ch41rmn/followers",
      "following_url": "https://api.github.com/users/ch41rmn/following{/other_user}",
      "gists_url": "https://api.github.com/users/ch41rmn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ch41rmn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ch41rmn/subscriptions",
      "organizations_url": "https://api.github.com/users/ch41rmn/orgs",
      "repos_url": "https://api.github.com/users/ch41rmn/repos",
      "events_url": "https://api.github.com/users/ch41rmn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ch41rmn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-04T22:50:18Z",
    "updated_at": "2016-05-04T22:50:18Z",
    "author_association": "NONE",
    "body": "I think I will submit a separate issue. I currently require a way of retrieving a row of a DataFrame that preserves numerical dtypes, which is separate to this issue, but very related.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/217027501",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11617#issuecomment-217027501",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11617",
    "id": 217027501,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNzAyNzUwMQ==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-04T22:52:03Z",
    "updated_at": "2016-05-04T22:52:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "I suppose a:\n\n`df.loc(coerce=False)[0]` might be ok (with a default of `True`) for back compat.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/217028863",
    "html_url": "https://github.com/pandas-dev/pandas/issues/11617#issuecomment-217028863",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/11617",
    "id": 217028863,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIxNzAyODg2Mw==",
    "user": {
      "login": "ch41rmn",
      "id": 1684060,
      "node_id": "MDQ6VXNlcjE2ODQwNjA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1684060?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ch41rmn",
      "html_url": "https://github.com/ch41rmn",
      "followers_url": "https://api.github.com/users/ch41rmn/followers",
      "following_url": "https://api.github.com/users/ch41rmn/following{/other_user}",
      "gists_url": "https://api.github.com/users/ch41rmn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ch41rmn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ch41rmn/subscriptions",
      "organizations_url": "https://api.github.com/users/ch41rmn/orgs",
      "repos_url": "https://api.github.com/users/ch41rmn/repos",
      "events_url": "https://api.github.com/users/ch41rmn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ch41rmn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-04T22:58:39Z",
    "updated_at": "2016-05-04T22:58:39Z",
    "author_association": "NONE",
    "body": "That could work, but would require more thought into how it plugs in to other data frame methods (e.g. df.apply(..., axis=1, coerce=True))\n\nI will have a go at it, but it might take me some time.\n"
  }
]
