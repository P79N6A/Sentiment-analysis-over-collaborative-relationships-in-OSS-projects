[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441402011",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23888#issuecomment-441402011",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23888",
    "id": 441402011,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTQwMjAxMQ==",
    "user": {
      "login": "pep8speaks",
      "id": 24736507,
      "node_id": "MDQ6VXNlcjI0NzM2NTA3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/24736507?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pep8speaks",
      "html_url": "https://github.com/pep8speaks",
      "followers_url": "https://api.github.com/users/pep8speaks/followers",
      "following_url": "https://api.github.com/users/pep8speaks/following{/other_user}",
      "gists_url": "https://api.github.com/users/pep8speaks/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pep8speaks/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pep8speaks/subscriptions",
      "organizations_url": "https://api.github.com/users/pep8speaks/orgs",
      "repos_url": "https://api.github.com/users/pep8speaks/repos",
      "events_url": "https://api.github.com/users/pep8speaks/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pep8speaks/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-24T22:57:36Z",
    "updated_at": "2018-11-24T22:57:36Z",
    "author_association": "NONE",
    "body": "Hello @eoveson! Thanks for submitting the PR.\n\n - There are no PEP8 issues in the file [`asv_bench/benchmarks/categoricals.py`](https://github.com/eoveson/pandas/blob/f6d10b8e8a4cbb93f8c3a499a64735c12898f76d/asv_bench/benchmarks/categoricals.py) !\n\n - There are no PEP8 issues in the file [`pandas/core/arrays/categorical.py`](https://github.com/eoveson/pandas/blob/f6d10b8e8a4cbb93f8c3a499a64735c12898f76d/pandas/core/arrays/categorical.py) !\n\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441403586",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23888#issuecomment-441403586",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23888",
    "id": 441403586,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTQwMzU4Ng==",
    "user": {
      "login": "codecov[bot]",
      "id": 22429695,
      "node_id": "MDM6Qm90MjI0Mjk2OTU=",
      "avatar_url": "https://avatars2.githubusercontent.com/in/254?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codecov%5Bbot%5D",
      "html_url": "https://github.com/apps/codecov",
      "followers_url": "https://api.github.com/users/codecov%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/codecov%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/codecov%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codecov%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codecov%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/codecov%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/codecov%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/codecov%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codecov%5Bbot%5D/received_events",
      "type": "Bot",
      "site_admin": false
    },
    "created_at": "2018-11-24T23:32:49Z",
    "updated_at": "2018-11-29T18:16:16Z",
    "author_association": "NONE",
    "body": "# [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/23888?src=pr&el=h1) Report\n> Merging [#23888](https://codecov.io/gh/pandas-dev/pandas/pull/23888?src=pr&el=desc) into [master](https://codecov.io/gh/pandas-dev/pandas/commit/d865e5213515cef6344f16f4c77386be9ce8f223?src=pr&el=desc) will **increase** coverage by `0.01%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/pandas-dev/pandas/pull/23888/graphs/tree.svg?width=650&token=eZ4WkYLtcO&height=150&src=pr)](https://codecov.io/gh/pandas-dev/pandas/pull/23888?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master   #23888      +/-   ##\n==========================================\n+ Coverage   92.29%    92.3%   +0.01%     \n==========================================\n  Files         161      161              \n  Lines       51498    51556      +58     \n==========================================\n+ Hits        47530    47590      +60     \n+ Misses       3968     3966       -2\n```\n\n| Flag | Coverage Δ | |\n|---|---|---|\n| #multiple | `90.7% <100%> (+0.01%)` | :arrow_up: |\n| #single | `42.43% <0%> (ø)` | :arrow_up: |\n\n| [Impacted Files](https://codecov.io/gh/pandas-dev/pandas/pull/23888?src=pr&el=tree) | Coverage Δ | |\n|---|---|---|\n| [pandas/core/arrays/categorical.py](https://codecov.io/gh/pandas-dev/pandas/pull/23888/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvYXJyYXlzL2NhdGVnb3JpY2FsLnB5) | `95.4% <100%> (+0.04%)` | :arrow_up: |\n| [pandas/core/arrays/timedeltas.py](https://codecov.io/gh/pandas-dev/pandas/pull/23888/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvYXJyYXlzL3RpbWVkZWx0YXMucHk=) | `95.95% <0%> (-0.49%)` | :arrow_down: |\n| [pandas/plotting/\\_misc.py](https://codecov.io/gh/pandas-dev/pandas/pull/23888/diff?src=pr&el=tree#diff-cGFuZGFzL3Bsb3R0aW5nL19taXNjLnB5) | `38.68% <0%> (-0.31%)` | :arrow_down: |\n| [pandas/core/indexes/base.py](https://codecov.io/gh/pandas-dev/pandas/pull/23888/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvaW5kZXhlcy9iYXNlLnB5) | `96.32% <0%> (-0.17%)` | :arrow_down: |\n| [pandas/core/arrays/datetimes.py](https://codecov.io/gh/pandas-dev/pandas/pull/23888/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvYXJyYXlzL2RhdGV0aW1lcy5weQ==) | `98.37% <0%> (-0.14%)` | :arrow_down: |\n| [pandas/tseries/offsets.py](https://codecov.io/gh/pandas-dev/pandas/pull/23888/diff?src=pr&el=tree#diff-cGFuZGFzL3RzZXJpZXMvb2Zmc2V0cy5weQ==) | `96.84% <0%> (-0.14%)` | :arrow_down: |\n| [pandas/core/ops.py](https://codecov.io/gh/pandas-dev/pandas/pull/23888/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvb3BzLnB5) | `94.14% <0%> (-0.14%)` | :arrow_down: |\n| [pandas/core/config.py](https://codecov.io/gh/pandas-dev/pandas/pull/23888/diff?src=pr&el=tree#diff-cGFuZGFzL2NvcmUvY29uZmlnLnB5) | `87.04% <0%> (-0.13%)` | :arrow_down: |\n| [pandas/io/sas/sas\\_xport.py](https://codecov.io/gh/pandas-dev/pandas/pull/23888/diff?src=pr&el=tree#diff-cGFuZGFzL2lvL3Nhcy9zYXNfeHBvcnQucHk=) | `90.14% <0%> (-0.1%)` | :arrow_down: |\n| [pandas/io/formats/printing.py](https://codecov.io/gh/pandas-dev/pandas/pull/23888/diff?src=pr&el=tree#diff-cGFuZGFzL2lvL2Zvcm1hdHMvcHJpbnRpbmcucHk=) | `93.01% <0%> (-0.08%)` | :arrow_down: |\n| ... and [49 more](https://codecov.io/gh/pandas-dev/pandas/pull/23888/diff?src=pr&el=tree-more) | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/23888?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/pandas-dev/pandas/pull/23888?src=pr&el=footer). Last update [d865e52...9e270e9](https://codecov.io/gh/pandas-dev/pandas/pull/23888?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441410097",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23888#issuecomment-441410097",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23888",
    "id": 441410097,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTQxMDA5Nw==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-25T02:18:51Z",
    "updated_at": "2018-11-25T02:18:51Z",
    "author_association": "MEMBER",
    "body": "@eoveson : Thanks for the PR!  Can you run `asv` to check performance benchmarks?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441465174",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23888#issuecomment-441465174",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23888",
    "id": 441465174,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTQ2NTE3NA==",
    "user": {
      "login": "eoveson",
      "id": 22162496,
      "node_id": "MDQ6VXNlcjIyMTYyNDk2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/22162496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eoveson",
      "html_url": "https://github.com/eoveson",
      "followers_url": "https://api.github.com/users/eoveson/followers",
      "following_url": "https://api.github.com/users/eoveson/following{/other_user}",
      "gists_url": "https://api.github.com/users/eoveson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eoveson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eoveson/subscriptions",
      "organizations_url": "https://api.github.com/users/eoveson/orgs",
      "repos_url": "https://api.github.com/users/eoveson/repos",
      "events_url": "https://api.github.com/users/eoveson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eoveson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-25T19:23:01Z",
    "updated_at": "2018-11-25T19:23:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gfyoung -- yes, ran a subset of the asv suite (tried to target categorical), I can run the entire suite also. It reported no significant difference (maybe because there was no existing test for this scenario? -- which is why I added the new perf test)\r\n(asv continuous -f 1.1 upstream/master category-perf -b ^categorical"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441470261",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23888#issuecomment-441470261",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23888",
    "id": 441470261,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTQ3MDI2MQ==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-25T20:27:45Z",
    "updated_at": "2018-11-25T20:27:52Z",
    "author_association": "MEMBER",
    "body": "> (maybe because there was no existing test for this scenario? -- which is why I added the new perf test)\r\n\r\nThe test output should list all performance tests that were run.  If it's not there, create a new branch off `master` with just the performance test added, and compare the two branches."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441920914",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23888#issuecomment-441920914",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23888",
    "id": 441920914,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTkyMDkxNA==",
    "user": {
      "login": "eoveson",
      "id": 22162496,
      "node_id": "MDQ6VXNlcjIyMTYyNDk2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/22162496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eoveson",
      "html_url": "https://github.com/eoveson",
      "followers_url": "https://api.github.com/users/eoveson/followers",
      "following_url": "https://api.github.com/users/eoveson/following{/other_user}",
      "gists_url": "https://api.github.com/users/eoveson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eoveson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eoveson/subscriptions",
      "organizations_url": "https://api.github.com/users/eoveson/orgs",
      "repos_url": "https://api.github.com/users/eoveson/repos",
      "events_url": "https://api.github.com/users/eoveson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eoveson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T05:22:44Z",
    "updated_at": "2018-11-27T05:22:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "> \r\n> The test output should list all performance tests that were run. If it's not there, create a new branch off `master` with just the performance test added, and compare the two branches.\r\n\r\n@gfyoung, Yes, I saw the test I added show in the output when I ran the command I mentioned.  Should I run all of the asv tests (tried running all asv tests, but it failed when it was about 1/3 done with a file access error for a temporary file), or should I target categorical tests?\r\n\r\nBtw, this is the error I saw when trying to run all the asv tests:\r\n\r\n```Bash\r\n[ 32.67%] ▒▒▒ Running (index_object.Indexing.time_get_loc--).\r\nTraceback (most recent call last):\r\n  File \"c:\\users\\erikov\\appdata\\local\\continuum\\anaconda3\\lib\\runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"c:\\users\\erikov\\appdata\\local\\continuum\\anaconda3\\lib\\runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"C:\\Users\\erikov\\AppData\\Local\\Continuum\\anaconda3\\scripts\\asv.exe\\__main__.py\", line 9, in <module>\r\n  File \"c:\\users\\erikov\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages\\asv\\main.py\", line 38, in main\r\n    result = args.func(args)\r\n  File \"c:\\users\\erikov\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages\\asv\\commands\\__init__.py\", line 49, in run_from_args\r\n    return cls.run_from_conf_args(conf, args)\r\n  File \"c:\\users\\erikov\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages\\asv\\commands\\continuous.py\", line 72,in run_from_conf_args\r\n    launch_method=args.launch_method, **kwargs\r\n  File \"c:\\users\\erikov\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages\\asv\\commands\\continuous.py\", line 106, in run\r\n    _returns=run_objs, _machine_file=_machine_file)\r\n  File \"c:\\users\\erikov\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages\\asv\\commands\\run.py\", line 406, in run\r\n    launch_method=launch_method)\r\n  File \"c:\\users\\erikov\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages\\asv\\runner.py\", line 349, in run_benchmarks\r\n    cwd=cache_dir)\r\n  File \"c:\\users\\erikov\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages\\asv\\runner.py\", line 515, in run_benchmark\r\n    cwd=cwd)\r\n  File \"c:\\users\\erikov\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages\\asv\\runner.py\", line 647, in _run_benchmark_single_param\r\n    os.remove(result_file.name)\r\nPermissionError: [WinError 5] Access is denied: 'C:\\\\Users\\\\erikov\\\\AppData\\\\Local\\\\Temp\\\\tmpfq5htpg5'\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441923980",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23888#issuecomment-441923980",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23888",
    "id": 441923980,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTkyMzk4MA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T05:31:39Z",
    "updated_at": "2018-11-27T05:31:46Z",
    "author_association": "MEMBER",
    "body": "> Yes, I saw the test I added show in the output when I ran the command I mentioned. Should I run all of the asv tests (tried running all asv tests, but it failed when it was about 1/3 done with a file access error for a temporary file), or should I target categorical tests?\r\n\r\nRunning the Categorical tests is fine.  I'm concerned though...you didn't see any noticeable improvement in performance, even with your newly added test?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441926941",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23888#issuecomment-441926941",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23888",
    "id": 441926941,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTkyNjk0MQ==",
    "user": {
      "login": "eoveson",
      "id": 22162496,
      "node_id": "MDQ6VXNlcjIyMTYyNDk2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/22162496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eoveson",
      "html_url": "https://github.com/eoveson",
      "followers_url": "https://api.github.com/users/eoveson/followers",
      "following_url": "https://api.github.com/users/eoveson/following{/other_user}",
      "gists_url": "https://api.github.com/users/eoveson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eoveson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eoveson/subscriptions",
      "organizations_url": "https://api.github.com/users/eoveson/orgs",
      "repos_url": "https://api.github.com/users/eoveson/repos",
      "events_url": "https://api.github.com/users/eoveson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eoveson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T05:39:49Z",
    "updated_at": "2018-11-27T05:39:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Well, this change only helps in the case that they have passed in an existing instance of Categorical to Categorical.__init__, and used no optional params.  Not sure how common that would be in the tests?  I didn't see that test case in the file I added the test case to.  But I'm also not exactly sure how this asv test suite works.  How does it get a baseline to compare against (since machine specs are different)?  Am I supposed to create a baseline on my machine without my changes, and then run with my changes?  If so, I didn't do that.  I simply ran the asv command I mentioned, so I'm not sure if I'm doing things correctly.."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441927260",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23888#issuecomment-441927260",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23888",
    "id": 441927260,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTkyNzI2MA==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T05:40:49Z",
    "updated_at": "2018-11-27T05:41:23Z",
    "author_association": "MEMBER",
    "body": "> Well, this change only helps in the case that they have passed in an existing instance of Categorical to Categorical.init, and used no optional params.\r\n\r\nRight, but didn't you say you saw no substantial changes in performance?\r\n\r\n> I simply ran the asv command I mentioned, so I'm not sure if I'm doing things correctly..\r\n\r\nCan you copy / paste the output of your ASV?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441927874",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23888#issuecomment-441927874",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23888",
    "id": 441927874,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTkyNzg3NA==",
    "user": {
      "login": "eoveson",
      "id": 22162496,
      "node_id": "MDQ6VXNlcjIyMTYyNDk2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/22162496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eoveson",
      "html_url": "https://github.com/eoveson",
      "followers_url": "https://api.github.com/users/eoveson/followers",
      "following_url": "https://api.github.com/users/eoveson/following{/other_user}",
      "gists_url": "https://api.github.com/users/eoveson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eoveson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eoveson/subscriptions",
      "organizations_url": "https://api.github.com/users/eoveson/orgs",
      "repos_url": "https://api.github.com/users/eoveson/repos",
      "events_url": "https://api.github.com/users/eoveson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eoveson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T05:42:32Z",
    "updated_at": "2018-11-27T05:42:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "I see now that you specifically mentioned the test I added.  So I should have seen a difference for that test, so I guess I need to run with that new test, but without my real changes to __init__ to create the baseline first?"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441928253",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23888#issuecomment-441928253",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23888",
    "id": 441928253,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTkyODI1Mw==",
    "user": {
      "login": "gfyoung",
      "id": 9273653,
      "node_id": "MDQ6VXNlcjkyNzM2NTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/9273653?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfyoung",
      "html_url": "https://github.com/gfyoung",
      "followers_url": "https://api.github.com/users/gfyoung/followers",
      "following_url": "https://api.github.com/users/gfyoung/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfyoung/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfyoung/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfyoung/subscriptions",
      "organizations_url": "https://api.github.com/users/gfyoung/orgs",
      "repos_url": "https://api.github.com/users/gfyoung/repos",
      "events_url": "https://api.github.com/users/gfyoung/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfyoung/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T05:43:36Z",
    "updated_at": "2018-11-27T05:43:36Z",
    "author_association": "MEMBER",
    "body": "> so I guess I need to run with that new test, but without my real changes to init to create the baseline first?\r\n\r\nExactly.  That's why I said earlier:\r\n\r\n> create a new branch off master with just the performance test added, and compare the two branches."
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/441930353",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23888#issuecomment-441930353",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23888",
    "id": 441930353,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MTkzMDM1Mw==",
    "user": {
      "login": "eoveson",
      "id": 22162496,
      "node_id": "MDQ6VXNlcjIyMTYyNDk2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/22162496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eoveson",
      "html_url": "https://github.com/eoveson",
      "followers_url": "https://api.github.com/users/eoveson/followers",
      "following_url": "https://api.github.com/users/eoveson/following{/other_user}",
      "gists_url": "https://api.github.com/users/eoveson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eoveson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eoveson/subscriptions",
      "organizations_url": "https://api.github.com/users/eoveson/orgs",
      "repos_url": "https://api.github.com/users/eoveson/repos",
      "events_url": "https://api.github.com/users/eoveson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eoveson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-27T05:49:44Z",
    "updated_at": "2018-11-27T06:13:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "> \r\n> Exactly. That's why I said earlier:\r\n> \r\n> > create a new branch off master with just the performance test added, and compare the two branches.\r\n\r\nAh, makes sense, thanks.  I'll compare the two branches and get back to you (I'll first work on the code consolidation requested by jreback since that may impact things).\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/442906152",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23888#issuecomment-442906152",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23888",
    "id": 442906152,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjkwNjE1Mg==",
    "user": {
      "login": "eoveson",
      "id": 22162496,
      "node_id": "MDQ6VXNlcjIyMTYyNDk2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/22162496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eoveson",
      "html_url": "https://github.com/eoveson",
      "followers_url": "https://api.github.com/users/eoveson/followers",
      "following_url": "https://api.github.com/users/eoveson/following{/other_user}",
      "gists_url": "https://api.github.com/users/eoveson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eoveson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eoveson/subscriptions",
      "organizations_url": "https://api.github.com/users/eoveson/orgs",
      "repos_url": "https://api.github.com/users/eoveson/repos",
      "events_url": "https://api.github.com/users/eoveson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eoveson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T16:46:00Z",
    "updated_at": "2018-11-29T16:46:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "@gfyoung , it turns out that asv test I added previously was not exercising the code (I should have been passing in a Series rather than Categorical to the constructor).  I added a new asv test for this (but left the other one since it could still be useful).  I re-ran asv, and did see a significant difference reported in that newly added test and one other test.  I didn't expect that other test to change, so I re-ran the same command and looking at the numbers that test doesn't change much.  (However, the reporting no longer says my newly added test shows significant difference in the second run of the command, even though I do see the same difference from the first run of the command).  So I think things are ok now, but pasting the output here so you can take a look.\r\n\r\nHere is the first execution of the command (and then down below you will see the second one):\r\n\r\n$ asv continuous -f 1.1 upstream/master category-perf -b categorical\r\n▒ Creating environments\r\n▒ Discovering benchmarks\r\n▒▒ Uninstalling from conda-py3.6-Cython-matplotlib-numexpr-numpy-openpyxl-pytables-pytest-scipy-sqlalchemy-xlrd-xlsxwriter-xlwt\r\n▒▒ Building 9e270e9a <category-perf> for conda-py3.6-Cython-matplotlib-numexpr-numpy-openpyxl-pytables-pytest-scipy-sqlalchemy-xlrd-xlsxwriter-xlwt\r\n▒▒ Installing 9e270e9a <category-perf> into conda-py3.6-Cython-matplotlib-numexpr-numpy-openpyxl-pytables-pytest-scipy-sqlalchemy-xlrd-xlsxwriter-xlwt\r\n▒ Running 66 total benchmarks (2 commits * 1 environments * 33 benchmarks)\r\n[  0.00%] ▒ For pandas commit 3e01c384 <master^2> (round 1/2):\r\n[  0.00%] ▒▒ Building for conda-py3.6-Cython-matplotlib-numexpr-numpy-openpyxl-pytables-pytest-scipy-sqlalchemy-xlrd-xlsxwriter-xlwt\r\n[  0.00%] ▒▒ Benchmarking conda-py3.6-Cython-matplotlib-numexpr-numpy-openpyxl-pytables-pytest-scipy-sqlalchemy-xlrd-xlsxwriter-xlwt\r\n[  0.76%] ▒▒▒ Setting up algorithms.py:83                                    ok\r\n[  0.76%] ▒▒▒ Running (algorithms.Hashing.time_series_categorical--)...\r\n[  3.03%] ▒▒▒ Running (categoricals.CategoricalSlicing.time_getitem_list_like--)..\r\n[  4.55%] ▒▒▒ Running (categoricals.CategoricalSlicing.time_getitem_slice--)..\r\n[  6.06%] ▒▒▒ Running (categoricals.Concat.time_union--).................\r\n[ 18.94%] ▒▒▒ Running (categoricals.Rank.time_rank_int--).........\r\n[ 25.00%] ▒ For pandas commit 9e270e9a <category-perf> (round 1/2):\r\n[ 25.00%] ▒▒ Building for conda-py3.6-Cython-matplotlib-numexpr-numpy-openpyxl-pytables-pytest-scipy-sqlalchemy-xlrd-xlsxwriter-xlwt\r\n[ 25.00%] ▒▒ Benchmarking conda-py3.6-Cython-matplotlib-numexpr-numpy-openpyxl-pytables-pytest-scipy-sqlalchemy-xlrd-xlsxwriter-xlwt\r\n[ 25.76%] ▒▒▒ Setting up algorithms.py:83                                    ok\r\n[ 25.76%] ▒▒▒ Running (algorithms.Hashing.time_series_categorical--)..\r\n[ 27.27%] ▒▒▒ Running (categoricals.CategoricalSlicing.time_getitem_list--).\r\n[ 28.03%] ▒▒▒ Running (categoricals.CategoricalSlicing.time_getitem_list_like--)..\r\n[ 29.55%] ▒▒▒ Running (categoricals.CategoricalSlicing.time_getitem_slice--)...\r\n[ 31.82%] ▒▒▒ Running (categoricals.Constructor.time_all_nan--)................\r\n[ 43.94%] ▒▒▒ Running (categoricals.Rank.time_rank_int--).........\r\n[ 50.00%] ▒ For pandas commit 9e270e9a <category-perf> (round 2/2):\r\n[ 50.00%] ▒▒ Benchmarking conda-py3.6-Cython-matplotlib-numexpr-numpy-openpyxl-pytables-pytest-scipy-sqlalchemy-xlrd-xlsxwriter-xlwt\r\n[ 50.76%] ▒▒▒ Setting up algorithms.py:83                                    ok\r\n[ 50.76%] ▒▒▒ algorithms.Hashing.time_series_categorical               15.6▒8ms\r\n[ 51.52%] ▒▒▒ ...s.CategoricalSlicing.time_getitem_bool_array                ok\r\n[ 51.52%] ▒▒▒ ================ ==========\r\n                   index\r\n              ---------------- ----------\r\n               monotonic_incr   2.60▒3ms\r\n               monotonic_decr   3.91▒0ms\r\n               non_monotonic    15.6▒0ms\r\n              ================ ==========\r\n\r\n[ 52.27%] ▒▒▒ ...oricals.CategoricalSlicing.time_getitem_list                ok monotonic_incr    679~0us\r\n\r\n[ 52.27%] ▒▒▒ ================ ============\r\n                   index\r\n              ---------------- ------------\r\n                             monotonic_decr    1.12▒1ms\r\n               non_monotonic    0▒600000ns\r\n              ================ ============\r\n\r\n[ 53.03%] ▒▒▒ ...ls.CategoricalSlicing.time_getitem_list_like                ok monotonic_incr   12.5~5us\r\n monotonic_decr   14.1~0us\r\n non_monotonic    14.1~0us\r\n\r\n[ 53.03%] ▒▒▒ ================ ==========\r\n                   index\r\n              ---------------- ----------\r\n                                                        ================ ==========\r\n\r\n[ 53.79%] ▒▒▒ ...icals.CategoricalSlicing.time_getitem_scalar                ok monotonic_incr   5.05~2us\r\n monotonic_decr   5.73~0us\r\n non_monotonic    5.04~0us\r\n\r\n[ 53.79%] ▒▒▒ ================ ==========\r\n                   index\r\n              ---------------- ----------\r\n                                                        ================ ==========\r\n\r\n[ 54.55%] ▒▒▒ ...ricals.CategoricalSlicing.time_getitem_slice                ok monotonic_incr   3.93~4us\r\n monotonic_decr   4.27~4us\r\n non_monotonic    8.45~0us\r\n\r\n[ 54.55%] ▒▒▒ ================ ==========\r\n                   index\r\n              ---------------- ----------\r\n                                                        ================ ==========\r\n\r\n[ 55.30%] ▒▒▒ categoricals.Concat.time_concat                          7.81▒0ms\r\n[ 56.06%] ▒▒▒ categoricals.Concat.time_union                           15.6▒8ms\r\n[ 56.82%] ▒▒▒ categoricals.Constructor.time_all_nan                    31.2▒0ms\r\n[ 57.58%] ▒▒▒ categoricals.Constructor.time_datetimes                1.30▒0.7ms\r\n[ 58.33%] ▒▒▒ ...goricals.Constructor.time_datetimes_with_nat          1.30▒0ms\r\n[ 59.09%] ▒▒▒ ...ricals.Constructor.time_existing_categorical          3.12▒1ms\r\n[ 59.85%] ▒▒▒ categoricals.Constructor.time_existing_series           42.2~20us\r\n[ 60.61%] ▒▒▒ categoricals.Constructor.time_fastpath                  460~200us\r\n[ 61.36%] ▒▒▒ ...oricals.Constructor.time_from_codes_all_int8         347~200us\r\n[ 62.12%] ▒▒▒ categoricals.Constructor.time_regular                    46.9▒6ms\r\n[ 62.88%] ▒▒▒ categoricals.Constructor.time_with_nan                    156▒0ms\r\n[ 63.64%] ▒▒▒ categoricals.Contains.time_categorical_contains          78.9~0us\r\n[ 64.39%] ▒▒▒ ...als.Contains.time_categorical_index_contains          3.46~0us\r\n[ 65.15%] ▒▒▒ ...me_categorical_index_is_monotonic_decreasing           450▒0ns\r\n[ 65.91%] ▒▒▒ ...me_categorical_index_is_monotonic_increasing         457▒200ns\r\n[ 66.67%] ▒▒▒ ...e_categorical_series_is_monotonic_decreasing          51.4~0us\r\n[ 67.42%] ▒▒▒ ...e_categorical_series_is_monotonic_increasing         62.5~20us\r\n[ 68.18%] ▒▒▒ categoricals.Isin.time_isin_categorical                        ok\r\n[ 68.18%] ▒▒▒ ======== ==========\r\n               dtype\r\n              -------- ----------\r\n               object   15.6▒0ms\r\n               int64    15.6▒6ms\r\n              ======== ==========\r\n\r\n[ 68.94%] ▒▒▒ categoricals.Rank.time_rank_int                          11.7▒4ms\r\n[ 69.70%] ▒▒▒ categoricals.Rank.time_rank_int_cat                      7.81▒0ms\r\n[ 70.45%] ▒▒▒ categoricals.Rank.time_rank_int_cat_ordered           0▒8000000ns\r\n[ 71.21%] ▒▒▒ categoricals.Rank.time_rank_string                       172▒10ms\r\n[ 71.97%] ▒▒▒ categoricals.Rank.time_rank_string_cat                   15.6▒0ms\r\n[ 72.73%] ▒▒▒ categoricals.Rank.time_rank_string_cat_ordered           15.6▒6ms\r\n[ 73.48%] ▒▒▒ categoricals.Repr.time_rendering                          744~0us\r\n[ 74.24%] ▒▒▒ categoricals.SetCategories.time_set_categories           31.2▒8ms\r\n[ 75.00%] ▒▒▒ categoricals.ValueCounts.time_value_counts                     ok\r\n[ 75.00%] ▒▒▒ ======== ==========\r\n               dropna\r\n              -------- ----------\r\n                True    15.6▒0ms\r\n               False    15.6▒0ms\r\n              ======== ==========\r\n\r\n[ 75.00%] ▒ For pandas commit 3e01c384 <master^2> (round 2/2):\r\n[ 75.00%] ▒▒ Building for conda-py3.6-Cython-matplotlib-numexpr-numpy-openpyxl-pytables-pytest-scipy-sqlalchemy-xlrd-xlsxwriter-xlwt\r\n[ 75.00%] ▒▒ Benchmarking conda-py3.6-Cython-matplotlib-numexpr-numpy-openpyxl-pytables-pytest-scipy-sqlalchemy-xlrd-xlsxwriter-xlwt\r\n[ 75.76%] ▒▒▒ Setting up algorithms.py:83                                    ok\r\n[ 75.76%] ▒▒▒ algorithms.Hashing.time_series_categorical               7.81▒3ms\r\n[ 76.52%] ▒▒▒ ...s.CategoricalSlicing.time_getitem_bool_array                ok\r\n[ 76.52%] ▒▒▒ ================ ==========\r\n                   index\r\n              ---------------- ----------\r\n               monotonic_incr   5.21▒2ms\r\n               monotonic_decr   3.91▒1ms\r\n               non_monotonic    7.81▒4ms\r\n              ================ ==========\r\n\r\n[ 77.27%] ▒▒▒ ...oricals.CategoricalSlicing.time_getitem_list                ok monotonic_incr   625~200us\r\n monotonic_decr   601~300us\r\n non_monotonic    539~200us\r\n\r\n[ 77.27%] ▒▒▒ ================ ===========\r\n                   index\r\n              ---------------- -----------\r\n                                                        ================ ===========\r\n\r\n[ 78.03%] ▒▒▒ ...ls.CategoricalSlicing.time_getitem_list_like                ok monotonic_incr   12.5~0us\r\n monotonic_decr   6.42~6us\r\n non_monotonic    11.4~0us\r\n\r\n[ 78.03%] ▒▒▒ ================ ==========\r\n                   index\r\n              ---------------- ----------\r\n                                                        ================ ==========\r\n\r\n[ 78.79%] ▒▒▒ ...icals.CategoricalSlicing.time_getitem_scalar                ok monotonic_decr   6.27~0us\r\n non_monotonic    4.73~0us\r\n\r\n[ 78.79%] ▒▒▒ ================ ==========\r\n                   index\r\n              ---------------- ----------\r\n               monotonic_incr    0▒0ns\r\n                                          ================ ==========\r\n\r\n[ 79.55%] ▒▒▒ ...ricals.CategoricalSlicing.time_getitem_slice                ok monotonic_incr   7.82~0us\r\n non_monotonic    8.52~0us\r\n\r\n[ 79.55%] ▒▒▒ ================ ==========\r\n                   index\r\n              ---------------- ----------\r\n                             monotonic_decr   0▒6000ns\r\n                            ================ ==========\r\n\r\n[ 80.30%] ▒▒▒ categoricals.Concat.time_concat                          7.81▒0ms\r\n[ 81.06%] ▒▒▒ categoricals.Concat.time_union                           7.81▒0ms\r\n[ 81.82%] ▒▒▒ categoricals.Constructor.time_all_nan                    31.2▒0ms\r\n[ 82.58%] ▒▒▒ categoricals.Constructor.time_datetimes                  1.42▒0ms\r\n[ 83.33%] ▒▒▒ ...goricals.Constructor.time_datetimes_with_nat          1.30▒0ms\r\n[ 84.09%] ▒▒▒ ...ricals.Constructor.time_existing_categorical          2.60▒0ms\r\n[ 84.85%] ▒▒▒ categoricals.Constructor.time_existing_series            3.12▒0ms\r\n[ 85.61%] ▒▒▒ categoricals.Constructor.time_fastpath                    460~0us\r\n[ 86.36%] ▒▒▒ ...oricals.Constructor.time_from_codes_all_int8         434~200us\r\n[ 87.12%] ▒▒▒ categoricals.Constructor.time_regular                   46.9▒10ms\r\n[ 87.88%] ▒▒▒ categoricals.Constructor.time_with_nan                   148▒10ms\r\n[ 88.64%] ▒▒▒ categoricals.Contains.time_categorical_contains         0▒40000ns\r\n[ 89.39%] ▒▒▒ ...als.Contains.time_categorical_index_contains          2.84~0us\r\n[ 90.15%] ▒▒▒ ...me_categorical_index_is_monotonic_decreasing           312▒0ns\r\n[ 90.91%] ▒▒▒ ...me_categorical_index_is_monotonic_increasing           312▒0ns\r\n[ 91.67%] ▒▒▒ ...e_categorical_series_is_monotonic_decreasing          47.3~0us\r\n[ 92.42%] ▒▒▒ ...e_categorical_series_is_monotonic_increasing          56.8~0us\r\n[ 93.18%] ▒▒▒ categoricals.Isin.time_isin_categorical                        ok\r\n[ 93.18%] ▒▒▒ ======== ==========\r\n               dtype\r\n              -------- ----------\r\n               object   15.6▒0ms\r\n               int64    15.6▒8ms\r\n              ======== ==========\r\n\r\n[ 93.94%] ▒▒▒ categoricals.Rank.time_rank_int                          7.81▒4ms\r\n[ 94.70%] ▒▒▒ categoricals.Rank.time_rank_int_cat                      7.81▒4ms\r\n[ 95.45%] ▒▒▒ categoricals.Rank.time_rank_int_cat_ordered              7.81▒4ms\r\n[ 96.21%] ▒▒▒ categoricals.Rank.time_rank_string                       156▒10ms\r\n[ 96.97%] ▒▒▒ categoricals.Rank.time_rank_string_cat                   15.6▒0ms\r\n[ 97.73%] ▒▒▒ categoricals.Rank.time_rank_string_cat_ordered           7.81▒0ms\r\n[ 98.48%] ▒▒▒ categoricals.Repr.time_rendering                          710~0us\r\n[ 99.24%] ▒▒▒ categoricals.SetCategories.time_set_categories           31.2▒6ms\r\n[100.00%] ▒▒▒ categoricals.ValueCounts.time_value_counts                     ok\r\n[100.00%] ▒▒▒ ======== ==========\r\n               dropna\r\n              -------- ----------\r\n                True    15.6▒0ms\r\n               False    15.6▒0ms\r\n              ======== ==========\r\n\r\n+       0~40000ns         78.9~0us      n/a  -        3.12~0ms        42.2~20us     0.01         before          after         ratio\r\n     [3e01c384]       [9e270e9a]\r\n     <master^2>       <category-perf>\r\ncategoricals.Contains.time_categorical_contains\r\ncategoricals.Constructor.time_existing_series\r\n\r\nSOME BENCHMARKS HAVE CHANGED SIGNIFICANTLY.\r\n\r\n$ asv continuous -f 1.1 upstream/master category-perf -b categorical\r\n▒ Creating environments\r\n▒ Discovering benchmarks\r\n▒▒ Uninstalling from conda-py3.6-Cython-matplotlib-numexpr-numpy-openpyxl-pytables-pytest-scipy-sqlalchemy-xlrd-xlsxwriter-xlwt\r\n▒▒ Installing 9e270e9a <category-perf> into conda-py3.6-Cython-matplotlib-numexpr-numpy-openpyxl-pytables-pytest-scipy-sqlalchemy-xlrd-xlsxwriter-xlwt\r\n▒ Running 66 total benchmarks (2 commits * 1 environments * 33 benchmarks)\r\n[  0.00%] ▒ For pandas commit 3e01c384 <master^2> (round 1/2):\r\n[  0.00%] ▒▒ Building for conda-py3.6-Cython-matplotlib-numexpr-numpy-openpyxl-pytables-pytest-scipy-sqlalchemy-xlrd-xlsxwriter-xlwt\r\n[  0.00%] ▒▒ Benchmarking conda-py3.6-Cython-matplotlib-numexpr-numpy-openpyxl-pytables-pytest-scipy-sqlalchemy-xlrd-xlsxwriter-xlwt\r\n[  0.76%] ▒▒▒ Setting up algorithms.py:83                                    ok\r\n[  0.76%] ▒▒▒ Running (algorithms.Hashing.time_series_categorical--)...\r\n[  3.03%] ▒▒▒ Running (categoricals.CategoricalSlicing.time_getitem_list_like--)..\r\n[  4.55%] ▒▒▒ Running (categoricals.CategoricalSlicing.time_getitem_slice--).....\r\n[  8.33%] ▒▒▒ Running (categoricals.Constructor.time_datetimes_with_nat--)..............\r\n[ 18.94%] ▒▒▒ Running (categoricals.Rank.time_rank_int--).........\r\n[ 25.00%] ▒ For pandas commit 9e270e9a <category-perf> (round 1/2):\r\n[ 25.00%] ▒▒ Building for conda-py3.6-Cython-matplotlib-numexpr-numpy-openpyxl-pytables-pytest-scipy-sqlalchemy-xlrd-xlsxwriter-xlwt\r\n[ 25.00%] ▒▒ Benchmarking conda-py3.6-Cython-matplotlib-numexpr-numpy-openpyxl-pytables-pytest-scipy-sqlalchemy-xlrd-xlsxwriter-xlwt\r\n[ 25.76%] ▒▒▒ Setting up algorithms.py:83                                    ok\r\n[ 25.76%] ▒▒▒ Running (algorithms.Hashing.time_series_categorical--)...\r\n[ 28.03%] ▒▒▒ Running (categoricals.CategoricalSlicing.time_getitem_list_like--)..\r\n[ 29.55%] ▒▒▒ Running (categoricals.CategoricalSlicing.time_getitem_slice--).....\r\n[ 33.33%] ▒▒▒ Running (categoricals.Constructor.time_datetimes_with_nat--)..............\r\n[ 43.94%] ▒▒▒ Running (categoricals.Rank.time_rank_int--).........\r\n[ 50.00%] ▒ For pandas commit 9e270e9a <category-perf> (round 2/2):\r\n[ 50.00%] ▒▒ Benchmarking conda-py3.6-Cython-matplotlib-numexpr-numpy-openpyxl-pytables-pytest-scipy-sqlalchemy-xlrd-xlsxwriter-xlwt\r\n[ 50.76%] ▒▒▒ Setting up algorithms.py:83                                    ok\r\n[ 50.76%] ▒▒▒ algorithms.Hashing.time_series_categorical               7.81▒0ms\r\n[ 51.52%] ▒▒▒ ...s.CategoricalSlicing.time_getitem_bool_array                ok\r\n[ 51.52%] ▒▒▒ ================ ==========\r\n                   index\r\n              ---------------- ----------\r\n               monotonic_incr   3.91▒0ms\r\n               monotonic_decr   3.91▒0ms\r\n               non_monotonic    7.81▒0ms\r\n              ================ ==========\r\n\r\n[ 52.27%] ▒▒▒ ...oricals.CategoricalSlicing.time_getitem_list                ok monotonic_incr   601~300us\r\n monotonic_decr    558~0us\r\n non_monotonic     521~0us\r\n\r\n[ 52.27%] ▒▒▒ ================ ===========\r\n                   index\r\n              ---------------- -----------\r\n                                                        ================ ===========\r\n\r\n[ 53.03%] ▒▒▒ ...ls.CategoricalSlicing.time_getitem_list_like                ok monotonic_incr   6.41~6us\r\n monotonic_decr   11.7~0us\r\n non_monotonic    12.8~6us\r\n\r\n[ 53.03%] ▒▒▒ ================ ==========\r\n                   index\r\n              ---------------- ----------\r\n                                                        ================ ==========\r\n\r\n[ 53.79%] ▒▒▒ ...icals.CategoricalSlicing.time_getitem_scalar                ok monotonic_incr   4.51~0us\r\n monotonic_decr   4.31~2us\r\n non_monotonic    4.55~2us\r\n\r\n[ 53.79%] ▒▒▒ ================ ==========\r\n                   index\r\n              ---------------- ----------\r\n                                                        ================ ==========\r\n\r\n[ 54.55%] ▒▒▒ ...ricals.CategoricalSlicing.time_getitem_slice                ok monotonic_incr   7.16~3us\r\n monotonic_decr   7.15~0us\r\n non_monotonic    7.69~0us\r\n\r\n[ 54.55%] ▒▒▒ ================ ==========\r\n                   index\r\n              ---------------- ----------\r\n                                                        ================ ==========\r\n\r\n[ 55.30%] ▒▒▒ categoricals.Concat.time_concat                          7.81▒0ms\r\n[ 56.06%] ▒▒▒ categoricals.Concat.time_union                           7.81▒0ms\r\n[ 56.82%] ▒▒▒ categoricals.Constructor.time_all_nan                    31.2▒0ms\r\n[ 57.58%] ▒▒▒ categoricals.Constructor.time_datetimes                1.20▒0.5ms\r\n[ 58.33%] ▒▒▒ ...goricals.Constructor.time_datetimes_with_nat          1.30▒0ms\r\n[ 59.09%] ▒▒▒ ...ricals.Constructor.time_existing_categorical          3.12▒0ms\r\n[ 59.85%] ▒▒▒ categoricals.Constructor.time_existing_series            42.2~0us\r\n[ 60.61%] ▒▒▒ categoricals.Constructor.time_fastpath                    355~0us\r\n[ 61.36%] ▒▒▒ ...oricals.Constructor.time_from_codes_all_int8         446~200us\r\n[ 62.12%] ▒▒▒ categoricals.Constructor.time_regular                    46.9▒6ms\r\n[ 62.88%] ▒▒▒ categoricals.Constructor.time_with_nan                    141▒0ms\r\n[ 63.64%] ▒▒▒ categoricals.Contains.time_categorical_contains          63.3~0us\r\n[ 64.39%] ▒▒▒ ...als.Contains.time_categorical_index_contains          2.72~0us\r\n[ 65.15%] ▒▒▒ ...me_categorical_index_is_monotonic_decreasing         383▒100ns\r\n[ 65.91%] ▒▒▒ ...me_categorical_index_is_monotonic_increasing           323▒0ns\r\n[ 66.67%] ▒▒▒ ...e_categorical_series_is_monotonic_decreasing         51.1~20us\r\n[ 67.42%] ▒▒▒ ...e_categorical_series_is_monotonic_increasing          46.6~0us\r\n[ 68.18%] ▒▒▒ categoricals.Isin.time_isin_categorical                        ok\r\n[ 68.18%] ▒▒▒ ======== ==========\r\n               dtype\r\n              -------- ----------\r\n               object   15.6▒0ms\r\n               int64    15.6▒0ms\r\n              ======== ==========\r\n\r\n[ 68.94%] ▒▒▒ categoricals.Rank.time_rank_int                          7.81▒3ms\r\n[ 69.70%] ▒▒▒ categoricals.Rank.time_rank_int_cat                      7.81▒3ms\r\n[ 70.45%] ▒▒▒ categoricals.Rank.time_rank_int_cat_ordered              7.81▒0ms\r\n[ 71.21%] ▒▒▒ categoricals.Rank.time_rank_string                        141▒8ms\r\n[ 71.97%] ▒▒▒ categoricals.Rank.time_rank_string_cat                   15.6▒0ms\r\n[ 72.73%] ▒▒▒ categoricals.Rank.time_rank_string_cat_ordered           7.81▒0ms\r\n[ 73.48%] ▒▒▒ categoricals.Repr.time_rendering                          710~0us\r\n[ 74.24%] ▒▒▒ categoricals.SetCategories.time_set_categories           15.6▒6ms\r\n[ 75.00%] ▒▒▒ categoricals.ValueCounts.time_value_counts                     ok\r\n[ 75.00%] ▒▒▒ ======== ==========\r\n               dropna\r\n              -------- ----------\r\n                True    15.6▒0ms\r\n               False    15.6▒0ms\r\n              ======== ==========\r\n\r\n[ 75.00%] ▒ For pandas commit 3e01c384 <master^2> (round 2/2):\r\n[ 75.00%] ▒▒ Building for conda-py3.6-Cython-matplotlib-numexpr-numpy-openpyxl-pytables-pytest-scipy-sqlalchemy-xlrd-xlsxwriter-xlwt\r\n[ 75.00%] ▒▒ Benchmarking conda-py3.6-Cython-matplotlib-numexpr-numpy-openpyxl-pytables-pytest-scipy-sqlalchemy-xlrd-xlsxwriter-xlwt\r\n[ 75.76%] ▒▒▒ Setting up algorithms.py:83                                    ok\r\n[ 75.76%] ▒▒▒ algorithms.Hashing.time_series_categorical               7.81▒0ms\r\n[ 76.52%] ▒▒▒ ...s.CategoricalSlicing.time_getitem_bool_array                ok\r\n[ 76.52%] ▒▒▒ ================ ==========\r\n                   index\r\n              ---------------- ----------\r\n               monotonic_incr   5.21▒2ms\r\n               monotonic_decr   3.91▒0ms\r\n               non_monotonic    7.81▒0ms\r\n              ================ ==========\r\n\r\n[ 77.27%] ▒▒▒ ...oricals.CategoricalSlicing.time_getitem_list                ok monotonic_incr   601~200us\r\n monotonic_decr    539~0us\r\n non_monotonic    539~200us\r\n\r\n[ 77.27%] ▒▒▒ ================ ===========\r\n                   index\r\n              ---------------- -----------\r\n                                                        ================ ===========\r\n\r\n[ 78.03%] ▒▒▒ ...ls.CategoricalSlicing.time_getitem_list_like                ok monotonic_incr   11.4~0us\r\n monotonic_decr   12.5~5us\r\n non_monotonic    12.7~0us\r\n\r\n[ 78.03%] ▒▒▒ ================ ==========\r\n                   index\r\n              ---------------- ----------\r\n                                                        ================ ==========\r\n\r\n[ 78.79%] ▒▒▒ ...icals.CategoricalSlicing.time_getitem_scalar                ok monotonic_incr   4.37~0us\r\n monotonic_decr   4.70~2us\r\n non_monotonic    4.70~0us\r\n\r\n[ 78.79%] ▒▒▒ ================ ==========\r\n                   index\r\n              ---------------- ----------\r\n                                                        ================ ==========\r\n\r\n[ 79.55%] ▒▒▒ ...ricals.CategoricalSlicing.time_getitem_slice                ok monotonic_incr   7.23~0us\r\n monotonic_decr   7.10~0us\r\n non_monotonic    7.84~0us\r\n\r\n[ 79.55%] ▒▒▒ ================ ==========\r\n                   index\r\n              ---------------- ----------\r\n                                                        ================ ==========\r\n\r\n[ 80.30%] ▒▒▒ categoricals.Concat.time_concat                          7.81▒0ms\r\n[ 81.06%] ▒▒▒ categoricals.Concat.time_union                           7.81▒0ms\r\n[ 81.82%] ▒▒▒ categoricals.Constructor.time_all_nan                    31.2▒6ms\r\n[ 82.58%] ▒▒▒ categoricals.Constructor.time_datetimes                1.30▒0.5ms\r\n[ 83.33%] ▒▒▒ ...goricals.Constructor.time_datetimes_with_nat          1.30▒0ms\r\n[ 84.09%] ▒▒▒ ...ricals.Constructor.time_existing_categorical          3.12▒0ms\r\n[ 84.85%] ▒▒▒ categoricals.Constructor.time_existing_series            3.12▒2ms\r\n[ 85.61%] ▒▒▒ categoricals.Constructor.time_fastpath                  411~200us\r\n[ 86.36%] ▒▒▒ ...oricals.Constructor.time_from_codes_all_int8           347~0us\r\n[ 87.12%] ▒▒▒ categoricals.Constructor.time_regular                    46.9▒8ms\r\n[ 87.88%] ▒▒▒ categoricals.Constructor.time_with_nan                    141▒0ms\r\n[ 88.64%] ▒▒▒ categoricals.Contains.time_categorical_contains          71.7~0us\r\n[ 89.39%] ▒▒▒ ...als.Contains.time_categorical_index_contains          2.78~1us\r\n[ 90.15%] ▒▒▒ ...me_categorical_index_is_monotonic_decreasing         316▒100ns\r\n[ 90.91%] ▒▒▒ ...me_categorical_index_is_monotonic_increasing         343▒100ns\r\n[ 91.67%] ▒▒▒ ...e_categorical_series_is_monotonic_decreasing          52.1~0us\r\n[ 92.42%] ▒▒▒ ...e_categorical_series_is_monotonic_increasing         46.8~20us\r\n[ 93.18%] ▒▒▒ categoricals.Isin.time_isin_categorical                        ok\r\n[ 93.18%] ▒▒▒ ======== ==========\r\n               dtype\r\n              -------- ----------\r\n               object   15.6▒0ms\r\n               int64    15.6▒6ms\r\n              ======== ==========\r\n\r\n[ 93.94%] ▒▒▒ categoricals.Rank.time_rank_int                          7.81▒3ms\r\n[ 94.70%] ▒▒▒ categoricals.Rank.time_rank_int_cat                      7.81▒4ms\r\n[ 95.45%] ▒▒▒ categoricals.Rank.time_rank_int_cat_ordered              7.81▒0ms\r\n[ 96.21%] ▒▒▒ categoricals.Rank.time_rank_string                        141▒8ms\r\n[ 96.97%] ▒▒▒ categoricals.Rank.time_rank_string_cat                   15.6▒0ms\r\n[ 97.73%] ▒▒▒ categoricals.Rank.time_rank_string_cat_ordered           7.81▒3ms\r\n[ 98.48%] ▒▒▒ categoricals.Repr.time_rendering                        679~300us\r\n[ 99.24%] ▒▒▒ categoricals.SetCategories.time_set_categories           31.2▒0ms\r\n[100.00%] ▒▒▒ categoricals.ValueCounts.time_value_counts                     ok\r\n[100.00%] ▒▒▒ ======== ==========\r\n               dropna\r\n              -------- ----------\r\n                True    15.6▒0ms\r\n               False    15.6▒0ms\r\n              ======== ==========\r\n\r\n\r\nBENCHMARKS NOT SIGNIFICANTLY CHANGED.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/442912016",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23888#issuecomment-442912016",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23888",
    "id": 442912016,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjkxMjAxNg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T17:01:06Z",
    "updated_at": "2018-11-29T17:01:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "@eoveson can you show a before / after using timeit in ipython"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/442915474",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23888#issuecomment-442915474",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23888",
    "id": 442915474,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MjkxNTQ3NA==",
    "user": {
      "login": "eoveson",
      "id": 22162496,
      "node_id": "MDQ6VXNlcjIyMTYyNDk2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/22162496?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eoveson",
      "html_url": "https://github.com/eoveson",
      "followers_url": "https://api.github.com/users/eoveson/followers",
      "following_url": "https://api.github.com/users/eoveson/following{/other_user}",
      "gists_url": "https://api.github.com/users/eoveson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eoveson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eoveson/subscriptions",
      "organizations_url": "https://api.github.com/users/eoveson/orgs",
      "repos_url": "https://api.github.com/users/eoveson/repos",
      "events_url": "https://api.github.com/users/eoveson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eoveson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-29T17:10:57Z",
    "updated_at": "2018-11-29T17:10:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @eoveson can you show a before / after using timeit in ipython\r\n\r\nFor sure.  Before my change:\r\n```Python\r\nIn [2]: s = pd.Series(list('abcd') * 1000000).astype('category')\r\n\r\nIn [3]: %timeit s == 'a'\r\n25.7 ms ± 409 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)\r\n\r\nIn [4]: %timeit s.cat.codes == s.cat.categories.get_loc('a')\r\n3.29 ms ± 70.6 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\r\n```\r\n\r\nAfter change:\r\n```Python\r\nIn [6]: s = pd.Series(list('abcd') * 1000000).astype('category')\r\n\r\nIn [7]: %timeit s == 'a'\r\n5.24 ms ± 97.7 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\r\n\r\nIn [8]: %timeit s.cat.codes == s.cat.categories.get_loc('a')\r\n3.28 ms ± 70 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/443347192",
    "html_url": "https://github.com/pandas-dev/pandas/pull/23888#issuecomment-443347192",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/23888",
    "id": 443347192,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MzM0NzE5Mg==",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-30T21:37:23Z",
    "updated_at": "2018-11-30T21:37:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "thanks @eoveson "
  }
]
