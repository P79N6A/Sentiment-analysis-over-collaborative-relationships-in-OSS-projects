[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11169120",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-11169120",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 11169120,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTY5MTIw",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-09T09:00:39Z",
    "updated_at": "2012-12-09T09:02:27Z",
    "author_association": "NONE",
    "body": "also\n\n``` python\ndef dselect(self,col,f):\n    f= eval(\"lambda x: \" + f)\n    return self.ix[[f(x) for x in self[col]]]\n```\n\nso this is possible:\n\n``` python\nIn [13]: df=mkdf(20,2)\n    ...: s=pd.Series(np.random.randint(1,100,len(df.index)),index=df.index,name=\"nums\")\n    ...: df=df.join(s)\n    ...: print(df)\n    ...: df.dselect(\"nums\",\"x>50 or x<25\").grep(\"C_l0_g0\",\"[2|4|8]\")\n         C_l0_g0 C_l0_g1  nums  \\\nR0                               \nR_l0_g0     R0C0    R0C1    55   \nR_l0_g1     R1C0    R1C1    37   \nR_l0_g10    R2C0    R2C1    61   \nR_l0_g11    R3C0    R3C1    62   \nR_l0_g12    R4C0    R4C1    75   \nR_l0_g13    R5C0    R5C1    93   \nR_l0_g14    R6C0    R6C1    31   \nR_l0_g15    R7C0    R7C1    73   \nR_l0_g16    R8C0    R8C1     6   \nR_l0_g17    R9C0    R9C1    44   \nR_l0_g18   R10C0   R10C1    97   \nR_l0_g19   R11C0   R11C1    64   \nR_l0_g2    R12C0   R12C1    39   \nR_l0_g20   R13C0   R13C1    11   \nR_l0_g3    R14C0   R14C1     5   \nR_l0_g4    R15C0   R15C1    28   \nR_l0_g5    R16C0   R16C1    25   \nR_l0_g6    R17C0   R17C1    63   \nR_l0_g7    R18C0   R18C1    21   \nR_l0_g8    R19C0   R19C1    59   \nOut[13]: \n         C_l0_g0 C_l0_g1  nums  \\\nR0                               \nR_l0_g10    R2C0    R2C1    61   \nR_l0_g12    R4C0    R4C1    75   \nR_l0_g16    R8C0    R8C1     6   \nR_l0_g3    R14C0   R14C1     5   \nR_l0_g7    R18C0   R18C1    21  \n```\n\nnot enough `eval` in pandas IMHO.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11178325",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-11178325",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 11178325,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMTc4MzI1",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-10T00:12:59Z",
    "updated_at": "2012-12-10T00:12:59Z",
    "author_association": "NONE",
    "body": "```\ndef grep(self,col_or_series,pat):\n    if isinstance(col_or_series,pd.Series):\n        col_or_series = col_or_series.name\n    series=self[col_or_series]\n    return self.ix[[bool(re.search(pat,unicode(x))) for x in series]]\n\ndef dselect(self,col_or_series,f=None):\n    if isinstance(col_or_series,pd.Series):\n        col_or_series = col_or_series.name\n    series=self[col_or_series]\n    if isinstance(f,basestring):\n        f= eval(\"lambda x: \" + f)\n    return self.ix[[f(x) for x in series]]\npd.DataFrame.grep=grep\npd.DataFrame.dselect=dselect\n```\n\ndselect now accepts lambdas as well as eval snippets,\nand you can pass in a dataframe column with tab completion,\nnot efficient but handy:\n\n```\ndf.grep(df.colA,u'st\\.[\\s$]').dselect(df.colB,\"x<=5\").dselect(df.colC,lambda x: x[0] == myfilterval)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11232786",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-11232786",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 11232786,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjMyNzg2",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-11T06:32:29Z",
    "updated_at": "2012-12-11T06:32:29Z",
    "author_association": "NONE",
    "body": "@wesm, if this has your blessing I'll round it out into a PR.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11233636",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-11233636",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 11233636,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjMzNjM2",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-11T07:22:20Z",
    "updated_at": "2012-12-11T07:22:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "for selecting columns, does grep overlap with select/ filter?\nwhat r use cases for:\n- filter\n- select\n- grep\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11234420",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-11234420",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 11234420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjM0NDIw",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-11T08:00:57Z",
    "updated_at": "2012-12-11T21:57:28Z",
    "author_association": "NONE",
    "body": "AFICT select/filter operate exclusively on index labels rather then data. \n`dselect` and `grep` (maybe `dgrep` would be a better name) operate on data rather then indicies.\n\nI have these monkey-patched onto pd.Dataframe at load-time and find them very useful.\n\nAn example use case:\na dataset from which you wish to get only rows that match a certain regexp in a column called \"names\".\nRight now the best I'm aware of would be something like:\n\n``` python\ndf.set_index(\"names\",False,True).select(lambda x: bool(re.search(\"jerry.+\",x[-1]))).reset_index(-1,drop=True)\n```\n\n**edit:** cleaned up the example. the `bool` around the re.search doesn't seem necessary but currently is.\n\nIMO, This is very intuitive:\n\n``` python\ndf.grep(\"names\",\"jerry.+\")\n```\n\nand with some fleshing out (multindex columns) could be a useful addition to core pandas.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11259850",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-11259850",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 11259850,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjU5ODUw",
    "user": {
      "login": "changhiskhan",
      "id": 759245,
      "node_id": "MDQ6VXNlcjc1OTI0NQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/759245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/changhiskhan",
      "html_url": "https://github.com/changhiskhan",
      "followers_url": "https://api.github.com/users/changhiskhan/followers",
      "following_url": "https://api.github.com/users/changhiskhan/following{/other_user}",
      "gists_url": "https://api.github.com/users/changhiskhan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/changhiskhan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/changhiskhan/subscriptions",
      "organizations_url": "https://api.github.com/users/changhiskhan/orgs",
      "repos_url": "https://api.github.com/users/changhiskhan/repos",
      "events_url": "https://api.github.com/users/changhiskhan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/changhiskhan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-11T19:57:45Z",
    "updated_at": "2012-12-11T19:57:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'd prefer it if we didn't call it \"grep\". A more intuitive name like \"search\" or something would be better IMO. While you and I have no trouble understanding what \"grepping\" means, it's not the case for a lot of users.\nAnd rather than having `dselect`, `dgrep`, or `dsearch`, whether to search the index or data or both should just be a keyword.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11260223",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-11260223",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 11260223,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjYwMjIz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-11T20:05:27Z",
    "updated_at": "2012-12-11T20:05:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "In addition, I think it makes sense to deprecate `select` (or make it a convenience method that uses `filter`; and promote usage of `filter` instead (which can do anything `select` can anyhow). my 2c\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11279567",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-11279567",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 11279567,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjc5NTY3",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-12T07:38:20Z",
    "updated_at": "2012-12-12T12:25:49Z",
    "author_association": "NONE",
    "body": "no strong opinion on naming here. whatever works.\n\nrolling this into existing functions is a bit of a problem due to the existing\nsignatures.\n`select(crit,axis)`\n`df.filter(items=None,like,regex=None)`\n- `filter` would need an extra axis arg, in which case it makes sense to filter on row \n  labels as well as data. So axis would either have an additional \"data\" axis, which \n  is incompatible with the rest of the API, or an additional argument which would really \n  defeat the purpose of making the API more concise.\n- Also , if an `items` argument were to be added to `select` it would have to be \n  appended at the end so as not to break existing code:\n  `select(crit,axis,items)`\n  `df.filter(items=None,like,regex=None,axis)`\n  and so the \"items\" arg will apear in different locations for similar functions, That's really\n  really bad design, I'd prefer giving up the whole thing then commiting a change like that.\n- I could give up the implicit lambda in `dselect` and just enhance `select` to interpret\n  a string `crit` arg as a regexp. But I think the implicit lambda is lovely. \n\npandas already seperates data from indicies on principle, would it be terrible \nif the API reflected this as well? \nThere's a performance hit associated with data vs index operations,\nbecause of the optimizations for indicies. \nMIght be useful to differentiate the performant from the convenient.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11290770",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-11290770",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 11290770,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExMjkwNzcw",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-12T14:33:05Z",
    "updated_at": "2012-12-12T14:33:05Z",
    "author_association": "NONE",
    "body": "related https://github.com/pydata/pandas/issues/1844#issuecomment-8387084\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/11419431",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-11419431",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 11419431,
    "node_id": "MDEyOklzc3VlQ29tbWVudDExNDE5NDMx",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-12-16T16:30:16Z",
    "updated_at": "2012-12-16T16:30:16Z",
    "author_association": "NONE",
    "body": "related #2064 , i.e. \"definitely more cowbell\"\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16021103",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-16021103",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 16021103,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDIxMTAz",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-07T18:58:34Z",
    "updated_at": "2013-04-07T18:58:34Z",
    "author_association": "NONE",
    "body": "I find this functionaly extremely useful when working with \"civic hacking\" data, small data\nsets where you want to filter against a name in a columns, and you really don't need to\nconvert them to an index.\n\nShouldn't pandas have (Explicitly slow and unvectorized  in the general case) some functionality \nfor slicing and filtering according to data values? This keeps coming up as a need in data I work\nwith, and while monkey patching solves it for me, I'm guessing there are users who would benefit\nfrom something like in core. the funky \"string as implicit lambda body\" can go away, It was just\nan idea.\n\nAny commiters +1 for something like this?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16021425",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-16021425",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 16021425,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDIxNDI1",
    "user": {
      "login": "hayd",
      "id": 1931852,
      "node_id": "MDQ6VXNlcjE5MzE4NTI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1931852?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hayd",
      "html_url": "https://github.com/hayd",
      "followers_url": "https://api.github.com/users/hayd/followers",
      "following_url": "https://api.github.com/users/hayd/following{/other_user}",
      "gists_url": "https://api.github.com/users/hayd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hayd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hayd/subscriptions",
      "organizations_url": "https://api.github.com/users/hayd/orgs",
      "repos_url": "https://api.github.com/users/hayd/repos",
      "events_url": "https://api.github.com/users/hayd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hayd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-07T19:13:47Z",
    "updated_at": "2013-04-07T19:14:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "I definitely think something like this would be useful, however maybe it's useful to restrict to multiple columns at once (...though now I think about it you could just chain it).\n\nI hadn't seen this thread but had been thinking something [like this](https://github.com/hayd/pandas/commit/b368802d22829794503c41d0ac7400da48196647) would be useful after DSM mentioned something about it on StackOverflow. (Note the terrible name choice.)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16021519",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-16021519",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 16021519,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDIxNTE5",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-07T19:18:23Z",
    "updated_at": "2013-04-07T19:18:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "+1 for `grep` (`search` is ok too)\n\nAlso would consolidate `filter` and `select` (which filter just calls anyhow, and deprecate `select`) into just `filter`.\n\nthen `filter` for labels, and `grep` for data\n\nWe had this discussion above about trying to combine these, but I am +1 for keeping apart,\ntoo much confusion, should be 1 way for labels, 1 for data, avoids ambiguity on what `magic` is happening\n\n@y-p `grep` should have `axis` arg as well \n(which I have also added into `filter` for my series refactor in any event)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16021672",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-16021672",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 16021672,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDIxNjcy",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-07T19:24:50Z",
    "updated_at": "2013-04-07T19:24:50Z",
    "author_association": "NONE",
    "body": "very true about `axis`. I'm completely open to name changes and more functionalty,\njust as long as the base form is concise.\n\nConsider  the funky lambda syntax gone, it's just a distraction and doesn't fit\nin with the rest of the API.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16021801",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-16021801",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 16021801,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDIxODAx",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-07T19:29:38Z",
    "updated_at": "2013-04-07T19:30:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think you could accept a string (for re), a lambda/func, or even a more general evalable expression (in fact I am thinking of doing this in a more general way, mainly to be able to use numexpr)\n\ne.g.\n\n`df['(df>0) & (df<5)']` is MUCH faster if I can defer the evaluation into numexpr, but of course this involves doing a compile and walking the AST, but its actually not that hard (this is what the numexpr evaluate does, but we have to do translation of the frames for alignment and such before passing to numexpr)\n\nand this is de-facto what you are looking for, yes?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16021811",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-16021811",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 16021811,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDIxODEx",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-07T19:29:47Z",
    "updated_at": "2013-04-07T19:29:47Z",
    "author_association": "NONE",
    "body": "@jreback , filter and select, as in the existing dataframe methods? or the\nmethods here dfilter,dselect,dgrep, (the names are undecided)?\n\nmy choice would be to keep the data filtering methods seperate from the index\nmethods, to make the perf distinction clear. Just to clarify.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16021855",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-16021855",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 16021855,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDIxODU1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-07T19:31:24Z",
    "updated_at": "2013-04-07T19:31:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "@y-p no I agree, I was +1 for combing filter/select (and keep them as label only),\nthen maybe have just a single method (grep?) for data filtering\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16021867",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-16021867",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 16021867,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDIxODY3",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-07T19:31:47Z",
    "updated_at": "2013-04-07T19:31:53Z",
    "author_association": "NONE",
    "body": "numexpr boost would be good, but the predicate is not always a strictly numerical/bool expression,\nit's actually string data/regex matching that I find most inconvenient to work with.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16021908",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-16021908",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 16021908,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDIxOTA4",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-07T19:33:45Z",
    "updated_at": "2013-04-07T19:33:45Z",
    "author_association": "NONE",
    "body": "@jreback, The work you've done on boolean indexing with numexpr is great,\nI'm all for making things consistent across the API, where are you going with that?\nalso, what's going on with \"OR\" in the HDFStore `Term` deal? should all that stuff and this\nget unified?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16021924",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-16021924",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 16021924,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDIxOTI0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-07T19:34:20Z",
    "updated_at": "2013-04-07T19:34:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "@y-p no I agree, that's why what I am proposing is a sub-case of what you are doing (e.g. you handle the reg express matching / lambda eval, then you could always pass to the evaluator if necessary)\n\nas an aside this is what `where` does now (and what is backing getitem), maybe just change `where` a bit?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16021963",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-16021963",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 16021963,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDIxOTYz",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-07T19:36:05Z",
    "updated_at": "2013-04-07T19:36:29Z",
    "author_association": "NONE",
    "body": "clarify, what does `where` do?\nthe docstring says \"`cond`: bool df or array\", doesn't do string matching/lambda afaict.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16021995",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-16021995",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 16021995,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDIxOTk1",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-07T19:37:27Z",
    "updated_at": "2013-04-07T19:37:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@y-p to your above comment, YES!\n\nthat was the point of the core/expressions.py, to unify all of this syntatical stuff (I am not sure if that is a word?). The idea being that you could just give `expressions.evaluate` a something and an object and have it parse/select whatever (and possibily use numepre) and return you the results so we have unified syntax\n\n`HDFStore` Term syntax involves basically the same thing, have to go full fledged and parse the expresion\n\n`(index>0) | (values['A']>0` would be something nicer to support \n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16022044",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-16022044",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 16022044,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDIyMDQ0",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-07T19:39:40Z",
    "updated_at": "2013-04-07T19:39:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "@y-p \n\n`df.where(cond, other)` give you back the values of df that match the `cond` otherwise give you back `other` or `np.nan` if you don't specify, used in getitem/setitem\n\nsounds like `grep` is basically a parser front end to this (e.g. you will create the mask)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16022100",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-16022100",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 16022100,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDIyMTAw",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-07T19:42:20Z",
    "updated_at": "2013-04-07T19:42:20Z",
    "author_association": "NONE",
    "body": "ahh, so true.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16022205",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-16022205",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 16022205,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDIyMjA1",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-07T19:47:10Z",
    "updated_at": "2013-04-07T19:59:00Z",
    "author_association": "NONE",
    "body": "About numexpr, I have no experience with - let me read a little an get back to that,\nmy conception is that numexpr is for doing a **numpy**-oriented boolean \nexpression faster only. if you have a lambda predicate, it doesn't fit well into that\nexcept through a generated numpy array mask.\n\nis that totally wrong?\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16022293",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-16022293",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 16022293,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDIyMjkz",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-07T19:50:51Z",
    "updated_at": "2013-04-07T19:50:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "@y-p no that is correct, that said most operations we do fall into that catergory (except for maybe grep!)\n\nbut there exists commonaility in that you want to parse and expression and evaluate (locally), while I want to do this for passing to numexpr, hence a common 'expression' parser (that outputs an intermediate form suitable for either usecase)\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16022460",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-16022460",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 16022460,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDIyNDYw",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-07T19:58:27Z",
    "updated_at": "2013-04-07T19:58:27Z",
    "author_association": "NONE",
    "body": "I see, the \"dgrep\" here is regex/str dtype specific. \nhow would you disambiguate a string regex from a pd.expressions-compatibke expr?\nif there's a way to roll this into one, I would totally go for doing that here (and probably everywhere).\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16022538",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-16022538",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 16022538,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDIyNTM4",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-07T20:02:11Z",
    "updated_at": "2013-04-07T20:02:55Z",
    "author_association": "NONE",
    "body": "There's also the vectorized string methods to consider, don't know \nif matching is part of it right now, but would be nice to hook into \nthe memoized machinery, whenever that lands (probably just a decorator to use?).\n\nhttps://github.com/pydata/pandas/issues/1660, https://github.com/pydata/pandas/issues/2802#issuecomment-15131908\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16022748",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-16022748",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 16022748,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDIyNzQ4",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-07T20:12:13Z",
    "updated_at": "2013-04-07T20:12:13Z",
    "author_association": "NONE",
    "body": "@hayd, thanks, so there _are_ users who are missing something like this.\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/16025490",
    "html_url": "https://github.com/pandas-dev/pandas/issues/2460#issuecomment-16025490",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/2460",
    "id": 16025490,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDI1NDkw",
    "user": {
      "login": "jreback",
      "id": 953992,
      "node_id": "MDQ6VXNlcjk1Mzk5Mg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/953992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jreback",
      "html_url": "https://github.com/jreback",
      "followers_url": "https://api.github.com/users/jreback/followers",
      "following_url": "https://api.github.com/users/jreback/following{/other_user}",
      "gists_url": "https://api.github.com/users/jreback/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jreback/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jreback/subscriptions",
      "organizations_url": "https://api.github.com/users/jreback/orgs",
      "repos_url": "https://api.github.com/users/jreback/repos",
      "events_url": "https://api.github.com/users/jreback/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jreback/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-04-07T22:12:59Z",
    "updated_at": "2013-04-07T22:12:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "@y-p I think it DOES make sense to separate functionaility a bit, so will propose this for data selection:\n\n(we already beefed up index selection via iloc/loc and have filter, so no need to touch that, maybe except for combinging filter/select)\n\n1) grep could handle a string expression for regex, lambda expression, or E (an expression indicator, function that takes a string to hold and mark as an expression)\n2) getitem would handle dispatch to integer/label indexing, boolean indexing, column accessing (it already does these), and would be able to handle an expression as a string (not E required)\n\ncould put this type of expression into HDFStore as well to consolidate that\n\nalternatively, we could always force the user to use E to indicate this is a evaluable expression\n"
  }
]
