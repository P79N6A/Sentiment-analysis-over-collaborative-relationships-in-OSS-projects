[
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/400138493",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21630#issuecomment-400138493",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21630",
    "id": 400138493,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDEzODQ5Mw==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-26T00:33:30Z",
    "updated_at": "2018-06-26T00:33:30Z",
    "author_association": "MEMBER",
    "body": "I haven't looked in detail but I wouldn't be surprised if the runtime evaluation of your UDF occurs at a point in the call stack that catches a particular type of `Exception` before applying the function in some other fashion. In that case the flow is something like:\r\n\r\n- Your function fails\r\n- Your function catches the error, prints a message\r\n- Your functions propoagates the error up the stack\r\n- A call further up the stack catches the Exception, attempts lazy evaluation in some other fashion\r\n- The \"other fashion\" succeeds in execution, yielding the result\r\n\r\nIf that's the case I think it would be generally tough to ever guarantee that error handling within a UDF would not interfere with what pandas is doing (especially if catching something as generic as Exception) but certainly welcome to take a look and see if there's a way to support that"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/400162570",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21630#issuecomment-400162570",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21630",
    "id": 400162570,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDE2MjU3MA==",
    "user": {
      "login": "gnilrets",
      "id": 2371577,
      "node_id": "MDQ6VXNlcjIzNzE1Nzc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2371577?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gnilrets",
      "html_url": "https://github.com/gnilrets",
      "followers_url": "https://api.github.com/users/gnilrets/followers",
      "following_url": "https://api.github.com/users/gnilrets/following{/other_user}",
      "gists_url": "https://api.github.com/users/gnilrets/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gnilrets/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gnilrets/subscriptions",
      "organizations_url": "https://api.github.com/users/gnilrets/orgs",
      "repos_url": "https://api.github.com/users/gnilrets/repos",
      "events_url": "https://api.github.com/users/gnilrets/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gnilrets/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-26T03:01:50Z",
    "updated_at": "2018-06-26T03:01:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "Any idea where that lazy evaluation could be happening?  Perhaps I could raise a certain kind of exception that wouldn't be caught by the lazy evaluation.  \r\n\r\nI've often struggled with trying to deal with Pandas errors.  I do a lot of ETL with Pandas, and in many cases I don't want some strangeness in a single record to raise an error for an entire data pipeline.  I've specifically built a package in an attempt to handle this situation (https://github.com/inside-track/pandas-mapper).  It worked great with 0.22.0, but I'm having trouble with this scenario in 0.23.1.\r\n"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/400163982",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21630#issuecomment-400163982",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21630",
    "id": 400163982,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDE2Mzk4Mg==",
    "user": {
      "login": "WillAyd",
      "id": 609873,
      "node_id": "MDQ6VXNlcjYwOTg3Mw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/609873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/WillAyd",
      "html_url": "https://github.com/WillAyd",
      "followers_url": "https://api.github.com/users/WillAyd/followers",
      "following_url": "https://api.github.com/users/WillAyd/following{/other_user}",
      "gists_url": "https://api.github.com/users/WillAyd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/WillAyd/subscriptions",
      "organizations_url": "https://api.github.com/users/WillAyd/orgs",
      "repos_url": "https://api.github.com/users/WillAyd/repos",
      "events_url": "https://api.github.com/users/WillAyd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/WillAyd/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-26T03:11:11Z",
    "updated_at": "2018-06-26T15:12:01Z",
    "author_association": "MEMBER",
    "body": "If you put a breakpoint in your except clause you should be able to debug the entire stack trace. Here's the lowest frame that throws:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/1033e8b1195d4071253889ada60523832285354c/pandas/core/apply.py#L238\r\n\r\nAs you can see that alone is in fact catching an Exception, so should confirm my original thinking.\r\n\r\nJust as a general design principle I'd question trying to catch Exceptions in your UDFs. You are basically interfering with the exception handling that pandas (or any arbitrary package) would offer during execution of the UDF. \r\n\r\nIs it not possible to put your exception handling outside of the UDF? That seems like a much safer route:\r\n\r\n```python\r\ntry:\r\n  df.apply(tryit, axis=1)  # Assuming you removed except clause from tryit\r\nexcept Exception as e:  \r\n  print(\"Error occurred!\")\r\n  raise e\r\n```"
  },
  {
    "url": "https://api.github.com/repos/pandas-dev/pandas/issues/comments/400213632",
    "html_url": "https://github.com/pandas-dev/pandas/issues/21630#issuecomment-400213632",
    "issue_url": "https://api.github.com/repos/pandas-dev/pandas/issues/21630",
    "id": 400213632,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMDIxMzYzMg==",
    "user": {
      "login": "eric-wieser",
      "id": 425260,
      "node_id": "MDQ6VXNlcjQyNTI2MA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/425260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eric-wieser",
      "html_url": "https://github.com/eric-wieser",
      "followers_url": "https://api.github.com/users/eric-wieser/followers",
      "following_url": "https://api.github.com/users/eric-wieser/following{/other_user}",
      "gists_url": "https://api.github.com/users/eric-wieser/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eric-wieser/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eric-wieser/subscriptions",
      "organizations_url": "https://api.github.com/users/eric-wieser/orgs",
      "repos_url": "https://api.github.com/users/eric-wieser/repos",
      "events_url": "https://api.github.com/users/eric-wieser/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eric-wieser/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-06-26T07:48:10Z",
    "updated_at": "2018-06-26T07:50:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rethrowing it as a `BaseException` will cause it to not be caught by `pandas`. Full set of lines is\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/1033e8b1195d4071253889ada60523832285354c/pandas/core/apply.py#L238-L245\r\n\r\nPerhaps that `except` should only wrap the `reduce`?\r\n\r\n```python\r\n try: \r\n     result = reduction.reduce(values, self.f, \r\n                               axis=self.axis, \r\n                               dummy=dummy, \r\n                               labels=labels) \r\n except Exception:\r\n     pass\r\n else:\r\n     return self.obj._constructor_sliced(result, index=labels) "
  }
]
