[
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271105904",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271105904",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271105904,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTEwNTkwNA==",
    "user": {
      "login": "GraionDilach",
      "id": 1136302,
      "node_id": "MDQ6VXNlcjExMzYzMDI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1136302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GraionDilach",
      "html_url": "https://github.com/GraionDilach",
      "followers_url": "https://api.github.com/users/GraionDilach/followers",
      "following_url": "https://api.github.com/users/GraionDilach/following{/other_user}",
      "gists_url": "https://api.github.com/users/GraionDilach/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GraionDilach/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GraionDilach/subscriptions",
      "organizations_url": "https://api.github.com/users/GraionDilach/orgs",
      "repos_url": "https://api.github.com/users/GraionDilach/repos",
      "events_url": "https://api.github.com/users/GraionDilach/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GraionDilach/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-07T19:53:22Z",
    "updated_at": "2017-01-07T19:53:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "#11830 is a bad example, that's more of a coding brainfart and today I'd revert it in favor of an external trait which counts how many times it's INotifyAttack.Attacking interface was called in a specified timeframe and apply a condition based on that, but #11813 showcases the issue quite well. I can already see that I want Generals-styled unit variations (asin completely different actors, not just an actor with a random default condition applied) at a point which would work as a pseudo-trait hijacking https://github.com/OpenRA/OpenRA/blob/bleed/OpenRA.Game/Actor.cs#L99, but pretty sure if I'd send a PR consisting this, it'd only gather :-1:s while this proposal provides me the opportunity to pull it off without stirring up any conflict of interest in doing so in a customized \"fork\"/branch.\r\n\r\nThis also sounds like a solution regarding the .NET-cannot-unload-assemblies issue since mod-switch would involve restarting the game now.\r\n\r\nMy main concern currently is dll mixing between various mods, asin we still haven't finished moving every shared-between-more-mods logics into Common (case coming into my mind is TS using RA's infiltration logic but certain there's more) and I'm not sure where those dlls would sit in your proposed folder hierarchy. This would also make simplemodders' life harder due to the omitted dlls, something they can fix easily today (open mod.yaml, include), but not that easily after this takes effect (get the same game's other-mod-counterpart, copy-dll, include), which might increase complaints such as http://ppmforums.com/viewtopic.php?p=541013#541013. I dare suggesting that we should axe mod-specific dlls altogether/ship all dlls with all mods against complaints like such.\r\n\r\nAs a modder primarily, I have to say I am leaning towards fully supporting this idea though."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271108620",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271108620",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271108620,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTEwODYyMA==",
    "user": {
      "login": "Mailaender",
      "id": 756669,
      "node_id": "MDQ6VXNlcjc1NjY2OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/756669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mailaender",
      "html_url": "https://github.com/Mailaender",
      "followers_url": "https://api.github.com/users/Mailaender/followers",
      "following_url": "https://api.github.com/users/Mailaender/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mailaender/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mailaender/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mailaender/subscriptions",
      "organizations_url": "https://api.github.com/users/Mailaender/orgs",
      "repos_url": "https://api.github.com/users/Mailaender/repos",
      "events_url": "https://api.github.com/users/Mailaender/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mailaender/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-07T20:38:28Z",
    "updated_at": "2017-01-07T20:41:46Z",
    "author_association": "MEMBER",
    "body": "> #### Branding confusion\r\n> \r\n> Out of all the feedback on our new logo design, the main underlying complaint seems to be that players don't want some generic icon on their launcher, they want something that they can identify with the mod(s) that they play.  I can't fault this argument, but this is incompatible with our goal/requirement for our project-neutral launcher to have a project-neutral icon.\r\n\r\nhttps://github.com/cerebrum/dr/blob/master/games-strategy/openra/openra-20161019.ebuild#L72 already solved this for Gentoo Linux. It is easy to add launchers to the official installers, but also easy to make these shortcuts manually yourself so not really a huge deal either."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271185960",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271185960",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271185960,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTE4NTk2MA==",
    "user": {
      "login": "reaperrr",
      "id": 2857877,
      "node_id": "MDQ6VXNlcjI4NTc4Nzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2857877?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reaperrr",
      "html_url": "https://github.com/reaperrr",
      "followers_url": "https://api.github.com/users/reaperrr/followers",
      "following_url": "https://api.github.com/users/reaperrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/reaperrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reaperrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reaperrr/subscriptions",
      "organizations_url": "https://api.github.com/users/reaperrr/orgs",
      "repos_url": "https://api.github.com/users/reaperrr/repos",
      "events_url": "https://api.github.com/users/reaperrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reaperrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-08T22:48:26Z",
    "updated_at": "2017-01-08T23:17:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "> My main concern currently is dll mixing between various mods, asin we still haven't finished moving every shared-between-more-mods logics into Common (case coming into my mind is TS using RA's infiltration logic but certain there's more)\r\n\r\nIdentifying and moving those should be relatively simple. I probably would have filed PRs already if I had been aware of this.\r\n\r\n> I dare suggesting that we should axe mod-specific dlls altogether/ship all dlls with all mods against complaints like such.\r\n\r\nConsidering how few mod-exclusive features would remain if we moved all remaining shared functionality to Common, you're probably right.\r\n\r\n> The directory layout of development versions would be fundamentally different to packaged versions, which will cause bugs.\r\n\r\n@pchote This is the drawback I'm most concerned about, however I can't picture in what way exactly the directory structure would differ, could you give an example?\r\nEdit: Nevermind, I just realized that's what the example further above was about. I am interested in what kind of bugs you think we have to expect, though."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271194534",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271194534",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271194534,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTE5NDUzNA==",
    "user": {
      "login": "reaperrr",
      "id": 2857877,
      "node_id": "MDQ6VXNlcjI4NTc4Nzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2857877?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reaperrr",
      "html_url": "https://github.com/reaperrr",
      "followers_url": "https://api.github.com/users/reaperrr/followers",
      "following_url": "https://api.github.com/users/reaperrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/reaperrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reaperrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reaperrr/subscriptions",
      "organizations_url": "https://api.github.com/users/reaperrr/orgs",
      "repos_url": "https://api.github.com/users/reaperrr/repos",
      "events_url": "https://api.github.com/users/reaperrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reaperrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-09T00:52:31Z",
    "updated_at": "2017-01-09T00:52:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Mailaender I'd say the branding issue makes up <20% of the argument, despite the recent icon uproar.\r\n\r\nAll the issues @pchote listed regarding mod support are correct.\r\nFor anything more complex than TDX, I would take the same route the mentioned larger mods already take. Support dir mod loading and oramod files may be nice on paper, but for larger-scale projects they simply aren't really that practical, and the percentage of (worthwhile) small mods is relatively low. \r\nThe future success of OpenRA as an engine depends more on the support for the \"bigger-and-better\" projects, I dare say.\r\n\r\nLong story short, I'm leaning towards this change, as I'm afraid that sticking to the current structure may lead to OpenRA hitting a dead-end for good sooner rather than later."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271203430",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271203430",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271203430,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTIwMzQzMA==",
    "user": {
      "login": "DoGyAUT",
      "id": 12551040,
      "node_id": "MDQ6VXNlcjEyNTUxMDQw",
      "avatar_url": "https://avatars1.githubusercontent.com/u/12551040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DoGyAUT",
      "html_url": "https://github.com/DoGyAUT",
      "followers_url": "https://api.github.com/users/DoGyAUT/followers",
      "following_url": "https://api.github.com/users/DoGyAUT/following{/other_user}",
      "gists_url": "https://api.github.com/users/DoGyAUT/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DoGyAUT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DoGyAUT/subscriptions",
      "organizations_url": "https://api.github.com/users/DoGyAUT/orgs",
      "repos_url": "https://api.github.com/users/DoGyAUT/repos",
      "events_url": "https://api.github.com/users/DoGyAUT/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DoGyAUT/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-09T02:58:18Z",
    "updated_at": "2017-01-09T03:01:34Z",
    "author_association": "NONE",
    "body": "I support pchotes idea too. It seems as a better solution for bigger/complex projects.\r\n\r\nCrystallized Doom's betas are already shipped with custom OpenRA builds with it's own adaptions. Yesterday I added for example Graions AS.dll which has some useful features I can use for CD.\r\n\r\nThe beta testers are already used to this method where we provide them the required/compatible OpenRA build and mod files in one package.\r\n\r\nLater down the road I would also expect to have a single installer for fitting engine version + mod as one package (at best with as less content from other games/mods as possible to keep it clean/in order).\r\nOnce the first public build (for CD) would arrive, it would be easier installed and distributed for the enduser/players.\r\n\r\nThe only thing which might become a problem is where bugreports would blend in depending if players report with an official build or a custom build to you. Well it should be common sense that you first contact/report to the mod authors instead of bugging the ORA contributors. So the modauthors can look for the reported bugs/problem themself first and then take the necessary actions (fix themself or contact contributors).\r\n\r\nSo far I can only tell that I always worked with custom shipped OpenRA builds since I started the port from TS to OpenRA. I don't know how much workload this change/suggestion would mean for you guys, so I can't comment on that.\r\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271361381",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271361381",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271361381,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTM2MTM4MQ==",
    "user": {
      "login": "Mailaender",
      "id": 756669,
      "node_id": "MDQ6VXNlcjc1NjY2OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/756669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mailaender",
      "html_url": "https://github.com/Mailaender",
      "followers_url": "https://api.github.com/users/Mailaender/followers",
      "following_url": "https://api.github.com/users/Mailaender/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mailaender/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mailaender/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mailaender/subscriptions",
      "organizations_url": "https://api.github.com/users/Mailaender/orgs",
      "repos_url": "https://api.github.com/users/Mailaender/repos",
      "events_url": "https://api.github.com/users/Mailaender/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mailaender/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-09T18:17:56Z",
    "updated_at": "2017-01-09T18:20:19Z",
    "author_association": "MEMBER",
    "body": "I can understand that thirdparty mods fork the engine and ship their own CrystallizedDoom.exe at some point in development. However doing so with the current default mods whose release engineering is scheduled with engine releases, is totally backwards. While I agree that the monolithic design of the OpenRA engine is a huge design flaw we can't get rid of that easily, reinforcing this by duplicating binaries per mod, is exactly the opposite of what needs to happen.\r\n\r\nThis project needs to become way more modular with stable API/ABIs and long-term planned specifications to end this compatibility and upgrade nightmare for modders and mappers. Not sure if we are already at a stage where this is feasible."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271364225",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271364225",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271364225,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTM2NDIyNQ==",
    "user": {
      "login": "GraionDilach",
      "id": 1136302,
      "node_id": "MDQ6VXNlcjExMzYzMDI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1136302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GraionDilach",
      "html_url": "https://github.com/GraionDilach",
      "followers_url": "https://api.github.com/users/GraionDilach/followers",
      "following_url": "https://api.github.com/users/GraionDilach/following{/other_user}",
      "gists_url": "https://api.github.com/users/GraionDilach/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GraionDilach/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GraionDilach/subscriptions",
      "organizations_url": "https://api.github.com/users/GraionDilach/orgs",
      "repos_url": "https://api.github.com/users/GraionDilach/repos",
      "events_url": "https://api.github.com/users/GraionDilach/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GraionDilach/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-09T18:28:50Z",
    "updated_at": "2017-01-09T18:28:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "TBH, API-like modularity went out in the window when explicit interfaces became the norm with their impossibility to be expanded through inheritance got labelled as feature and not a bug."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271364315",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271364315",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271364315,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTM2NDMxNQ==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-09T18:29:13Z",
    "updated_at": "2017-01-09T18:31:47Z",
    "author_association": "MEMBER",
    "body": "> It is easy to add launchers to the official installers, but also easy to make these shortcuts manually yourself so not really a huge deal either.\r\n\r\nThis isn't possible on OSX, where applications are self-contained and portable bundles. Appimages on Linux may end up having a similar issue."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271367088",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271367088",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271367088,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTM2NzA4OA==",
    "user": {
      "login": "Mailaender",
      "id": 756669,
      "node_id": "MDQ6VXNlcjc1NjY2OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/756669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mailaender",
      "html_url": "https://github.com/Mailaender",
      "followers_url": "https://api.github.com/users/Mailaender/followers",
      "following_url": "https://api.github.com/users/Mailaender/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mailaender/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mailaender/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mailaender/subscriptions",
      "organizations_url": "https://api.github.com/users/Mailaender/orgs",
      "repos_url": "https://api.github.com/users/Mailaender/repos",
      "events_url": "https://api.github.com/users/Mailaender/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mailaender/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-09T18:39:18Z",
    "updated_at": "2017-01-09T18:39:18Z",
    "author_association": "MEMBER",
    "body": "> This isn't possible on OSX.\r\n\r\nI think Mac OS X knows the concept of folders in application launchers, so we could make an OpenRA button which then expands and adds icons for each mod to directly launch them. According to https://support.apple.com/kb/PH21859?viewlocale=en_US&locale=en_US you can even create such folders yourself by dragging application icons on top of each other."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271367282",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271367282",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271367282,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTM2NzI4Mg==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-09T18:40:06Z",
    "updated_at": "2017-01-09T18:40:06Z",
    "author_association": "MEMBER",
    "body": "> > The directory layout of development versions would be fundamentally different to packaged versions, which will cause bugs.\r\n>\r\n> @pchote This is the drawback I'm most concerned about, however I can't picture in what way exactly the directory structure would differ, could you give an example?\r\nEdit: Nevermind, I just realized that's what the example further above was about. I am interested in what kind of bugs you think we have to expect, though.\r\n\r\nThe same kind of bugs that we already have to deal with when people change the directory/file structure and forget to update the packaging scripts, but worse because they now need to track the individual mod includes instead of just a global layout."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271367870",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271367870",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271367870,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTM2Nzg3MA==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-09T18:42:18Z",
    "updated_at": "2017-01-09T18:43:20Z",
    "author_association": "MEMBER",
    "body": "> I think Mac OS X knows the concept of folders in application launchers, so we could make an OpenRA button which then expands and adds icons for each mod to directly launch them\r\n\r\nOn OSX an \"icon\" is not a shortcut like on Linux or Windows, it is a full portable installation containing all of the application's files.  You can't have separate \"icons\" for each mod without also having separate executable and data files (or resorting to hacks that violate platform standards)."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271368571",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271368571",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271368571,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTM2ODU3MQ==",
    "user": {
      "login": "Mailaender",
      "id": 756669,
      "node_id": "MDQ6VXNlcjc1NjY2OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/756669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mailaender",
      "html_url": "https://github.com/Mailaender",
      "followers_url": "https://api.github.com/users/Mailaender/followers",
      "following_url": "https://api.github.com/users/Mailaender/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mailaender/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mailaender/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mailaender/subscriptions",
      "organizations_url": "https://api.github.com/users/Mailaender/orgs",
      "repos_url": "https://api.github.com/users/Mailaender/repos",
      "events_url": "https://api.github.com/users/Mailaender/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mailaender/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-09T18:45:05Z",
    "updated_at": "2017-01-09T18:45:15Z",
    "author_association": "MEMBER",
    "body": "> On OSX an \"Application Launcher\" is not a shortcut like on Linux or Windows, it is a full portable installation containing all of the application's files. You can't have separate \"icons\" for each mod without also having separate executable and data files.\r\n\r\nIn that case I suggest to have the workaround of duplicated `OpenRA.Game.exe` files per mod only for our Mac packages as this technical limitation doesn't exist on the other platforms."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271369096",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271369096",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271369096,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTM2OTA5Ng==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-09T18:47:18Z",
    "updated_at": "2017-01-09T18:55:36Z",
    "author_association": "MEMBER",
    "body": "You're focusing on what is really a minor / secondary benefit the proposal, while ignoring the main points.  This really feels like\r\n\r\n> Some people (who don't care about the reason for this change) will be very unhappy about the file duplication.\r\n\r\nThe primary goal of duplicating `OpenRA.Game.exe` is explained above and has nothing to do with OSX.  Implementing all the packaging and game registration logic to do this separation for OSX, but then purposely not doing it for the other platforms is more work and error prone for little practical benefit."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271378942",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271378942",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271378942,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTM3ODk0Mg==",
    "user": {
      "login": "Mailaender",
      "id": 756669,
      "node_id": "MDQ6VXNlcjc1NjY2OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/756669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mailaender",
      "html_url": "https://github.com/Mailaender",
      "followers_url": "https://api.github.com/users/Mailaender/followers",
      "following_url": "https://api.github.com/users/Mailaender/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mailaender/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mailaender/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mailaender/subscriptions",
      "organizations_url": "https://api.github.com/users/Mailaender/orgs",
      "repos_url": "https://api.github.com/users/Mailaender/repos",
      "events_url": "https://api.github.com/users/Mailaender/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mailaender/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-09T19:15:00Z",
    "updated_at": "2017-01-09T19:36:59Z",
    "author_association": "MEMBER",
    "body": "Okay, to give you further\r\n\r\n> ### Other issues / drawbacks:\r\n\r\n* The duplication will also raise Linux packaging quality flags. For example `rpmlint` will notice the duplicates and suggest to link them with `fdupes` to avoid the warning and save disc space. This will then cause extremely weird constructs when packagers try to resolve these warnings.\r\n\r\n* It violates the proven design philosophy in hobbyist game development of having a shared and flexible engine that runs in different configurations (mods) many modders are used to. The message sent is not \"contributions are welcome, let's find common ground\" but then \"go away, make your private fork, it's the only way\" which I find very disturbing. Especially since the number of contributors is already in a decline.\r\n\r\n* The package size will increase needlessly. While this doesn't matter nowadays as we and most of our players don't have to pay for the extra bandwidth, I could imagine community repacks of just `<prefix>/ra-release-xxxx/` without the other \"junk\" nobody plays anyway.\r\n\r\n* Anti-Virus vendors have to be asked to whitelist 3 `OpenRA.Game.exe` files per release of the same name that can only be distinguished by the folder they are sitting in. While I personally wouldn't put much attention to this, lot's of our players use Microsoft Windows and rely on virus scanners. The past showed that OpenRA get's flagged easily due to the dynamic code generation features and large security software publishers don't care for small non-commercial indie projects like this one.\r\n\r\n* It makes FHS compliant Linux packaging even harder as it requires binaries and data files to follow a directory structure where everything has to be bundled instead of allowing to separate them cleanly.\r\n\r\n* My fear is that this construct of multiple independent engines animates coders back into copy pasting source code together with minor mod specific variations. After all the hard consolidation of historically diverged mess in this project, I feel like this could all come back pretty quickly undoing what we achieved for the last few years of mostly tidying up and putting new features on the backburner."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271393629",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271393629",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271393629,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTM5MzYyOQ==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-09T20:09:47Z",
    "updated_at": "2017-01-09T20:17:18Z",
    "author_association": "MEMBER",
    "body": "Ok, thanks for the comments.  These are all good points, so i'll give my thoughts on each.\r\n\r\n> The duplication will also raise Linux packaging quality flags\r\n\r\nValid point, but we can solve this without much trouble on distros that have OpenRA in a repository.  They can package individual `openra-<mod>` packages and have the `openra` metapackage require the default mods (or not, I guess...). I expect some distros would prefer this over us shipping our own proprietary package manager (the mod chooser) that installs content to the user's home directory. The deb packaging is a problem, but migrating that to a custom repository is a long-standing open issue.\r\n\r\n> It violates the proven design philosophy in hobbyist game development of having a shared and flexible engine that runs in different configurations (mods) many modders are used to.\r\n\r\nThree of our four biggest modders have replied just above saying that this philosophy has actively failed them and that they are (or would) actively circumventing it in practice.  With the exception of @Holloweye's WW1 mod, all the mods that i'm aware of that *did* follow this principle have stopped development and are no longer playable.\r\n\r\n> The package size will increase needlessly.\r\n\r\nI just checked this, and all the common files on OSX add up to 26 MB uncompressed / 4.7 MB compressed.  This is a lot more than I was expecting, so I have no valid (serious) counter point.  Loading facebook page a couple of times still probably outweighs it :smile:.\r\n\r\n> Anti-Virus vendors have to be asked to whitelist 3 .exe files per release \r\n\r\nValid point which I have no counter point to.\r\n\r\n> It makes FHS compliant Linux packaging even harder\r\n\r\nI don't understand what you're saying here.  Does my comment above about the mod chooser effectively being a DIY package manager counter this?\r\n\r\n> My fear is that this construct of multiple independent engines animates coders back into copy pasting source code together with minor mod specific variations.\r\n\r\nI think this is a very important point because in theory I completely agree.  In practice, however, mods are *already doing this*, and IMO we need to be pragmatic and include these projects in our ecosystem (shared server list / mod switching / resource center) instead of leaving them as separate and second-class citizens.  The main mods are essentially complete and in maintenance mode, so without these outside projects OpenRA development is not going to survive in the long and possibly even medium term.  You know as well as anyone how difficult it is to get new and unproven or incomplete features merged upstream, so giving mods the flexibility to ship their own features without battling through our quality control means that they can try new and unique things that may later be uplifted."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271412739",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271412739",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271412739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTQxMjczOQ==",
    "user": {
      "login": "reaperrr",
      "id": 2857877,
      "node_id": "MDQ6VXNlcjI4NTc4Nzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2857877?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reaperrr",
      "html_url": "https://github.com/reaperrr",
      "followers_url": "https://api.github.com/users/reaperrr/followers",
      "following_url": "https://api.github.com/users/reaperrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/reaperrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reaperrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reaperrr/subscriptions",
      "organizations_url": "https://api.github.com/users/reaperrr/orgs",
      "repos_url": "https://api.github.com/users/reaperrr/repos",
      "events_url": "https://api.github.com/users/reaperrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reaperrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-09T21:27:18Z",
    "updated_at": "2017-01-09T21:31:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Anti-Virus vendors have to be asked to whitelist 3 .exe files per release\r\n\r\n> Valid point which I have no counter point to.\r\n\r\nNot really counter-points, but at least points to consider:\r\n - I haven't run into any issues with Avast AV for what feels like an eternity, despite frequently self-compiling as well as installing and testing the Windows releases. Personally, I'd ask players who run into such issues to check whether their AV scanner has something like a 'game mode' or functionality to locally whitelist the exe(s) and if not, consider switching to one that does (there are enough solid free AV scanners to choose from).\r\nFar from ideal, I know, but OpenRA is certainly not the only software affected by this. We may still try to get them white-listed when necessary, of course.\r\n- With the 3 (current) main mods being mostly in maintenance mode and generally lowest dev activity since 2012 on the main repo, I suspect the frequency of official releases will remain quite low (at the current rate, I expect maybe 2, at most 3 releases this year).\r\n- all larger mods listed in the OP + my MechCom mod already won't depend on the official releases, so the shipping mods and maybe some small mods that depend on them are the only ones where this would make a difference to the status quo."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271413094",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271413094",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271413094,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTQxMzA5NA==",
    "user": {
      "login": "Mailaender",
      "id": 756669,
      "node_id": "MDQ6VXNlcjc1NjY2OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/756669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mailaender",
      "html_url": "https://github.com/Mailaender",
      "followers_url": "https://api.github.com/users/Mailaender/followers",
      "following_url": "https://api.github.com/users/Mailaender/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mailaender/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mailaender/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mailaender/subscriptions",
      "organizations_url": "https://api.github.com/users/Mailaender/orgs",
      "repos_url": "https://api.github.com/users/Mailaender/repos",
      "events_url": "https://api.github.com/users/Mailaender/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mailaender/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-09T21:28:46Z",
    "updated_at": "2017-01-09T21:31:45Z",
    "author_association": "MEMBER",
    "body": "> > It makes FHS compliant Linux packaging even harder\r\n> \r\n> I don't understand what you're saying here.  Does my comment above about the mod chooser effectively being a DIY package manager counter this?\r\n\r\nI have to admit that I may not fully understand where this is going and what this is really trying to solve. Implementing something like Steam just for OpenRA mods that effectively become individual games is weird and pretty much unexpected from my side.\r\n\r\nOne could argue that we will never be accepted into Debian/Fedora/SUSE anyway as our default mods rely so much on foreign intellectual property and bundle lot's of sprites with (at best) unclear redistribution rights.\r\n\r\nMy idea was to solve this with a http://flatpak.org/ package once and for all. This seems to be best practice for .NET on Linux nowadays http://apebox.org/wordpress/linux/1184 but I haven't made any progress there and as you are proposing a complete shift of directions here, I might as well abandon that plan before even starting with it. Plus, I guess nobody seems to care for clean Linux distribution packaging and traditional Unix philosophies like modular design where every component can be replaced. :disappointed: "
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271413120",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271413120",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271413120,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTQxMzEyMA==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-09T21:28:54Z",
    "updated_at": "2017-01-09T23:18:24Z",
    "author_association": "MEMBER",
    "body": "> I suggest to have the workaround of duplicated OpenRA.Game.exe files per mod only for our Mac packages\r\n\r\nI thought about this a bit, and came up with a compromise that could work very well if we are prepared to adjust the repo layout (I wanted to avoid that because it breaks github history):  Move all the common files (engine code + binaries, mods.common + misc docs) into a `sdk` subdirectory of the base repo, then have the platform launchers and `launch-game` scripts execute `OpenRA.Game.exe` using [explicit mod paths](https://github.com/OpenRA/OpenRA/pull/11771).\r\n\r\nWhat does this give us?\r\n* Our packaging scripts become simpler and hopefully more robust: a mod gets a full copy of the compiled sdk (or not – see the next point) and its own mod directory.\r\n* Linux and Windows packages can avoid duplicating the engine files by installing a shared \"OpenRA SDK release-xxxx\" that the first party mods reference from their launchers.  OSX packaging can keep duplicated `sdk` directories inside the individual app bundles.\r\n* Thirdparty mods can have a `sdk` directory at the root of their repository that points at OpenRA/OpenRA/sdk/@their-favourite-commit, and then compiling/developing/running them is almost identical to our firstparty mods (this is a refined version of what i've been suggesting for ages that the ra2 mod do).  Git doesn't natively support submodules rooted at a subdirectory, but there are plenty of other options:\r\n   * Symlink into a real OpenRA/OpenRA clone (best choice for any mods that want to modify the engine and file PRs upstream without messing with patches)\r\n   * Using a [git subtree](https://jrsmith3.github.io/merging-a-subdirectory-from-another-repo-via-git-subtree.html)\r\n   * Using [this horrible but crafty svn workaround](https://coderwall.com/p/o2fasg/how-to-download-a-project-subdirectory-from-github)\r\n   * Using a makefile command / script to fetch https://github.com/OpenRA/OpenRA/archive/release-xxxx.zip and extract the sdk subdirectory.\r\n   * Telling people to do the above step manually.\r\n\r\nI'm not very happy with the idea of breaking our git history by moving all the core engine files to a subdirectory, so the less clean but less breaking approach would be to do the packaging bits without the `sdk` repo dir.  This also means that thirdparty mods could use vanilla submodules, but has downsides of the dev/repo layout not matching the installed layout and thirdparty mods would end up pulling in the firstparty mods as part of their engine submodule."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271440917",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271440917",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271440917,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTQ0MDkxNw==",
    "user": {
      "login": "ABrandau",
      "id": 11763228,
      "node_id": "MDQ6VXNlcjExNzYzMjI4",
      "avatar_url": "https://avatars0.githubusercontent.com/u/11763228?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ABrandau",
      "html_url": "https://github.com/ABrandau",
      "followers_url": "https://api.github.com/users/ABrandau/followers",
      "following_url": "https://api.github.com/users/ABrandau/following{/other_user}",
      "gists_url": "https://api.github.com/users/ABrandau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ABrandau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ABrandau/subscriptions",
      "organizations_url": "https://api.github.com/users/ABrandau/orgs",
      "repos_url": "https://api.github.com/users/ABrandau/repos",
      "events_url": "https://api.github.com/users/ABrandau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ABrandau/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-09T23:28:36Z",
    "updated_at": "2017-01-09T23:29:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "As a modder, my worst fear is releasing a mod and being forced to update it whenever the engine changes, which means that the mod will become unplayable if I am busy or missing in action, that's a critical change that should be adressed, even tho it's easy to fix by uploading a custom build as everyone says, giving each mod its own exe helps ensuring it doesn't become unplayable, so it's a good point.\r\n\r\nThen you have the fact that it increases flexibility for us modders, so we are able to make changes to the engine without the need to modify the main repo, if this allows to make more changes that .dlls alone can do, then it's great, tho since I don't make new code myself, I can't give a deeper apreciation of this.\r\n\r\nTBH I don't like loosing the mod chooser or duplicating the games many times, it would be cool if there was a way to get around this, say, make a launcher that syncs each mod with its own version, everything in one exe, but if that's not possible, it isn't a terrible change, just a bit annoying, but it shouldn't cause rage or hate (I hope).\r\n\r\nWell, the issue with the installers isn't new, as most new mods are dependant on the Isometric grid, which isn't included on the current release, we have been using the bleed for a long time already, so we have been always in trouble whenever an non-windows user comes in wishing to play, we are already used / aware that we need to compile a custom version of the game for people that don't use the same OS as us, this is supported by the fact that it's impossible to keep up with the release / playtest updates forever, so eventually the only thing that will remain is the latest bleed build of the modder, **tl dr, no issue with the custom installers**.\r\n\r\nThe biggest problem I see is the amount of work you guys would have to put to enable this, (making the changes, maintenance and bug fixing), I would stress to make the decision around that. But if what you want is to give more room for developing mods, then I would say it's necessary, because while it's true that you can create new codes to increase the amount of things you can do, you can't edit what already comes in the vanilla engine, and that may limit some people. whenever a tried to convine new users to come in, they lose interest after knowing that the specific thing they want to do is not possible, this might change that, or atleast give them hope that they can do what they want once they have the knowledge needed to do it."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271495436",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271495436",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271495436,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTQ5NTQzNg==",
    "user": {
      "login": "Mailaender",
      "id": 756669,
      "node_id": "MDQ6VXNlcjc1NjY2OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/756669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mailaender",
      "html_url": "https://github.com/Mailaender",
      "followers_url": "https://api.github.com/users/Mailaender/followers",
      "following_url": "https://api.github.com/users/Mailaender/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mailaender/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mailaender/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mailaender/subscriptions",
      "organizations_url": "https://api.github.com/users/Mailaender/orgs",
      "repos_url": "https://api.github.com/users/Mailaender/repos",
      "events_url": "https://api.github.com/users/Mailaender/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mailaender/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-10T06:14:29Z",
    "updated_at": "2017-01-10T06:25:04Z",
    "author_association": "MEMBER",
    "body": "> We put a lot of effort into building out a framework for oramod support, but this doesn't solve the main problems faced by non-trivial mods.  They either distribute a copy of the OpenRA repository with their own changes (Shattered Paradise, Crystallized Doom, Attacque Supérior, Rewire, etc) or fall apart ([*cough*](https://github.com/OpenRA/ra2/)).\r\n\r\nWell, all the mods you mention rely on Tiberian Sun which by policy (not due to technical reasons) is still unreleased, even for nightly CI builds and Red Alert 2 is also excluded solely due to political reasons. This is essentially a home made problem.\r\n\r\n> As a modder, my worst fear is releasing a mod and being forced to update it whenever the engine changes, which means that the mod will become unplayable if I am busy or missing in action, that's a critical change that should be adressed, even tho it's easy to fix by uploading a custom build as everyone says, giving each mod its own exe helps ensuring it doesn't become unplayable, so it's a good point.\r\n\r\nA clean solution would be to modularize the game and version individual parts of it to then define dependencies. This is how enterprise software with long support term solves things. They have legacy releases where only small bug fixes are allowed into for backward compatibility and new release series where larger refactors and API breakages are allowed with documented migration guides for developers. \r\n\r\nI could imagine that something like the file formats or the platform DLL will probably not update much. Also end users probably don't care for the lint rules, but at the moment we still ship them for everyone and packagers don't have a choice to exclude them from the distribution as it is so clutched together. \r\n\r\nSo a more modular structure could in a best case scenario lessen all these problems such as duplication and make migrations easier as you can update individual parts of the platform such as the file format library, if you want to just include some bug fixes or a new format into your mod and want to avoid a large weapon rule refactor for now until you get time to adapt things.\r\n\r\nIt comes with additional complexity though that has to be handled. At the moment you will see that we only use the .NET package manager NuGet for our external libraries and also in a very basic and essentially hacky way. All OpenRA DLLs have a hardcoded version 1.0.0.0 or whatever the backfall is when you don't define anything. This needs to change and a lot of infrastructure has to adapt to that. \r\n\r\nI am not really telling you anything new by the way. We essentially had this idea a long time ago already https://github.com/OpenRA/OpenRA/issues/8850. It was suggested by the founder of this project @chrisforbes back in 2015."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271512768",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271512768",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271512768,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTUxMjc2OA==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-10T08:17:00Z",
    "updated_at": "2017-01-10T09:16:57Z",
    "author_association": "MEMBER",
    "body": "Splitting OpenRA/OpenRA into different repositories by itself doesn't solve any of the issues that are discussed here, and would be completely compatible with this overall proposal.  This ticket focuses on the way we package the games and allow separate engine installations to communicate.  Whether the packaging scripts pull from one repository or several doesn't change this in any meaningful way.\r\n\r\n> I am not really telling you anything new by the way. We essentially had this idea a long time ago already\r\n\r\nYes, and it has been discussed completely to death many times since then why splitting the repository might be attractive in theory but is completely unworkable in practice.  That discussion does not belong here."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271529538",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271529538",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271529538,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTUyOTUzOA==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-10T09:40:00Z",
    "updated_at": "2017-01-10T09:41:33Z",
    "author_association": "MEMBER",
    "body": "> So a more modular structure could in a best case scenario lessen all these problems such as duplication and make migrations easier as you can update individual parts of the platform such as the file format library, if you want to just include some bug fixes or a new format into your mod and want to avoid a large weapon rule refactor for now until you get time to adapt things.\r\n\r\nMaking the project modular doesn't let modders swap out pieces if our packaging then forces users to have a single engine that all mods depend on.  The proposal here *does* let modders do this (that's the main point of it), with or without a modular repo layout."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271551840",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271551840",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271551840,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTU1MTg0MA==",
    "user": {
      "login": "reaperrr",
      "id": 2857877,
      "node_id": "MDQ6VXNlcjI4NTc4Nzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2857877?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reaperrr",
      "html_url": "https://github.com/reaperrr",
      "followers_url": "https://api.github.com/users/reaperrr/followers",
      "following_url": "https://api.github.com/users/reaperrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/reaperrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reaperrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reaperrr/subscriptions",
      "organizations_url": "https://api.github.com/users/reaperrr/orgs",
      "repos_url": "https://api.github.com/users/reaperrr/repos",
      "events_url": "https://api.github.com/users/reaperrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reaperrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-10T11:26:06Z",
    "updated_at": "2017-01-10T11:26:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't have time to flesh this out right now, but I just want to throw in an idea (this is more meant as something complementary, regardless of if and what changes we make to the repository and/or packaging layout):\r\n\r\nIt might be worth considering to split SDK releases (just engine + logic, not containing 1st-party mods) from \"full\" releases (containing everything). All we'd need would be an additional packaging script that skips the mod folders (like we already do for TS). Merging the mod-specific dlls into Common would be the only prerequisite, and it would allow us to release SDK builds for modders much more frequently without worrying about the 1st-party mods.\r\nWhile we're at it, we could split the potentially IP-sensitive file format loaders to separate DLLs, like \"FileFormats.WW.dll\" for things like AUD, VQA, TMP and some compressions and not package those with the SDK."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271555018",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271555018",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271555018,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTU1NTAxOA==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-10T11:43:32Z",
    "updated_at": "2017-01-10T11:45:04Z",
    "author_association": "MEMBER",
    "body": ">  While we're at it, we could split the potentially IP-sensitive file format loaders to separate DLLs, like \"FileFormats.WW.dll\" for things like AUD, VQA, TMP and some compressions and not package those with the SDK.\r\n\r\nI think the best option for this would be a single and separate (to Mods.Common.dll) Mods.Classic.dll with these loaders and the other classic mod specific logic (ion cannon, tesla zaps, worms, etc).\r\n\r\n> It might be worth considering to split SDK releases (just engine + logic, not containing 1st-party mods) from \"full\" releases (containing everything). \r\n\r\nI don't see any benefit to releasing specific \"sdk installers\" because they aren't going to be useful to players.  A better option would be to have solid documentation or possibly a template / example mod (which becomes simpler to maintain once mod development/packaging is decoupled from upstream releases) that explains how to pick an \"sdk\" version by setting up a submodule pointing at an arbitrary OpenRA/OpenRA commit/tag, and sample scripts for how to run their development version and how to generate installers."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271614257",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271614257",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271614257,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTYxNDI1Nw==",
    "user": {
      "login": "GraionDilach",
      "id": 1136302,
      "node_id": "MDQ6VXNlcjExMzYzMDI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1136302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GraionDilach",
      "html_url": "https://github.com/GraionDilach",
      "followers_url": "https://api.github.com/users/GraionDilach/followers",
      "following_url": "https://api.github.com/users/GraionDilach/following{/other_user}",
      "gists_url": "https://api.github.com/users/GraionDilach/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GraionDilach/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GraionDilach/subscriptions",
      "organizations_url": "https://api.github.com/users/GraionDilach/orgs",
      "repos_url": "https://api.github.com/users/GraionDilach/repos",
      "events_url": "https://api.github.com/users/GraionDilach/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GraionDilach/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-10T15:58:02Z",
    "updated_at": "2017-01-10T15:58:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry for my answer being sporadic, but I will only reply what I feel important for now.\r\n\r\nSDK installers wouldn't benefit to modders - we don't have a nonWW useable image format we can use for assets, also a lot of the modders ignore the documentation and learn from the shipped-default-mod examples.\r\n\r\n@Mailaender The main issue is that you can't replace everything. Yes, interfaces might imply you can substitute one thing for the other, but I can flatout prove the opposite with your own work of RA2's WithSwimSuit (which was made because WithDeathAnimation isn't conditional and even then it sacrificed prone animations). I've also listed a similar example in https://github.com/OpenRA/OpenRA/issues/11813#issuecomment-239447749 when I tried to override the Refinery trait for Ore Purifier. Modularity might imply that you can resolve these issues with such, but no matter how much you split, you will run into an issue like the above from it. Unless you want to hash everything into their own plugin but then you reach the other end of the issue.\r\n\r\nI am disagreeing with @ABrandau even, because the big mods still ship the source code along with the \"compiled\" build, so people from other OSes can get the mod build working via make clean && make dependencies && make all (Okay, I had to go back to precompiling AS for Windows, but that's because of our issues regarding the LARGEADDRESSAWARE flag and apparently AS needs it already). It's one of the things my Linux preference fought out so to say. It's also part of the GPLv3 license.\r\n\r\nI am also not fond of the splitting dlls idea and then setting them up as dependencies of each other, because due to the intention of linking mod dlls always against Common only and not against each other I have already seen mods duplicating other mod's code in their own - the aforementioned WWI mod only uses Common and WWI with the latter having the spy traits duplicated from RA1 - and I can imagine it could lead to a dependency conflict if a thirdparty mod starts building from another mod - again, nothing stops a modder from including the WWI mod's dll into his own, along with RA1's.\r\n\r\nBy following that principle I also was forced to duplicate things at a point - to deal with https://github.com/OpenRA/OpenRA/pull/12129 I did introduced a WithVoxelHelicopterBody trait in AS namespace at https://github.com/GraionDilach/OpenRA.Mods.AS/commit/64e0ed514c2410295862a00d83529d115a9acb0a as was suggested there and had to duplicate BodyAnimationFrameInit to avoid linking to the TS mod dll.\r\n\r\nWhat would decide what goes to that Mods.Classic, who would decide that? Right, we just got the InstantHit projectile, but for more than a year now, I was using teslazaps without any bolts for that, because I felt the single-frame difference of a superfast Bullet's wrong."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271648218",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271648218",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271648218,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTY0ODIxOA==",
    "user": {
      "login": "BansheePPM",
      "id": 3445321,
      "node_id": "MDQ6VXNlcjM0NDUzMjE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3445321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BansheePPM",
      "html_url": "https://github.com/BansheePPM",
      "followers_url": "https://api.github.com/users/BansheePPM/followers",
      "following_url": "https://api.github.com/users/BansheePPM/following{/other_user}",
      "gists_url": "https://api.github.com/users/BansheePPM/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BansheePPM/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BansheePPM/subscriptions",
      "organizations_url": "https://api.github.com/users/BansheePPM/orgs",
      "repos_url": "https://api.github.com/users/BansheePPM/repos",
      "events_url": "https://api.github.com/users/BansheePPM/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BansheePPM/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-10T17:56:49Z",
    "updated_at": "2017-01-10T17:56:49Z",
    "author_association": "NONE",
    "body": "Hey guys. Just posting my $0.02 here, since this something that interest me not only because of PPM, but also as a potential future modder for this engine (I need to finish some personal business first).\r\n\r\nAnyway, I think you are moving into a wrong direction, although I fully agree with the diagnostic background posted in the issue. You don't need to replace or disable the mod chooser. You need to add additional options for modder or whoever builds a project with OpenRA and you need a separate package of OpenRA that doesn't feature the default mods.\r\n\r\nWhat I'd suggest to add to your packaging script are options that lets users to set (not necessarily in this order):\r\n\r\n1) Name of the Project\r\n2) Version (optional)\r\n3) Authors (optional)\r\n4) Location of the image set (which may include icons, logo and other graphics from the main project)\r\n5) Update channel (URL where the game will verify if there is an upgrade for it)\r\n6) News channel (URL of the RSS feeds or whatever the game uses to fetch news) (optional)\r\n7) Multiplayer server URL (optional, although it is required if you want multiplayer in your project)\r\n8) Ability to enable and disable options and their location in the interface (I think you guys may already have that working somewhere, but I'm not sure, so I'm including it here).\r\n9) Description of each Project included in the game, including the same items from 1 to 8 for each of the included projects, and, for the included projects, the update channel should be optional as well.\r\n\r\n "
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/271974537",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-271974537",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 271974537,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTk3NDUzNw==",
    "user": {
      "login": "Mailaender",
      "id": 756669,
      "node_id": "MDQ6VXNlcjc1NjY2OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/756669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mailaender",
      "html_url": "https://github.com/Mailaender",
      "followers_url": "https://api.github.com/users/Mailaender/followers",
      "following_url": "https://api.github.com/users/Mailaender/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mailaender/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mailaender/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mailaender/subscriptions",
      "organizations_url": "https://api.github.com/users/Mailaender/orgs",
      "repos_url": "https://api.github.com/users/Mailaender/repos",
      "events_url": "https://api.github.com/users/Mailaender/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mailaender/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-11T19:48:53Z",
    "updated_at": "2017-01-11T19:48:53Z",
    "author_association": "MEMBER",
    "body": "@BansheePPM Most of it is already configurable. You may want per mod settings then. https://github.com/OpenRA/OpenRA/issues/8276"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/272588582",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-272588582",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 272588582,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjU4ODU4Mg==",
    "user": {
      "login": "abcdefg30",
      "id": 7704140,
      "node_id": "MDQ6VXNlcjc3MDQxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7704140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abcdefg30",
      "html_url": "https://github.com/abcdefg30",
      "followers_url": "https://api.github.com/users/abcdefg30/followers",
      "following_url": "https://api.github.com/users/abcdefg30/following{/other_user}",
      "gists_url": "https://api.github.com/users/abcdefg30/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abcdefg30/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abcdefg30/subscriptions",
      "organizations_url": "https://api.github.com/users/abcdefg30/orgs",
      "repos_url": "https://api.github.com/users/abcdefg30/repos",
      "events_url": "https://api.github.com/users/abcdefg30/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abcdefg30/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-14T01:10:15Z",
    "updated_at": "2017-01-14T01:10:15Z",
    "author_association": "MEMBER",
    "body": "I was asked to comment as well, so here we go. (Read the second last paragraph for a tl;dr.)\r\n\r\nFollowing the principle of \"return early\", I'd like to get some thoughts of minor importance written down first.\r\n<hr>\r\n\r\n### The mod chooser\r\n\r\nI would be a bit sad when it gets removed, as I always liked the idea to be able to browse mods on the resource site from it one day. But although that is not a real blocker, I wonder if we could keep it, as the plan is to allow mod switching from the multiplayer lobby anyway. Couldn't the same system be used for the mod chooser? (As alternative if my final suggestion isn't feasible/appreciated.)\r\n<hr>\r\n\r\n### Branding\r\n\r\nTo be honest, I don't really consider branding a real issue here (yet). I don't recall anyone coming up with that except @pchote who wanted a new logo for the engine in order to be able to better differentiate between the actual engine and ra mod. Mods like @ABrandau's Shattered Paradise already have \"custom\" icons. (I guess @Mailaender's comments should be looked at here, he and @pchote know more than me about icons, especially on non-windows OSes.)\r\n<hr>\r\n\r\nNow to the main part.\r\nAt first I want to describe the actual problem with mod support. At least how I see it because of my involvement in the RA2 mod development.\r\nThe expert here is probably @GraionDilach though, as he did way more code work in his AS dll.\r\n\r\n### Versioning\r\n\r\nThis is mostly an issue for mods which rely on the TS dll. The TS dll is not packaged inside the release/playtest builds, so we needed to use bleed.\r\nSimply telling people to \"just use latest bleed\" often lead to confusion, as updating the mod almost always lagged behind updates in OpenRA/OpenRA.\r\nTo circumvent that problem, the `RequiresMods:` trait was introduced. However I found it not very feasible, because of the exact reasons which caused the problem in the first place.\r\nThe engine development moved fast, as did the mod development \"these days\". It would have meant to constantly update the version definition, even if the mod yaml/code itself didn't need a change.\r\nBut I don't think this can be blamed on upstream OpenRA. It's just me being lazy and stubborn there. As I lack the time to look after the RA2 mod actively in the last months, I'm at the moment tending towards giving `RequiresMods:` a try when I find time.\r\n<hr>\r\n\r\n### Updating\r\n\r\nThe real PITA here is updating a mod to a newer OpenRA version. The utility is only of limited help. It is erasing comments, not being able to process all changes and doing other weird things. So you always have to keep track of all the changes (using git) and manually correct them. Which is kind of expected, but still annoying. The yaml changes aside, updating dll code is also very annoying.\r\nIt would of course make life at least a bit easier if you could load the dll from the OpenRA solution. Otherwise you always need to have two solutions (mod and engine) open at the same time, making both updating your code and designing/creating changes for upstream code more complicated.\r\n\r\nThe first attempt to \"solve\" this was forking OpenRA/OpenRA and just integrating the mod into the fork. But that had the side effect, that PRs broke when you updated to latest bleed (see [here](https://github.com/Phrohdoh/OpenRA/pull/53#issuecomment-162320438) and/or [here](https://github.com/Phrohdoh/OpenRA/pull/54#issuecomment-162226880)).\r\nOf course you can try to avoid this by using submodules/subtrees/... for keeping track of your mod folders. However, this still fails to help: a) You would need to keep track of three different git instances. The engine, the folder of your dll's source code and the mod's main folder (see [OpenRA2/Engine](https://github.com/OpenRA2/Engine)).\r\nb) If you want to modify OpenRA engine code directly, you still need commits living on top of the latest upstream commits, which brings us back to the rebasing issue.\r\n\r\nThe second attempt was to have a version of OpenRA/OpenRA as submodule (see [Phrohdoh/oramod-ra2](https://github.com/Phrohdoh/oramod-ra2)) which worked (and still works) nice, except that it doesn't really solve any of our issues. You can still not edit engine code easily.\r\n\r\nIn the end, I fail to see how a self-containing mod package containing only that one mod and the engine solves this issue. You would still need to somehow get your engine changes rebased onto upstream updates.\r\n<hr>\r\n\r\nConsequently it comes really down to \"This is mainly a packaging exercise [...]\". Being able to bundle individual mods as self-containing package is indeed a good idea. It is also already being done, as was pointed out several times, and properly supporting it from upstream would be great indeed.\r\nI don't see then why we need to split the default mods up and kill the modchooser, though.\r\n\r\nFinally: I think we're partly missing the goal here. I read discussions about mods \"copy pasting source code together with minor mod specific variations\". But as I tried to tell above, I fail to see how this proposal will improve the situation there. This actually doesn't really seem to have much to do with it.\r\nIt might even be a good compromise all are happy with to just provide the option (for mods) to bundle a mod + engine only package, but at the same time not force mods to use it. The benefits (I can see) are:\r\n- No need for moving engine code into \"sdk\" folders or similiar git history disturbing actions\r\n- Untangling mod code and moving it to common dlls can be continued as usual\r\n- We don't need to change much of our own mod structure, the modchooser will still work\r\n- \"Smaller\" mods can still easily build upon one of the default mods without requiring to ship an own engine\r\n- Mods using the modchooser can be accessed from the multiplayer lobby without needing to be launched at least once before\r\n- Mods who need/want it can use the script to bundle a mod + engine package where the engine can even be customized\r\n- Those packages would make them somewhat independent from our release shedule"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/272600170",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-272600170",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 272600170,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjYwMDE3MA==",
    "user": {
      "login": "samrocketman",
      "id": 875669,
      "node_id": "MDQ6VXNlcjg3NTY2OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/875669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/samrocketman",
      "html_url": "https://github.com/samrocketman",
      "followers_url": "https://api.github.com/users/samrocketman/followers",
      "following_url": "https://api.github.com/users/samrocketman/following{/other_user}",
      "gists_url": "https://api.github.com/users/samrocketman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/samrocketman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/samrocketman/subscriptions",
      "organizations_url": "https://api.github.com/users/samrocketman/orgs",
      "repos_url": "https://api.github.com/users/samrocketman/repos",
      "events_url": "https://api.github.com/users/samrocketman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/samrocketman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-14T04:07:33Z",
    "updated_at": "2017-01-14T04:15:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Mods are slaves to whatever engine version the player has installed\r\n\r\nThis sounds like the main root cause of the issue.  If you're breaking everything with each OpenRA release then why doesn't the team settle on API compatibility, maintaining backwards compatible changes, and for major architecture overhauls version the API?\r\n\r\nMaintaining a stable API and versioning it sounds like the best option.  Then, as development continues, older API versions can be deprecated over long periods of time allowing mods the opportunity to update at their pace.  New releases will be providing an older version of stable APIs with new features in the new version.  Eventually, this versioning could be used as a compatiblilty detection mechanism for loading mods and alert the user with a friendly message that the mod is incompatible rather than strange and inconsistent behavior.  It could even warn the user that the mod is getting out of date and the parts of the API it is using will soon be removed in favor of the newer APIs.\r\n\r\nThis is a problem that has been solved before...  I don't like the idea in this proposal and much prefer the mod architecture.  Just adopt better mod support with versioned APIs.\r\n\r\n----\r\n\r\nRegarding the \"icons\" complaint, this can be offloaded to an installer which can offer check boxes to create shortcuts specific to launching the mod and giving that specific shortcut an icon.  It seems like an aesthetic problem with an easy fix."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/272621838",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/12554#issuecomment-272621838",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/12554",
    "id": 272621838,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjYyMTgzOA==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-14T12:42:15Z",
    "updated_at": "2017-01-14T12:50:50Z",
    "author_association": "MEMBER",
    "body": "> why doesn't the team settle on API compatibility, maintaining backwards compatible changes, and for major architecture overhauls version the API?\r\n\r\n> A clean solution would be to modularize the game and version individual parts of it to then define dependencies.\r\n\r\nRemarks like these are frustrating because they are obvious points at a theoretical level, but when run through the constraints imposed by the .NET runtime, platform packaging conventions, and mod support desires, the approach I outline above is the most (and in many respects the *only*) practical way of achieving this.  The implication that I hadn't considered this is a bit insulting.\r\n\r\nThe engine API is narrow, relatively stable, and already provides API versioning using per-feature flags: isometric/classic cell grids, flat vs heightmapped terrain, and order-based vs z-buffer rendering are all examples of our versioned engine API.\r\n\r\nThe problem is the shared mod code.  The .NET runtime lets us load dynamic libraries into the application domain at runtime, but it *doesn't* let us unload that code.  When a player switches to another mod *the original mod's code stays in the application domain*.  We have a check to make sure that identical dlls are skipped, but the runtime will happily load custom assemblies that have duplicated class implementations and then break in unusual and difficult to reproduce ways.\r\n\r\nThe architecture of our trait code (being an entity component system) is to have many small classes that interact with many other small classes in a complicated dependency web.  There are large groups of traits that can't be broken apart, and must be considered as a group with regards to API versioning.  We can break these out into multiple assemblies, but that doesn't change the core runtime unloading problem.  There are only two options for that:\r\n\r\n* Force all traits and other mod code classes to be named uniquely across all mods and all api versions.  This would mean using trait names like Mobile-release-20161019-GraionTweaks-v4.  Not going to happen.\r\n* Allow duplicate names and solve the unloading issue by forcing a full engine restart when switching between mods (see #11813)\r\n\r\nThis second option is acceptable (however see my point below) but we still need to consider how to compile, and package each \"api version\" into a separate Mods.Common.dll (or multiple dlls) that downstream mods can include:\r\n\r\n* Copy the source of Mods.Common for each API version split and compile each assembly separately.  This is technically feasible, but the level of code duplication simply isn't acceptable.\r\n* Have the packaging check out older git tags and build the historical Mods.Common against the latest engine version.  This would be horribly fragile because any unintentional hard engine compatibility changes wouldn't be caught until packaging time, and soft compatibility changes (where the API stays the same but behaviour changes) wouldn't be caught at all.\r\n\r\nEven if one of these options were acceptable, the .NET runtime still gets in the way of guaranteeing full bacwards compatibility:\r\n* We can't add any new classes to the engine code without risking a namespace conflict with an existing mod code.\r\n* We can't change our runtime target to take advantage of newer frameworks or .NET core without breaking ABI compatibility with all older mods.  We went through this ourselves when our dependencies started switching to .NET 4.5, and it was horrible.\r\n\r\nIt simply isn't possible to build a single engine installation that provides proper backwards compatibility support for mods.  A half-arsed solution that gives only partial compatibility is not worth the effort it would take to maintain.\r\n\r\nI'll follow up on the multiple engines + mod chooser points in a future comment."
  }
]
