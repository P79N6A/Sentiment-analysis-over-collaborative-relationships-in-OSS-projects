[
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/158790439",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/10075#issuecomment-158790439",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/10075",
    "id": 158790439,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1ODc5MDQzOQ==",
    "user": {
      "login": "atlimit8",
      "id": 4957137,
      "node_id": "MDQ6VXNlcjQ5NTcxMzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4957137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/atlimit8",
      "html_url": "https://github.com/atlimit8",
      "followers_url": "https://api.github.com/users/atlimit8/followers",
      "following_url": "https://api.github.com/users/atlimit8/following{/other_user}",
      "gists_url": "https://api.github.com/users/atlimit8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/atlimit8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/atlimit8/subscriptions",
      "organizations_url": "https://api.github.com/users/atlimit8/orgs",
      "repos_url": "https://api.github.com/users/atlimit8/repos",
      "events_url": "https://api.github.com/users/atlimit8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/atlimit8/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-22T19:13:31Z",
    "updated_at": "2015-11-22T19:13:31Z",
    "author_association": "MEMBER",
    "body": "Needs to be rebased to remove merged commits. Also, MiniYaml comments should be restored after applying rule upgrades.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/158793205",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/10075#issuecomment-158793205",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/10075",
    "id": 158793205,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1ODc5MzIwNQ==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-22T19:47:59Z",
    "updated_at": "2015-11-22T19:48:23Z",
    "author_association": "MEMBER",
    "body": "This keeps a single `PlayerResources` trait and introduces resource type strings to the methods (with an internal hardcoded alias for cash -> resources), which goes against what we planned in #9872.  From discussion in IRC @scshunt plans on this as a stepping stone to splitting the traits.\n\nI don't like this approach because it means completely changing our interface to `PlayerResources` twice (with the second change undoing the first).  It is only a small extra amount of effort to the split now, which saves a lot of churn and keeps the roadmap clearer.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/158794241",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/10075#issuecomment-158794241",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/10075",
    "id": 158794241,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1ODc5NDI0MQ==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-22T20:08:03Z",
    "updated_at": "2015-11-22T20:09:41Z",
    "author_association": "MEMBER",
    "body": "If I were doing this myself, here's the steps I would follow for a smooth review and integration process:\n1. Split out the \"Silos needed\" checks and audio to its own trait (pr of its own)\n2. Split cash/resources (pr of its own) by:\n   - Introducing a `Type` field on `PlayerResourcesInfo`\n   - Adding two `PlayerResources` definitions to the player yaml, with `Type: cash` and `Type: resources`\n   - Removing all the `*Cash` methods from `PlayerResources`\n   - Replacing all the current uses of `playerActor.Trait<PlayerResources>().GiveCash()` with `playerActor.TraitsImplementing<PlayerResources>().First(t => t.Info.Type == \"cash\").GiveResources()`, and similar for resources.\n3. Add support for resource aliases to remove the hardcoded cash/resource prioritization\n4. Add Type fields to traits that interact with PlayerResources in order to support arbitrary resources.\n\nThis should bring us to a similar state as this pr (actually a bit further thanks to the aliases and finalized api), but will be much smoother to review and requires less code churn.\n"
  }
]
