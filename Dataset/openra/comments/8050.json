[
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/97045039",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8050#issuecomment-97045039",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8050",
    "id": 97045039,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3MDQ1MDM5",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-28T12:28:30Z",
    "updated_at": "2015-04-28T12:29:06Z",
    "author_association": "MEMBER",
    "body": "The VertexCache requires a bunch of changes for a relatively small win (especially compared to using a vertex buffer).  I would take a different approach here: expose a CustomSheet field in the sequences (the way this is set up means it would have to be per-sequence, but you can use the Defaults block to avoid duplication) and expose these custom named sheets from the SequenceCache. Working out how to fit this around the cache plumbing is left as an exercise for the reader.\n\nThis makes it possible for the modder to group multiple unrelated groups of sprites (such as shroud and resources) into the same sheet for efficiency, and then use vertex buffers for all of shroud / resources / smudges / etc.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/97049393",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8050#issuecomment-97049393",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8050",
    "id": 97049393,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3MDQ5Mzkz",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-28T12:45:39Z",
    "updated_at": "2015-04-28T12:45:39Z",
    "author_association": "MEMBER",
    "body": "Another idea is to have the VertexCache wrap a vertex buffer, sheet builder, and a reference to the SequenceCache.  The thing that uses it (ShroudRenderer, ResourceLayer, etc) would then interact with this to query and render sprites, instead of dealing with all the messy bits themselves.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/97051923",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8050#issuecomment-97051923",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8050",
    "id": 97051923,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3MDUxOTIz",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-28T12:55:12Z",
    "updated_at": "2015-04-28T12:55:22Z",
    "author_association": "MEMBER",
    "body": "Part three of my thinking out loud: You can make life even easier by having VertexCache wrap a Dictionary&lt;Sheet, VertexBuffer&gt;, drop all the manual sheet manipulation, and have a render pass for each sheet.  In practice we only use 2 or 3 sheets (depending on mod), so the simplicity wins should still significantly beat the perf overhead.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/97053089",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8050#issuecomment-97053089",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8050",
    "id": 97053089,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3MDUzMDg5",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-28T12:59:44Z",
    "updated_at": "2015-04-28T12:59:44Z",
    "author_association": "MEMBER",
    "body": "We could then use CellEntryChanged for tracking shroud updates, like I originally proposed and prototyped in 3c363360cd3a6fe352c7ed9828ba140aa24d11bd, drop the aggressive specialization inside the shroud/fog checks, and solve my headache about implementing heightmap-aware shroud.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/97054310",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8050#issuecomment-97054310",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8050",
    "id": 97054310,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3MDU0MzEw",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-28T13:06:45Z",
    "updated_at": "2015-04-28T13:08:27Z",
    "author_association": "MEMBER",
    "body": "If my proposed dictionary was keyed on Pair&lt;Sheet, Palette&gt; then this could also be used to remove the single-palette limitation for tilesets (requested in #3016 and by several modders over the years).  For simplicity, I suggest limiting this abstraction to rendering map-tiled quads, which makes it easy to reference and replace specific tiles.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/97956458",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8050#issuecomment-97956458",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8050",
    "id": 97956458,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3OTU2NDU4",
    "user": {
      "login": "RoosterDragon",
      "id": 3399086,
      "node_id": "MDQ6VXNlcjMzOTkwODY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3399086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RoosterDragon",
      "html_url": "https://github.com/RoosterDragon",
      "followers_url": "https://api.github.com/users/RoosterDragon/followers",
      "following_url": "https://api.github.com/users/RoosterDragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/RoosterDragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RoosterDragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RoosterDragon/subscriptions",
      "organizations_url": "https://api.github.com/users/RoosterDragon/orgs",
      "repos_url": "https://api.github.com/users/RoosterDragon/repos",
      "events_url": "https://api.github.com/users/RoosterDragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RoosterDragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-30T20:29:29Z",
    "updated_at": "2015-04-30T20:29:29Z",
    "author_association": "MEMBER",
    "body": "I gave some consideration to those suggestions. I think they were good ideas but after thinking hard about them for a while I don't think they work in practise.\n- CustomSheet in YAML:\n  I think requiring any configuration from the user is better avoided. I'd rather any performance improvements \"just worked\" without requiring people to just through hoops for them.\n- VertexCache should wrap a VertexBuffer: I liked the initial idea here but there's a wrinkle in practise. The terrain layer tend to check for shroud being obscured. With a plain array you just skip rendering those pieces. With a buffer you must explicitly unset that entry, which then also requires it to be rebuilt if it becomes revealed again. This adds some complication to the code as well as the mental model around its performance. The plain array is simpler and sufficiently good in practise for these areas (the cost of rendering from the arrays is only about 0.5%, the other 4.5% of the 5% stated in my opening description is related to looping over the visible cells and the other preamble in the loop body before getting to the actual rendering, the cost of the CellLayer/CellRegion abstractions is very high in tight loops like this).\n- Use multiple buffers, not a single sheet: The case where where everything happens to be on a single sheet is trivial with both methods, so let's talk about where things appear on multiple sheets. If we need a single sheet this requires creating a new sheet sufficiently big to hold copies of everything. Codewise there's a cost to the complexity of the method that does this. With multiple buffers we pay a memory cost to having extra buffers (which are fairly big since they cover the map and vertices are huge elements), and during rendering we pay an update cost to set the vertices into one buffer (same as the other method) but an extra cost to unset them in the other buffers. Then we also pay the cost of rendering n buffers rather than one. Codewise we then have to pay with dealing with the complexity of multiple buffers across multiple methods.\n- Shroud updating with CellEntryChanged: We're already doing this.\n- Single-palette limitation: Sounds like the job for another PR to me.\n\nI'm amenable to other suggestions if this PR still isn't striking a good enough balance between perf improvements and code quality.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/97970740",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8050#issuecomment-97970740",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8050",
    "id": 97970740,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3OTcwNzQw",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-30T21:17:23Z",
    "updated_at": "2015-04-30T21:17:23Z",
    "author_association": "MEMBER",
    "body": "My main concern/interest for this pr is that the shroud rendering code has grown into a highly performant but brittle monster that I can't easily modify.  This is a serious problem because (as we saw with my earlier prototype) I can't implement what we need for the TS shroud rendering without throwing out all of this work and perf.\n\nThese current changes appear to be going even further down the fast-in-the-exact-usecase-that-doesn't-quite-do-what-we-need path :(\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/97981714",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8050#issuecomment-97981714",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8050",
    "id": 97981714,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3OTgxNzE0",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-30T21:50:56Z",
    "updated_at": "2015-04-30T21:50:56Z",
    "author_association": "MEMBER",
    "body": "@RoosterDragon: I disagree with your second point there.  The plain array only seems simpler because you're ignoring the complicated visibility testing mechanism you have built to make it fast.  It's that visibility testing that is causing me a headache for TS, and hurts general code maintenance / understandability.\n\nMy hope was that by moving that state into the hands of the GPU you pay twice the (still cheap) cost of updating the visibility deltas each tick, but the rendering then becomes as simple as the existing `TerrainRenderer.Draw`.\n\nThe vertex data lives in GPU memory, so the cost of drawing the shroud off the sides of the screen is not significant at this stage (if it was, then your profiling would have flagged the terrain renderer as a problem).  If that does eventually become a bottleneck worth fixing, then you can win back twice (shroud + terrain) the perf  by reorganizing the vertex buffer into supertiles instead of rows and using N draw calls to cover the viewport.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/97987743",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8050#issuecomment-97987743",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8050",
    "id": 97987743,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk3OTg3NzQz",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-30T22:18:19Z",
    "updated_at": "2015-04-30T22:18:19Z",
    "author_association": "MEMBER",
    "body": "Since the IRC logs are dead with no apparent sign of return, I'll restate the issues with the visibility tests here:\n\nIn our new heightmap-enabled world, it is no longer sufficient or valid to check the uv cell coords against the viewport or map boundary rectangles.  A tile that is outside the screen / map cordon can be brought inside the region if it is high enough, and tiles that are near the top of the region can be similarly pushed outside.  If we were to keep these region tests then they will need to be modified to include extra rows below the region, and to then apply the height transformations for each individual cell.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/98001755",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8050#issuecomment-98001755",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8050",
    "id": 98001755,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk4MDAxNzU1",
    "user": {
      "login": "chrisforbes",
      "id": 128877,
      "node_id": "MDQ6VXNlcjEyODg3Nw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/128877?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chrisforbes",
      "html_url": "https://github.com/chrisforbes",
      "followers_url": "https://api.github.com/users/chrisforbes/followers",
      "following_url": "https://api.github.com/users/chrisforbes/following{/other_user}",
      "gists_url": "https://api.github.com/users/chrisforbes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chrisforbes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chrisforbes/subscriptions",
      "organizations_url": "https://api.github.com/users/chrisforbes/orgs",
      "repos_url": "https://api.github.com/users/chrisforbes/repos",
      "events_url": "https://api.github.com/users/chrisforbes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chrisforbes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-30T23:42:16Z",
    "updated_at": "2015-04-30T23:42:16Z",
    "author_association": "MEMBER",
    "body": "If the Gen2 usage is really significantly different, perhaps we want two\nimplementations.\n\nOn Fri, May 1, 2015 at 10:18 AM, Paul Chote notifications@github.com\nwrote:\n\n> Since the IRC logs are dead with no apparent sign of return, I'll restate\n> the issues with the visibility tests here:\n> \n> In our new heightmap-enabled world, it is no longer sufficient or valid to\n> check the uv cell coords against the viewport or map boundary rectangles. A\n> tile that is outside the screen / map cordon can be brought inside the\n> region if it is high enough, and tiles that are near the top of the region\n> can be similarly pushed outside. If we were to keep these region tests then\n> they will need to be modified to include extra rows below the region, and\n> to then apply the height transformations for each individual cell.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/OpenRA/OpenRA/pull/8050#issuecomment-97987743.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/98214888",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8050#issuecomment-98214888",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8050",
    "id": 98214888,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk4MjE0ODg4",
    "user": {
      "login": "RoosterDragon",
      "id": 3399086,
      "node_id": "MDQ6VXNlcjMzOTkwODY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3399086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RoosterDragon",
      "html_url": "https://github.com/RoosterDragon",
      "followers_url": "https://api.github.com/users/RoosterDragon/followers",
      "following_url": "https://api.github.com/users/RoosterDragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/RoosterDragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RoosterDragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RoosterDragon/subscriptions",
      "organizations_url": "https://api.github.com/users/RoosterDragon/orgs",
      "repos_url": "https://api.github.com/users/RoosterDragon/repos",
      "events_url": "https://api.github.com/users/RoosterDragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RoosterDragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-01T19:40:04Z",
    "updated_at": "2015-05-01T19:40:04Z",
    "author_association": "MEMBER",
    "body": "Perhaps it would be best to park this for a while until a working height-map adjusted implementation lands?\n\nEven in a world where we need to be a bit more careful about updating tiles and lose niceties like just checking the map bounds regarding cells outside the map, hopefully the underlying sentiment of only invalidating changed areas and keeping the results in a vertex buffer can be applied without trashing the code too badly.\n\nI'll reopen this with rework at such a time.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/98218344",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8050#issuecomment-98218344",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8050",
    "id": 98218344,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk4MjE4MzQ0",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-01T19:50:13Z",
    "updated_at": "2015-05-01T19:50:31Z",
    "author_association": "MEMBER",
    "body": "> Perhaps it would be best to park this for a while until a working height-map adjusted implementation lands?\n\nWe have a cyclic dependency here :(.  I can't reasonably build an acceptable height-map adjusted shroud on top of the existing ShroudRenderer code.  My proof of concept has too many performance tradeoffs to be mergeable.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/98549434",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8050#issuecomment-98549434",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8050",
    "id": 98549434,
    "node_id": "MDEyOklzc3VlQ29tbWVudDk4NTQ5NDM0",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-03T22:00:39Z",
    "updated_at": "2015-05-03T22:00:39Z",
    "author_association": "MEMBER",
    "body": "@RoosterDragon: I have put together https://github.com/pchote/OpenRA/tree/heightmap-shroud that covers most of what I was thinking about above.  Would be interested in any feedback and profiling stats that you might have.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/100375474",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8050#issuecomment-100375474",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8050",
    "id": 100375474,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDM3NTQ3NA==",
    "user": {
      "login": "RoosterDragon",
      "id": 3399086,
      "node_id": "MDQ6VXNlcjMzOTkwODY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3399086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RoosterDragon",
      "html_url": "https://github.com/RoosterDragon",
      "followers_url": "https://api.github.com/users/RoosterDragon/followers",
      "following_url": "https://api.github.com/users/RoosterDragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/RoosterDragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RoosterDragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RoosterDragon/subscriptions",
      "organizations_url": "https://api.github.com/users/RoosterDragon/orgs",
      "repos_url": "https://api.github.com/users/RoosterDragon/repos",
      "events_url": "https://api.github.com/users/RoosterDragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RoosterDragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-08T21:38:51Z",
    "updated_at": "2015-05-08T21:38:51Z",
    "author_association": "MEMBER",
    "body": "I have used that as a basis for implementing this: https://github.com/RoosterDragon/OpenRA/tree/shroud-subclass. This creates two derived classes of a now abstract Shroud, one for each shape. Hopefully this isolates the perf regression into the isometric shroud.\n\nI have some inline commentary against functions you wrote that have now moved into the `DiamondShroud` class.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/100397733",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8050#issuecomment-100397733",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8050",
    "id": 100397733,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDM5NzczMw==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-09T00:20:27Z",
    "updated_at": "2015-05-09T00:20:27Z",
    "author_association": "MEMBER",
    "body": "We need to be careful with this, as there is no reason why somebody couldn't implement a mod that uses heightmaps with the classic tile shape.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/100535342",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8050#issuecomment-100535342",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8050",
    "id": 100535342,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMDUzNTM0Mg==",
    "user": {
      "login": "RoosterDragon",
      "id": 3399086,
      "node_id": "MDQ6VXNlcjMzOTkwODY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3399086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RoosterDragon",
      "html_url": "https://github.com/RoosterDragon",
      "followers_url": "https://api.github.com/users/RoosterDragon/followers",
      "following_url": "https://api.github.com/users/RoosterDragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/RoosterDragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RoosterDragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RoosterDragon/subscriptions",
      "organizations_url": "https://api.github.com/users/RoosterDragon/orgs",
      "repos_url": "https://api.github.com/users/RoosterDragon/repos",
      "events_url": "https://api.github.com/users/RoosterDragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RoosterDragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-09T19:38:04Z",
    "updated_at": "2015-05-09T19:38:04Z",
    "author_association": "MEMBER",
    "body": "Perhaps we could do a check of the heights on creation, usingthe specialized rectangular flat one if everything has zero height and having a second one that handles heightmaps on both rectangular and diamond tiles.\n"
  }
]
