[
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/355368800",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/13288#issuecomment-355368800",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13288",
    "id": 355368800,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTM2ODgwMA==",
    "user": {
      "login": "GSonderling",
      "id": 10141866,
      "node_id": "MDQ6VXNlcjEwMTQxODY2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10141866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GSonderling",
      "html_url": "https://github.com/GSonderling",
      "followers_url": "https://api.github.com/users/GSonderling/followers",
      "following_url": "https://api.github.com/users/GSonderling/following{/other_user}",
      "gists_url": "https://api.github.com/users/GSonderling/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GSonderling/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GSonderling/subscriptions",
      "organizations_url": "https://api.github.com/users/GSonderling/orgs",
      "repos_url": "https://api.github.com/users/GSonderling/repos",
      "events_url": "https://api.github.com/users/GSonderling/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GSonderling/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-04T19:02:10Z",
    "updated_at": "2018-01-04T19:02:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "The issue seems to be in\r\nhttps://github.com/OpenRA/OpenRA/blob/9f8ebdce4243b723ccbf7881c0796118874f8958/OpenRA.Mods.Common/AI/HackyAI.cs#L1246\r\n\r\nDoes anyone know why is the condition written in **this** way? Because, unless I read this wrong. The AI will only repair structures that suffer more than light damage, but **only if** they were lightly damaged already.\r\n\r\nWouldn't it be better to have something like this instead:\r\n`if (e.DamageState > DamageState.Light && !rb.RepairActive)`\r\n\r\nSo that structures get repaired, no matter their previous state?"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/355392688",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/13288#issuecomment-355392688",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13288",
    "id": 355392688,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTM5MjY4OA==",
    "user": {
      "login": "MustaphaTR",
      "id": 7933210,
      "node_id": "MDQ6VXNlcjc5MzMyMTA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7933210?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MustaphaTR",
      "html_url": "https://github.com/MustaphaTR",
      "followers_url": "https://api.github.com/users/MustaphaTR/followers",
      "following_url": "https://api.github.com/users/MustaphaTR/following{/other_user}",
      "gists_url": "https://api.github.com/users/MustaphaTR/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MustaphaTR/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MustaphaTR/subscriptions",
      "organizations_url": "https://api.github.com/users/MustaphaTR/orgs",
      "repos_url": "https://api.github.com/users/MustaphaTR/repos",
      "events_url": "https://api.github.com/users/MustaphaTR/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MustaphaTR/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-04T20:40:40Z",
    "updated_at": "2018-01-04T20:40:40Z",
    "author_association": "MEMBER",
    "body": "D2K may be the reason. AI there intentedly don't repair the buildings, as it doesn't use concrete and would enter a repair-get damaged loop wasting cash for no reason due to damage from terrain."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/355425210",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/13288#issuecomment-355425210",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13288",
    "id": 355425210,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTQyNTIxMA==",
    "user": {
      "login": "GSonderling",
      "id": 10141866,
      "node_id": "MDQ6VXNlcjEwMTQxODY2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10141866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GSonderling",
      "html_url": "https://github.com/GSonderling",
      "followers_url": "https://api.github.com/users/GSonderling/followers",
      "following_url": "https://api.github.com/users/GSonderling/following{/other_user}",
      "gists_url": "https://api.github.com/users/GSonderling/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GSonderling/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GSonderling/subscriptions",
      "organizations_url": "https://api.github.com/users/GSonderling/orgs",
      "repos_url": "https://api.github.com/users/GSonderling/repos",
      "events_url": "https://api.github.com/users/GSonderling/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GSonderling/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-04T23:07:19Z",
    "updated_at": "2018-01-04T23:07:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "I suppose that does make sense. Although not really, the method in question is only used if unit is attacked.\r\nSo the loop would only get activated in case of attack on the building.\r\n\r\nI did some testing in that regard.\r\nIt is true that if the structures are attacked, the AI gets overzealous with the repairs and continues to repair the structures even after it gets past 50%. But once the structure is repaired to that level the AI stops and lets nature take it's course (the health drops slowly back to 50%).\r\n\r\nNow it is true that it means some wasted money, but not so much as to cripple other production.\r\n\r\nOn the other hand with original condition the AI rarely repairs structures at all.\r\n\r\n\r\nNevertheless, the condition could be adjusted to:\r\n`if (e.DamageState > DamageState.Medium && !rb.RepairActive)`\r\n To get around this."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/355575002",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/13288#issuecomment-355575002",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13288",
    "id": 355575002,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTU3NTAwMg==",
    "user": {
      "login": "GSonderling",
      "id": 10141866,
      "node_id": "MDQ6VXNlcjEwMTQxODY2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10141866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GSonderling",
      "html_url": "https://github.com/GSonderling",
      "followers_url": "https://api.github.com/users/GSonderling/followers",
      "following_url": "https://api.github.com/users/GSonderling/following{/other_user}",
      "gists_url": "https://api.github.com/users/GSonderling/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GSonderling/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GSonderling/subscriptions",
      "organizations_url": "https://api.github.com/users/GSonderling/orgs",
      "repos_url": "https://api.github.com/users/GSonderling/repos",
      "events_url": "https://api.github.com/users/GSonderling/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GSonderling/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T15:00:48Z",
    "updated_at": "2018-01-05T15:00:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "So I compared two versions and it seems that my approach has few advantages even in D2K.\r\n\r\n1. Right now the AI doesn't repair structures at all. With exception of Construction yard. \r\nThis means that eventually its base will be filled with heavily damaged structures and become easy target for a bombing run.\r\n\r\n2. The Windtraps usually soak up most of the damage. And just like other buildings, are not repaired at all. However their power production scales with health. Therefore the damaged Windtraps turn into a burden, blocking new construction and providing less power.\r\n\r\n3. Money saved by AI not repairing structures is instead spend on building new ones when the old finally collapse. Nothing is saved, instead the production gets a hit when Windtraps or Factory blow up."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/355576043",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/13288#issuecomment-355576043",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13288",
    "id": 355576043,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTU3NjA0Mw==",
    "user": {
      "login": "MustaphaTR",
      "id": 7933210,
      "node_id": "MDQ6VXNlcjc5MzMyMTA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7933210?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MustaphaTR",
      "html_url": "https://github.com/MustaphaTR",
      "followers_url": "https://api.github.com/users/MustaphaTR/followers",
      "following_url": "https://api.github.com/users/MustaphaTR/following{/other_user}",
      "gists_url": "https://api.github.com/users/MustaphaTR/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MustaphaTR/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MustaphaTR/subscriptions",
      "organizations_url": "https://api.github.com/users/MustaphaTR/orgs",
      "repos_url": "https://api.github.com/users/MustaphaTR/repos",
      "events_url": "https://api.github.com/users/MustaphaTR/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MustaphaTR/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T15:04:49Z",
    "updated_at": "2018-01-05T15:04:49Z",
    "author_association": "MEMBER",
    "body": "Sounds good for D2K, i think it would be better if we just move when the repairs start to .yaml. So we can use medium on D2K, but keep it at light for other mods. Would be a better fix."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/355577125",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/13288#issuecomment-355577125",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13288",
    "id": 355577125,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTU3NzEyNQ==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T15:09:03Z",
    "updated_at": "2018-01-05T15:09:12Z",
    "author_association": "MEMBER",
    "body": "Another option is to use `GrantConditionOnBotOwner` to grant a condition that disables the building weathering feature for the AI.  HackyAI will never be able to support concrete placement, and we still have no real momentum towards a modular AI that could support it, so having it \"cheat\" in this case seems the better alternative."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/355580912",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/13288#issuecomment-355580912",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13288",
    "id": 355580912,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTU4MDkxMg==",
    "user": {
      "login": "GSonderling",
      "id": 10141866,
      "node_id": "MDQ6VXNlcjEwMTQxODY2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10141866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GSonderling",
      "html_url": "https://github.com/GSonderling",
      "followers_url": "https://api.github.com/users/GSonderling/followers",
      "following_url": "https://api.github.com/users/GSonderling/following{/other_user}",
      "gists_url": "https://api.github.com/users/GSonderling/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GSonderling/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GSonderling/subscriptions",
      "organizations_url": "https://api.github.com/users/GSonderling/orgs",
      "repos_url": "https://api.github.com/users/GSonderling/repos",
      "events_url": "https://api.github.com/users/GSonderling/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GSonderling/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T15:23:44Z",
    "updated_at": "2018-01-05T15:23:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Sounds good for D2K, i think it would be better if we just move when the repairs start to .yaml. So we can use medium on D2K, but keep it at light for other mods. Would be a better fix.\r\n\r\nI thought so too, but unfortunately wouldn't work. Once the AI starts repairs they will continue until building reaches 100%. Only at that point it stops. After the health starts dropping the AI doesn't care, because the \"attacker\" is just ground. Only if the buildings are attacked by other players the AI initiates repair.\r\n\r\n>Another option is to use GrantConditionOnBotOwner to grant a condition that disables the building weathering feature for the AI. HackyAI will never be able to support concrete placement, and we still have no real momentum towards a modular AI that could support it, so having it \"cheat\" in this case seems better than the alternative.\r\n\r\nThis could work, but it would have much larger effects. The AI repairs buildings until they reach 100%. So  over time the AI could get massive advantage over the player. Furthermore the health of Windtraps affects their power production, another advantage for now cheating AI.\r\n\r\n\r\nI did run some tests and it looks like repairing AI actually works better than the original.\r\n\r\nI used 3 Player map, with each bot personality represented, fastest game speed, largest funds, heavy support. \r\n\r\nThe match took about 25 minutes with original and about 12 minutes with adjusted \"repairing\" AI. \r\n\r\nI'm not sure how it would fare against player, but I can tell you right now that it isn't really impaired when fighting against itself.\r\n\r\nI will conduct more tests, pitting the adjusted AI against original one, and I will get back with results."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/355587594",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/13288#issuecomment-355587594",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13288",
    "id": 355587594,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTU4NzU5NA==",
    "user": {
      "login": "MustaphaTR",
      "id": 7933210,
      "node_id": "MDQ6VXNlcjc5MzMyMTA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7933210?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MustaphaTR",
      "html_url": "https://github.com/MustaphaTR",
      "followers_url": "https://api.github.com/users/MustaphaTR/followers",
      "following_url": "https://api.github.com/users/MustaphaTR/following{/other_user}",
      "gists_url": "https://api.github.com/users/MustaphaTR/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MustaphaTR/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MustaphaTR/subscriptions",
      "organizations_url": "https://api.github.com/users/MustaphaTR/orgs",
      "repos_url": "https://api.github.com/users/MustaphaTR/repos",
      "events_url": "https://api.github.com/users/MustaphaTR/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MustaphaTR/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T15:49:19Z",
    "updated_at": "2018-01-05T16:07:25Z",
    "author_association": "MEMBER",
    "body": "Actually that doesn't look like fixing the actual issue here from what i tested. I think the expected behaviour would be that AI would start repairing the MCV right after it is deployed.\r\n\r\nAlso it doesn't look like damage from terrain trigger INotifyDamage/building repair. So just removing `e.PreviousDamageState <= DamageState.Light` makes d2k AI properly repair when attacked by player, no need to change `Light` to `Medium`. Maybe i was wrong that `e.PreviousDamageState <= DamageState.Light` was for D2k AI. I'll check the commit history.\r\n\r\nEdit: Yes, `e.PreviousDamageState <= DamageState.Light` was there since AI Building Repairs were added. \r\n\r\nEdit 2: This was the commit that made D2K AI don't care about terrain damage: https://github.com/OpenRA/OpenRA/pull/6250/commits/1375e56a32929c1ddecd1ec46df7878f3a7e5e7c"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/355593419",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/13288#issuecomment-355593419",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13288",
    "id": 355593419,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTU5MzQxOQ==",
    "user": {
      "login": "GSonderling",
      "id": 10141866,
      "node_id": "MDQ6VXNlcjEwMTQxODY2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10141866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GSonderling",
      "html_url": "https://github.com/GSonderling",
      "followers_url": "https://api.github.com/users/GSonderling/followers",
      "following_url": "https://api.github.com/users/GSonderling/following{/other_user}",
      "gists_url": "https://api.github.com/users/GSonderling/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GSonderling/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GSonderling/subscriptions",
      "organizations_url": "https://api.github.com/users/GSonderling/orgs",
      "repos_url": "https://api.github.com/users/GSonderling/repos",
      "events_url": "https://api.github.com/users/GSonderling/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GSonderling/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T16:10:14Z",
    "updated_at": "2018-01-05T16:10:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hmm, you are right.\r\n\r\nVery well, I suppose that the best option would be to separate the repair logic from the damage logic. "
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/355593501",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/13288#issuecomment-355593501",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13288",
    "id": 355593501,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTU5MzUwMQ==",
    "user": {
      "login": "MustaphaTR",
      "id": 7933210,
      "node_id": "MDQ6VXNlcjc5MzMyMTA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7933210?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MustaphaTR",
      "html_url": "https://github.com/MustaphaTR",
      "followers_url": "https://api.github.com/users/MustaphaTR/followers",
      "following_url": "https://api.github.com/users/MustaphaTR/following{/other_user}",
      "gists_url": "https://api.github.com/users/MustaphaTR/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MustaphaTR/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MustaphaTR/subscriptions",
      "organizations_url": "https://api.github.com/users/MustaphaTR/orgs",
      "repos_url": "https://api.github.com/users/MustaphaTR/repos",
      "events_url": "https://api.github.com/users/MustaphaTR/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MustaphaTR/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T16:10:30Z",
    "updated_at": "2018-01-05T16:10:30Z",
    "author_association": "MEMBER",
    "body": "> Another option is to use GrantConditionOnBotOwner to grant a condition that disables the building weathering feature for the AI. HackyAI will never be able to support concrete placement, and we still have no real momentum towards a modular AI that could support it, so having it \"cheat\" in this case seems the better alternative.\r\n\r\nA better solution (just for better polishing, either would be almost same for gameplay) may be to make LaysTerrain Conditional and AI buildings come with concrete. I think would look better than them not getting damage even tho not having concrete below."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/355594014",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/13288#issuecomment-355594014",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13288",
    "id": 355594014,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTU5NDAxNA==",
    "user": {
      "login": "MustaphaTR",
      "id": 7933210,
      "node_id": "MDQ6VXNlcjc5MzMyMTA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7933210?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MustaphaTR",
      "html_url": "https://github.com/MustaphaTR",
      "followers_url": "https://api.github.com/users/MustaphaTR/followers",
      "following_url": "https://api.github.com/users/MustaphaTR/following{/other_user}",
      "gists_url": "https://api.github.com/users/MustaphaTR/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MustaphaTR/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MustaphaTR/subscriptions",
      "organizations_url": "https://api.github.com/users/MustaphaTR/orgs",
      "repos_url": "https://api.github.com/users/MustaphaTR/repos",
      "events_url": "https://api.github.com/users/MustaphaTR/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MustaphaTR/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T16:12:15Z",
    "updated_at": "2018-01-05T16:12:39Z",
    "author_association": "MEMBER",
    "body": "> Very well, I suppose that the best option would be to separate the repair logic from the damage logic.\r\n\r\nI think reason why repair logic is checking INotifyDamage (and not checking health) is performance resons, which is pretty vaild. Checking Health every tick would hurt performance. But maybe we can make it check health every once in a while.\r\n  "
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/355602343",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/13288#issuecomment-355602343",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13288",
    "id": 355602343,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTYwMjM0Mw==",
    "user": {
      "login": "GSonderling",
      "id": 10141866,
      "node_id": "MDQ6VXNlcjEwMTQxODY2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10141866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GSonderling",
      "html_url": "https://github.com/GSonderling",
      "followers_url": "https://api.github.com/users/GSonderling/followers",
      "following_url": "https://api.github.com/users/GSonderling/following{/other_user}",
      "gists_url": "https://api.github.com/users/GSonderling/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GSonderling/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GSonderling/subscriptions",
      "organizations_url": "https://api.github.com/users/GSonderling/orgs",
      "repos_url": "https://api.github.com/users/GSonderling/repos",
      "events_url": "https://api.github.com/users/GSonderling/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GSonderling/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T16:42:07Z",
    "updated_at": "2018-01-05T16:42:07Z",
    "author_association": "CONTRIBUTOR",
    "body": ">I think reason why repair logic is checking INotifyDamage (and not checking health) is performance resons, which is pretty vaild. Checking Health every tick would hurt performance.\r\n\r\nProbably. This is an edge case after all.\r\n\r\nWe could check for damage with longer period, or just during the deployment of Construction yard."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/355606894",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/13288#issuecomment-355606894",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13288",
    "id": 355606894,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTYwNjg5NA==",
    "user": {
      "login": "GSonderling",
      "id": 10141866,
      "node_id": "MDQ6VXNlcjEwMTQxODY2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10141866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GSonderling",
      "html_url": "https://github.com/GSonderling",
      "followers_url": "https://api.github.com/users/GSonderling/followers",
      "following_url": "https://api.github.com/users/GSonderling/following{/other_user}",
      "gists_url": "https://api.github.com/users/GSonderling/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GSonderling/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GSonderling/subscriptions",
      "organizations_url": "https://api.github.com/users/GSonderling/orgs",
      "repos_url": "https://api.github.com/users/GSonderling/repos",
      "events_url": "https://api.github.com/users/GSonderling/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GSonderling/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T16:58:53Z",
    "updated_at": "2018-01-05T16:58:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "But this is sloppy. I will need to rethink this."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/355621610",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/13288#issuecomment-355621610",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13288",
    "id": 355621610,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTYyMTYxMA==",
    "user": {
      "login": "GSonderling",
      "id": 10141866,
      "node_id": "MDQ6VXNlcjEwMTQxODY2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10141866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GSonderling",
      "html_url": "https://github.com/GSonderling",
      "followers_url": "https://api.github.com/users/GSonderling/followers",
      "following_url": "https://api.github.com/users/GSonderling/following{/other_user}",
      "gists_url": "https://api.github.com/users/GSonderling/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GSonderling/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GSonderling/subscriptions",
      "organizations_url": "https://api.github.com/users/GSonderling/orgs",
      "repos_url": "https://api.github.com/users/GSonderling/repos",
      "events_url": "https://api.github.com/users/GSonderling/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GSonderling/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-05T17:58:00Z",
    "updated_at": "2018-01-05T17:58:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "So, after some consideration I came up with two solutions:\r\n\r\n1. Remake the repair system from scratch. It would take time and few new methods. But it could make AI less wasteful and take into account the amount of damage done to buildings.\r\n\r\n2. Check if the mcv is damaged, before deploynment. If it is, put repair order in queue. This would take much less effort, but it relies on this issue being present only in mcvs/construction yards. Otherwise we would need something more general, viz point 1.  "
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/355815208",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/13288#issuecomment-355815208",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13288",
    "id": 355815208,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTgxNTIwOA==",
    "user": {
      "login": "GSonderling",
      "id": 10141866,
      "node_id": "MDQ6VXNlcjEwMTQxODY2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10141866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GSonderling",
      "html_url": "https://github.com/GSonderling",
      "followers_url": "https://api.github.com/users/GSonderling/followers",
      "following_url": "https://api.github.com/users/GSonderling/following{/other_user}",
      "gists_url": "https://api.github.com/users/GSonderling/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GSonderling/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GSonderling/subscriptions",
      "organizations_url": "https://api.github.com/users/GSonderling/orgs",
      "repos_url": "https://api.github.com/users/GSonderling/repos",
      "events_url": "https://api.github.com/users/GSonderling/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GSonderling/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-07T11:17:36Z",
    "updated_at": "2018-01-07T11:17:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Considering the above.\r\n\r\nOption 1. seems to be off the table. There isn't a way (correct me if I'm wrong) to reference not-yet-existing unit in the order. Therefore, checking for damage before the mcv deploys and issuing repair order isn't going to cut it.\r\n\r\nOption 2. is still possible, however it would be costly in both time and code. Considering how long reviews take, I don't think it's a good idea either. \r\n\r\n\r\nSo it comes down to one final possibility.\r\n\r\nhttps://github.com/GSonderling/OpenRA/blob/95044ef7046c8bba978a80cb0ca59eaa134921b5/OpenRA.Mods.Common/AI/HackyAI.cs#L1273-L1282\r\n\r\nThe method is selfexplanatory. \r\n\r\nIt circumvents existing damage check and repairs building if needed.\r\nIt is also called from only one place in code and only for one (first) Construction yard.\r\nhttps://github.com/GSonderling/OpenRA/blob/95044ef7046c8bba978a80cb0ca59eaa134921b5/OpenRA.Mods.Common/AI/HackyAI.cs#L1189-L1190\r\nBecause of that it has no detectable impact on performance. \r\n\r\nIn my opinion, keeping Construction yard in good shape, should be a priority for AI one way or another.\r\n\r\n\r\nTheoretically, I could also use existing `Damaged()` method with some token `AttackInfo` to achieve same effect.\r\n\r\nBut it could be rather confusing for anyone reading the code at later date. \r\n\r\nHonestly, I would understand if team drops this issue. It isn't that critical and solutions seem to be rather overcomplicated."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/355816615",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/13288#issuecomment-355816615",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13288",
    "id": 355816615,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTgxNjYxNQ==",
    "user": {
      "login": "GraionDilach",
      "id": 1136302,
      "node_id": "MDQ6VXNlcjExMzYzMDI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1136302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GraionDilach",
      "html_url": "https://github.com/GraionDilach",
      "followers_url": "https://api.github.com/users/GraionDilach/followers",
      "following_url": "https://api.github.com/users/GraionDilach/following{/other_user}",
      "gists_url": "https://api.github.com/users/GraionDilach/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GraionDilach/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GraionDilach/subscriptions",
      "organizations_url": "https://api.github.com/users/GraionDilach/orgs",
      "repos_url": "https://api.github.com/users/GraionDilach/repos",
      "events_url": "https://api.github.com/users/GraionDilach/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GraionDilach/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-07T11:45:28Z",
    "updated_at": "2018-01-07T11:45:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'd like to mention that I tend to see AI games in AS where the AI just doesn't bother with repairing a particular building - the aforementioned check harms my AI in scenarios. I'd really just drop the damage check and then go with the aforementioned cheating D2k AI method."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/355845911",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/13288#issuecomment-355845911",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13288",
    "id": 355845911,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTg0NTkxMQ==",
    "user": {
      "login": "GSonderling",
      "id": 10141866,
      "node_id": "MDQ6VXNlcjEwMTQxODY2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/10141866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GSonderling",
      "html_url": "https://github.com/GSonderling",
      "followers_url": "https://api.github.com/users/GSonderling/followers",
      "following_url": "https://api.github.com/users/GSonderling/following{/other_user}",
      "gists_url": "https://api.github.com/users/GSonderling/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GSonderling/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GSonderling/subscriptions",
      "organizations_url": "https://api.github.com/users/GSonderling/orgs",
      "repos_url": "https://api.github.com/users/GSonderling/repos",
      "events_url": "https://api.github.com/users/GSonderling/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GSonderling/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-07T19:27:17Z",
    "updated_at": "2018-01-07T19:27:17Z",
    "author_association": "CONTRIBUTOR",
    "body": ">I'd like to mention that I tend to see AI games in AS where the AI just doesn't bother with repairing a particular building - the aforementioned check harms my AI in scenarios. I'd really just drop the damage check and then go with the aforementioned cheating D2k AI method.\r\n\r\nIn that case we can drop this issue completely. There is no point in coding stuff that will just break something down the road. The issue is literally about AI **not** repairing the buildings, or rather, one specific building.\r\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/455808022",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/13288#issuecomment-455808022",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13288",
    "id": 455808022,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTgwODAyMg==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-19T19:24:38Z",
    "updated_at": "2019-01-19T19:24:38Z",
    "author_association": "MEMBER",
    "body": "@reaperrr did your AI modularization fix this?"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/455869147",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/13288#issuecomment-455869147",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13288",
    "id": 455869147,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NTg2OTE0Nw==",
    "user": {
      "login": "reaperrr",
      "id": 2857877,
      "node_id": "MDQ6VXNlcjI4NTc4Nzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2857877?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reaperrr",
      "html_url": "https://github.com/reaperrr",
      "followers_url": "https://api.github.com/users/reaperrr/followers",
      "following_url": "https://api.github.com/users/reaperrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/reaperrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reaperrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reaperrr/subscriptions",
      "organizations_url": "https://api.github.com/users/reaperrr/orgs",
      "repos_url": "https://api.github.com/users/reaperrr/repos",
      "events_url": "https://api.github.com/users/reaperrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reaperrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-20T14:04:27Z",
    "updated_at": "2019-01-20T14:04:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "I haven't checked, but AI repairs are currently only triggered on receiving damage, so the answer should be no."
  }
]
