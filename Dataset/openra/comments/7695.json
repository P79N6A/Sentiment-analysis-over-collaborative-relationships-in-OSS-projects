[
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/84332796",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-84332796",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 84332796,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MzMyNzk2",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-21T13:10:22Z",
    "updated_at": "2015-03-21T13:10:56Z",
    "author_association": "MEMBER",
    "body": "Querying every actor at every WPos along the line is a really inefficient way to do this.\n\nIt would be much more efficient to:\n1. Found all the cells that the line could potentially pass through.\n2. Query all the actors in these cells.\n3. Test line-actor collision for each actor in these cells:\n   1. For walls it is sufficient to know that it passes through the footprint (no extra work needed).\n   2. Use a geometric line-circle intersection test against the health radius for line projectiles.\n\nThis is the same procedure I had been attempting to explain in IRC over the last week.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/84374089",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-84374089",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 84374089,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0Mzc0MDg5",
    "user": {
      "login": "Unit158",
      "id": 706008,
      "node_id": "MDQ6VXNlcjcwNjAwOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/706008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Unit158",
      "html_url": "https://github.com/Unit158",
      "followers_url": "https://api.github.com/users/Unit158/followers",
      "following_url": "https://api.github.com/users/Unit158/following{/other_user}",
      "gists_url": "https://api.github.com/users/Unit158/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Unit158/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Unit158/subscriptions",
      "organizations_url": "https://api.github.com/users/Unit158/orgs",
      "repos_url": "https://api.github.com/users/Unit158/repos",
      "events_url": "https://api.github.com/users/Unit158/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Unit158/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-21T15:38:46Z",
    "updated_at": "2015-03-21T15:38:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Querying every actor at every WPos along the line is a really inefficient way to do this.\n\nThankfully this code doesn't do this. I'll remove the WPos function after running some performance tests and implement the line-circle collision.\nOn 2015-03-21, at 9:10 AM, Paul Chote notifications@github.com wrote:\n\n> Querying every actor at every WPos along the line is a really inefficient way to do this.\n> \n> It would be much more efficient to:\n> \n> Found all the cells that the line could potentially pass through.\n> Query all the actors in these cells.\n> Test line-actor collision for each actor in these cells:\n> For walls it is sufficient to know that it passes through the footprint.\n> Use a geometric line-circle intersection test for line projectiles.\n> This is the same procedure I had been attempting to explain in IRC over the last week.\n> \n> \\\n> Reply to this email directly or view it on GitHub.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/84625906",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-84625906",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 84625906,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NjI1OTA2",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-22T14:56:51Z",
    "updated_at": "2015-03-22T14:56:51Z",
    "author_association": "MEMBER",
    "body": "> Checking for code style violations in OpenRA.Game...\n> OpenRA.Game/Traits/World/ActorMap.cs:L544: [SP2000] Invalid spacing at the end of the line.\n> make: **\\* [check] Error 1\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/84873797",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-84873797",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 84873797,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0ODczNzk3",
    "user": {
      "login": "Rydra",
      "id": 5826108,
      "node_id": "MDQ6VXNlcjU4MjYxMDg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5826108?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rydra",
      "html_url": "https://github.com/Rydra",
      "followers_url": "https://api.github.com/users/Rydra/followers",
      "following_url": "https://api.github.com/users/Rydra/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rydra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rydra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rydra/subscriptions",
      "organizations_url": "https://api.github.com/users/Rydra/orgs",
      "repos_url": "https://api.github.com/users/Rydra/repos",
      "events_url": "https://api.github.com/users/Rydra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rydra/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-23T08:05:45Z",
    "updated_at": "2015-03-23T08:24:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Unit158 given that you just use RayCast on CPos and the signature is the same as the algorithm I provided in the Unit tests (and it's shorter), could you run a performance measurement? Just curious about how do both implementations compare.\n\nBesides, I've run a small unit test compared to the algorithm I implemented, and there are some differences in results that should be studied. This is the algorithm I implemented.\n\n```\n    public IEnumerable<CPos> RayCast(CPos source, CPos target)\n    {\n        int dx = Math.Abs(target.X - source.X);\n        int dy = Math.Abs(target.Y - source.Y);\n        int x = source.X;\n        int y = source.Y;\n        int n = 1 + dx + dy;\n        int x_inc = (target.X > source.X) ? 1 : -1;\n        int y_inc = (target.Y > source.Y) ? 1 : -1;\n        int error = dx - dy;\n        dx *= 2;\n        dy *= 2;\n\n        for (; n > 0; --n)\n        {\n            yield return new CPos(x, y);\n\n            if (error > 0)\n            {\n                x += x_inc;\n                error -= dy;\n            }\n            else\n            {\n                y += y_inc;\n                error += dx;\n            }\n        }\n    }\n```\n\nFor a source of 1, 3 and a target of 0, 0, your algorithm returns the points 1,3, 1,2, 0,1, 0,0, while mine returns the points 1,3, 1,2, 1,1, 0,1, 0,0 (note the 1, 1). \n\nFor a source of 2, 4 and a target of 0, 0 your algorithm returns 2,4, 1,3, 1,2, 0,1, 0,0 while mine returns 2,4, 2,3, 1,3, 1,2, 1,1, 0,1, 0,0. I've taken a drawing application just to test what's wrong and it seems that your solution may have issues (because it looks like it indeed crosses point 2, 3.\n\nCould you check it out please?\n\nWrite this is the PathfinderTests.cs file and try it. Copy and paste the two algorithms in the file as well so you can compare them:\n\n```\n    [Test]\n    public void RayCastingTest()\n    {\n        // Arrange\n        var sut = new RayCaster();\n        CPos source = new CPos(2, 4);\n        CPos target = new CPos(0, 0);\n\n        // Act\n        var a = Stopwatch.StartNew();\n\n        var a1 = sut.RayCast(source, target).ToList();\n        Console.WriteLine(\"Took \" + a.ElapsedMilliseconds);\n\n        a = Stopwatch.StartNew();\n\n        var a2 = sut.Raycast2(source, target).ToList();\n        Console.WriteLine(\"Took \" + a.ElapsedMilliseconds);\n        // Assert\n        CollectionAssert.AreEquivalent(a1, a2);\n    }\n```\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/84918127",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-84918127",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 84918127,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTE4MTI3",
    "user": {
      "login": "penev92",
      "id": 7137365,
      "node_id": "MDQ6VXNlcjcxMzczNjU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7137365?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/penev92",
      "html_url": "https://github.com/penev92",
      "followers_url": "https://api.github.com/users/penev92/followers",
      "following_url": "https://api.github.com/users/penev92/following{/other_user}",
      "gists_url": "https://api.github.com/users/penev92/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/penev92/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/penev92/subscriptions",
      "organizations_url": "https://api.github.com/users/penev92/orgs",
      "repos_url": "https://api.github.com/users/penev92/repos",
      "events_url": "https://api.github.com/users/penev92/events{/privacy}",
      "received_events_url": "https://api.github.com/users/penev92/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-23T09:49:32Z",
    "updated_at": "2015-03-23T09:49:32Z",
    "author_association": "MEMBER",
    "body": "That is one of the reasons we need a way to specify \"ray\" width. At this point I'll assume both algorithms are correct, but neither one considers the \"ray\"'s width, and they just assume different values for it, because they have no concept of what that is.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/84954111",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-84954111",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 84954111,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0OTU0MTEx",
    "user": {
      "login": "Rydra",
      "id": 5826108,
      "node_id": "MDQ6VXNlcjU4MjYxMDg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5826108?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rydra",
      "html_url": "https://github.com/Rydra",
      "followers_url": "https://api.github.com/users/Rydra/followers",
      "following_url": "https://api.github.com/users/Rydra/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rydra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rydra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rydra/subscriptions",
      "organizations_url": "https://api.github.com/users/Rydra/orgs",
      "repos_url": "https://api.github.com/users/Rydra/repos",
      "events_url": "https://api.github.com/users/Rydra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rydra/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-23T11:13:35Z",
    "updated_at": "2015-03-23T11:13:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "Adding a width to the line shouldn't be hard hopefully because it's an offset based on an angle. Having the straight line makes it easier. Just iterate over the resulting points and extend it with the width.\n\nWith unit tests to help checking this behaviour it should be a breeze.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/85209567",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-85209567",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 85209567,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MjA5NTY3",
    "user": {
      "login": "Unit158",
      "id": 706008,
      "node_id": "MDQ6VXNlcjcwNjAwOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/706008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Unit158",
      "html_url": "https://github.com/Unit158",
      "followers_url": "https://api.github.com/users/Unit158/followers",
      "following_url": "https://api.github.com/users/Unit158/following{/other_user}",
      "gists_url": "https://api.github.com/users/Unit158/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Unit158/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Unit158/subscriptions",
      "organizations_url": "https://api.github.com/users/Unit158/orgs",
      "repos_url": "https://api.github.com/users/Unit158/repos",
      "events_url": "https://api.github.com/users/Unit158/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Unit158/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-23T21:44:10Z",
    "updated_at": "2015-03-23T21:46:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Your output was actually wrong. It graphed the line incorrectly (it would add an extra cell when the error was zero, instead of stepping twice at once). Try using a 45 degree input, it will add many cells. I double checked with a graphing calculator (manually noting where the line intersected), the vector [2,4] should only output 5 results.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/85216686",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-85216686",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 85216686,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MjE2Njg2",
    "user": {
      "login": "Rydra",
      "id": 5826108,
      "node_id": "MDQ6VXNlcjU4MjYxMDg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5826108?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rydra",
      "html_url": "https://github.com/Rydra",
      "followers_url": "https://api.github.com/users/Rydra/followers",
      "following_url": "https://api.github.com/users/Rydra/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rydra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rydra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rydra/subscriptions",
      "organizations_url": "https://api.github.com/users/Rydra/orgs",
      "repos_url": "https://api.github.com/users/Rydra/repos",
      "events_url": "https://api.github.com/users/Rydra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rydra/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-23T21:52:22Z",
    "updated_at": "2015-03-23T21:52:22Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Unit158 so, 2,3 is not actually crossed in the line?\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/85218874",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-85218874",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 85218874,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MjE4ODc0",
    "user": {
      "login": "Unit158",
      "id": 706008,
      "node_id": "MDQ6VXNlcjcwNjAwOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/706008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Unit158",
      "html_url": "https://github.com/Unit158",
      "followers_url": "https://api.github.com/users/Unit158/followers",
      "following_url": "https://api.github.com/users/Unit158/following{/other_user}",
      "gists_url": "https://api.github.com/users/Unit158/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Unit158/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Unit158/subscriptions",
      "organizations_url": "https://api.github.com/users/Unit158/orgs",
      "repos_url": "https://api.github.com/users/Unit158/repos",
      "events_url": "https://api.github.com/users/Unit158/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Unit158/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-23T21:55:26Z",
    "updated_at": "2015-03-23T21:59:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "I have to double check my work, but at the moment, I will assume neither algorithm is correct.\n\nEDIT: nope, sorry. Your algorithm adds extra cells. This is useful for a visual line, but it is not correct. (We don't want to hit corners where there is no corner, i.e., firing directly diagonally.)\n\nThanks for the care to check though :smile: \n\nSee http://grid-paint.com/images/png/5638871085744128.png for reference. Top right is your results. (Minus the top cell. Looks like I goofed when I was drawing :s)\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/85222716",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-85222716",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 85222716,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MjIyNzE2",
    "user": {
      "login": "Rydra",
      "id": 5826108,
      "node_id": "MDQ6VXNlcjU4MjYxMDg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5826108?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rydra",
      "html_url": "https://github.com/Rydra",
      "followers_url": "https://api.github.com/users/Rydra/followers",
      "following_url": "https://api.github.com/users/Rydra/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rydra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rydra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rydra/subscriptions",
      "organizations_url": "https://api.github.com/users/Rydra/orgs",
      "repos_url": "https://api.github.com/users/Rydra/repos",
      "events_url": "https://api.github.com/users/Rydra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rydra/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-23T22:01:23Z",
    "updated_at": "2015-03-23T22:01:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Unit158 you mean top left my result, right? :P\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/85222859",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-85222859",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 85222859,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MjIyODU5",
    "user": {
      "login": "Unit158",
      "id": 706008,
      "node_id": "MDQ6VXNlcjcwNjAwOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/706008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Unit158",
      "html_url": "https://github.com/Unit158",
      "followers_url": "https://api.github.com/users/Unit158/followers",
      "following_url": "https://api.github.com/users/Unit158/following{/other_user}",
      "gists_url": "https://api.github.com/users/Unit158/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Unit158/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Unit158/subscriptions",
      "organizations_url": "https://api.github.com/users/Unit158/orgs",
      "repos_url": "https://api.github.com/users/Unit158/repos",
      "events_url": "https://api.github.com/users/Unit158/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Unit158/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-23T22:01:51Z",
    "updated_at": "2015-03-23T22:01:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "yeah. I've got a super bad headache and I still drew it wrong >_>. You do get the point though, right?\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/85223695",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-85223695",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 85223695,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MjIzNjk1",
    "user": {
      "login": "penev92",
      "id": 7137365,
      "node_id": "MDQ6VXNlcjcxMzczNjU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7137365?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/penev92",
      "html_url": "https://github.com/penev92",
      "followers_url": "https://api.github.com/users/penev92/followers",
      "following_url": "https://api.github.com/users/penev92/following{/other_user}",
      "gists_url": "https://api.github.com/users/penev92/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/penev92/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/penev92/subscriptions",
      "organizations_url": "https://api.github.com/users/penev92/orgs",
      "repos_url": "https://api.github.com/users/penev92/repos",
      "events_url": "https://api.github.com/users/penev92/events{/privacy}",
      "received_events_url": "https://api.github.com/users/penev92/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-23T22:04:18Z",
    "updated_at": "2015-03-23T22:04:18Z",
    "author_association": "MEMBER",
    "body": "So are we talking about [such](http://i.imgur.com/qjYJkc6.png) a test case?\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/85224361",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-85224361",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 85224361,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MjI0MzYx",
    "user": {
      "login": "Unit158",
      "id": 706008,
      "node_id": "MDQ6VXNlcjcwNjAwOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/706008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Unit158",
      "html_url": "https://github.com/Unit158",
      "followers_url": "https://api.github.com/users/Unit158/followers",
      "following_url": "https://api.github.com/users/Unit158/following{/other_user}",
      "gists_url": "https://api.github.com/users/Unit158/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Unit158/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Unit158/subscriptions",
      "organizations_url": "https://api.github.com/users/Unit158/orgs",
      "repos_url": "https://api.github.com/users/Unit158/repos",
      "events_url": "https://api.github.com/users/Unit158/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Unit158/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-23T22:05:56Z",
    "updated_at": "2015-03-23T22:07:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "probably ._.\n\nI was doing it from the corner of the cell I suppose. anyway, if it's right ill change it later\n\nedit: even in that case, neither of the results are correct.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/85224956",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-85224956",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 85224956,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MjI0OTU2",
    "user": {
      "login": "Rydra",
      "id": 5826108,
      "node_id": "MDQ6VXNlcjU4MjYxMDg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5826108?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rydra",
      "html_url": "https://github.com/Rydra",
      "followers_url": "https://api.github.com/users/Rydra/followers",
      "following_url": "https://api.github.com/users/Rydra/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rydra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rydra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rydra/subscriptions",
      "organizations_url": "https://api.github.com/users/Rydra/orgs",
      "repos_url": "https://api.github.com/users/Rydra/repos",
      "events_url": "https://api.github.com/users/Rydra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rydra/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-23T22:07:33Z",
    "updated_at": "2015-03-23T22:08:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "![center1](https://cloud.githubusercontent.com/assets/5826108/6791656/1bc9f412-d1b1-11e4-896c-070e7234d5ed.jpg)\n![center2](https://cloud.githubusercontent.com/assets/5826108/6791663/2857d1a4-d1b1-11e4-814a-fc540fa074b0.jpg)\n\nFrom where are should the algoritms start tracing the lines, from the center of from the edges? This is a quite good point.\n\nI think you're missing a square in your drawing.\n\nEither way, If you want to see which actors are touched by a ray, we need to use WPos for that purpose. Cells are too innacurate for that, aren't they?\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/85225347",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-85225347",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 85225347,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MjI1MzQ3",
    "user": {
      "login": "Unit158",
      "id": 706008,
      "node_id": "MDQ6VXNlcjcwNjAwOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/706008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Unit158",
      "html_url": "https://github.com/Unit158",
      "followers_url": "https://api.github.com/users/Unit158/followers",
      "following_url": "https://api.github.com/users/Unit158/following{/other_user}",
      "gists_url": "https://api.github.com/users/Unit158/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Unit158/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Unit158/subscriptions",
      "organizations_url": "https://api.github.com/users/Unit158/orgs",
      "repos_url": "https://api.github.com/users/Unit158/repos",
      "events_url": "https://api.github.com/users/Unit158/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Unit158/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-23T22:08:40Z",
    "updated_at": "2015-03-23T22:11:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "you can use a linear system equation once you have the possible actors in a cell. also, I know why that (left) diagram looks incorrect. you have to go top right corner to top right corner or bottom left corner to bottom left corner. The standard in graphing is bottom left to bottom left (for positive graphing).\n\nthe equation for (0,0) to (2,4) is y=2/1x, put it in a graphing calculator like desmos to see what the line should look like\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/85225744",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-85225744",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 85225744,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MjI1NzQ0",
    "user": {
      "login": "penev92",
      "id": 7137365,
      "node_id": "MDQ6VXNlcjcxMzczNjU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7137365?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/penev92",
      "html_url": "https://github.com/penev92",
      "followers_url": "https://api.github.com/users/penev92/followers",
      "following_url": "https://api.github.com/users/penev92/following{/other_user}",
      "gists_url": "https://api.github.com/users/penev92/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/penev92/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/penev92/subscriptions",
      "organizations_url": "https://api.github.com/users/penev92/orgs",
      "repos_url": "https://api.github.com/users/penev92/repos",
      "events_url": "https://api.github.com/users/penev92/events{/privacy}",
      "received_events_url": "https://api.github.com/users/penev92/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-23T22:09:50Z",
    "updated_at": "2015-03-23T22:09:50Z",
    "author_association": "MEMBER",
    "body": "Yes, they are. I suppose we'll need to offset the ray depending on the turret offset (for weapons), and then take the ray's width into account, but around the center of the cell should be a good approximation for a start.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/85227021",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-85227021",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 85227021,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MjI3MDIx",
    "user": {
      "login": "Rydra",
      "id": 5826108,
      "node_id": "MDQ6VXNlcjU4MjYxMDg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5826108?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rydra",
      "html_url": "https://github.com/Rydra",
      "followers_url": "https://api.github.com/users/Rydra/followers",
      "following_url": "https://api.github.com/users/Rydra/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rydra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rydra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rydra/subscriptions",
      "organizations_url": "https://api.github.com/users/Rydra/orgs",
      "repos_url": "https://api.github.com/users/Rydra/repos",
      "events_url": "https://api.github.com/users/Rydra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rydra/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-23T22:13:48Z",
    "updated_at": "2015-03-23T22:13:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "I suggest making it clear what should be the REAL solution for your case in terms of behaviour and start working out from that point and implement unit tests. Let's define several simple use cases and their results:\n- From 0, 0 to 1, 3, which cells should be selected for this ray case we are treating?\n- From 0, 0 to 4, 4, which cells should be selected?\n- From 0, 0 to 1, 4, which cells should be selected?\n- From 0, 0 to 2, 3 which cells should be selected?\n- From 0, 0 to 0, 4 which cells should be selected?\n- From 0, 0 to 4, 0 which cells should be selected?\n\nOnce we have clear what should be the output for this cases, we can steadily working on a solution that satisfies our requirements once they are clearer.\n\nI could help define those unit tests as long as I know what should be the output.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/85235729",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-85235729",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 85235729,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MjM1NzI5",
    "user": {
      "login": "Rydra",
      "id": 5826108,
      "node_id": "MDQ6VXNlcjU4MjYxMDg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5826108?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rydra",
      "html_url": "https://github.com/Rydra",
      "followers_url": "https://api.github.com/users/Rydra/followers",
      "following_url": "https://api.github.com/users/Rydra/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rydra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rydra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rydra/subscriptions",
      "organizations_url": "https://api.github.com/users/Rydra/orgs",
      "repos_url": "https://api.github.com/users/Rydra/repos",
      "events_url": "https://api.github.com/users/Rydra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rydra/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-23T22:42:29Z",
    "updated_at": "2015-03-23T22:47:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "By the way, @Unit158, Your drawings, given the origin and target from the left picture, is the equivalent from going to 0, 0 to 2, 5. According to my tests on my algorithm, this results in the following array: 0,0; 0,1; 1,1; 1,2; 1,3; 1,4; 2,4; 2,5;. Your picture shows a 0, 2 point in blue which is not in there. \n\nHere's a picture of the real tracing and a line that depicts the crossing from the center:\n\n![image](https://cloud.githubusercontent.com/assets/5826108/6792261/c6689554-d1b6-11e4-862d-3090342100f2.png)\n\nThis is the algorithm I used:\n\n```\n            // Algorithm obtained in http://playtechs.blogspot.co.uk/2007/03/raytracing-on-grid.html\n    public IEnumerable<CPos> RayCast(CPos source, CPos target)\n    {\n        int dx = Math.Abs(target.X - source.X);\n        int dy = Math.Abs(target.Y - source.Y);\n        int x = source.X;\n        int y = source.Y;\n        int n = 1 + dx + dy;\n        int x_inc = (target.X > source.X) ? 1 : -1;\n        int y_inc = (target.Y > source.Y) ? 1 : -1;\n        int error = dx - dy;\n        dx *= 2;\n        dy *= 2;\n\n        for (; n > 0; --n)\n        {\n            yield return new CPos(x, y);\n\n            if (error > 0)\n            {\n                x += x_inc;\n                error -= dy;\n            }\n            else\n            {\n                y += y_inc;\n                error += dx;\n            }\n        }\n    }\n```\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/85260378",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-85260378",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 85260378,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MjYwMzc4",
    "user": {
      "login": "Unit158",
      "id": 706008,
      "node_id": "MDQ6VXNlcjcwNjAwOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/706008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Unit158",
      "html_url": "https://github.com/Unit158",
      "followers_url": "https://api.github.com/users/Unit158/followers",
      "following_url": "https://api.github.com/users/Unit158/following{/other_user}",
      "gists_url": "https://api.github.com/users/Unit158/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Unit158/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Unit158/subscriptions",
      "organizations_url": "https://api.github.com/users/Unit158/orgs",
      "repos_url": "https://api.github.com/users/Unit158/repos",
      "events_url": "https://api.github.com/users/Unit158/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Unit158/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-24T00:34:44Z",
    "updated_at": "2015-03-24T00:34:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "I know. Check the image again.\n\nOn 2015-03-23, at 6:42 PM, David Jiménez notifications@github.com wrote:\n\n> By the way, @Unit158, Your drawings, given the origin and target from the left picture, is the equivalent from going to 0, 0 to 2, 5. According to my tests on my algorithm, this results in the following array: 0,0; 0,1; 1,1; 1,2; 1,3; 1,4; 2,4; 2,5;. Your picture shows a 0, 2 point in blue which is not in there.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/85367514",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-85367514",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 85367514,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MzY3NTE0",
    "user": {
      "login": "Rydra",
      "id": 5826108,
      "node_id": "MDQ6VXNlcjU4MjYxMDg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5826108?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rydra",
      "html_url": "https://github.com/Rydra",
      "followers_url": "https://api.github.com/users/Rydra/followers",
      "following_url": "https://api.github.com/users/Rydra/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rydra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rydra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rydra/subscriptions",
      "organizations_url": "https://api.github.com/users/Rydra/orgs",
      "repos_url": "https://api.github.com/users/Rydra/repos",
      "events_url": "https://api.github.com/users/Rydra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rydra/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-24T06:56:25Z",
    "updated_at": "2015-03-24T08:44:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "And... Where is your right drawing (the one representimg your algorithm) supposed to go? Because there's no way I trace a line without cutting other cells.\n\nIf the issue with my algorithm are 0 error situations giving a cell (e.g. 45 degrees) you can wrap the yield return into and error != 0 conditional and then it should be fine.\n\nI'm just trying to undertand what you need, so if we can complete the example cases I posted above for testing, everthing will be smoother.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/86235885",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-86235885",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 86235885,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MjM1ODg1",
    "user": {
      "login": "Unit158",
      "id": 706008,
      "node_id": "MDQ6VXNlcjcwNjAwOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/706008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Unit158",
      "html_url": "https://github.com/Unit158",
      "followers_url": "https://api.github.com/users/Unit158/followers",
      "following_url": "https://api.github.com/users/Unit158/following{/other_user}",
      "gists_url": "https://api.github.com/users/Unit158/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Unit158/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Unit158/subscriptions",
      "organizations_url": "https://api.github.com/users/Unit158/orgs",
      "repos_url": "https://api.github.com/users/Unit158/repos",
      "events_url": "https://api.github.com/users/Unit158/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Unit158/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-25T22:21:43Z",
    "updated_at": "2015-03-25T22:24:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "![](http://imgur.com/begVVud.png)\n\nThis represents how line graphing should be done. This is how it is done on the graphing calculators and by hand. @pchote has also brought up the possibility of a more mathematically sound idea, being a series of line-line intersection tests.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/86241767",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-86241767",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 86241767,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MjQxNzY3",
    "user": {
      "login": "Rydra",
      "id": 5826108,
      "node_id": "MDQ6VXNlcjU4MjYxMDg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5826108?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rydra",
      "html_url": "https://github.com/Rydra",
      "followers_url": "https://api.github.com/users/Rydra/followers",
      "following_url": "https://api.github.com/users/Rydra/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rydra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rydra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rydra/subscriptions",
      "organizations_url": "https://api.github.com/users/Rydra/orgs",
      "repos_url": "https://api.github.com/users/Rydra/repos",
      "events_url": "https://api.github.com/users/Rydra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rydra/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-25T22:46:16Z",
    "updated_at": "2015-03-25T22:48:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "I see. Your algorithm takes the left-bottom square as reference instead of the center of the cell. Why is that so? Just curious. If you really need the left-bottom as reference, taking the center and then offset it a lil bit should be enough.\n\nAnd by the mathematical possibility, does it mean something like given two WPos, extract a line function and then compare whether a given Actor WPos is inside that line to detect collision?\n\nSomething like this could be interesting:\n\n```\npublic static Func<WPos, bool> LineFunctionComparer(WPos point1, WPos point2)\n{\n    var m = (point2.Y - point1.Y) / (point2.X - point1.X);\n    var b = point1.Y - (m * point1.X);\n\n    return wpos => (m*wpos.X + b) == wpos.Y;\n}\n```\n\nOf course this will need to be tweaked to take into account line widths, etc...\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/86270994",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-86270994",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 86270994,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MjcwOTk0",
    "user": {
      "login": "Unit158",
      "id": 706008,
      "node_id": "MDQ6VXNlcjcwNjAwOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/706008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Unit158",
      "html_url": "https://github.com/Unit158",
      "followers_url": "https://api.github.com/users/Unit158/followers",
      "following_url": "https://api.github.com/users/Unit158/following{/other_user}",
      "gists_url": "https://api.github.com/users/Unit158/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Unit158/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Unit158/subscriptions",
      "organizations_url": "https://api.github.com/users/Unit158/orgs",
      "repos_url": "https://api.github.com/users/Unit158/repos",
      "events_url": "https://api.github.com/users/Unit158/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Unit158/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-26T01:00:05Z",
    "updated_at": "2015-03-26T01:00:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "It's written like so because that is where our points are at on a grid. We are technically looking for the point and we obtain the cell from that point.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/86291142",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-86291142",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 86291142,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MjkxMTQy",
    "user": {
      "login": "Unit158",
      "id": 706008,
      "node_id": "MDQ6VXNlcjcwNjAwOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/706008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Unit158",
      "html_url": "https://github.com/Unit158",
      "followers_url": "https://api.github.com/users/Unit158/followers",
      "following_url": "https://api.github.com/users/Unit158/following{/other_user}",
      "gists_url": "https://api.github.com/users/Unit158/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Unit158/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Unit158/subscriptions",
      "organizations_url": "https://api.github.com/users/Unit158/orgs",
      "repos_url": "https://api.github.com/users/Unit158/repos",
      "events_url": "https://api.github.com/users/Unit158/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Unit158/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-26T01:49:14Z",
    "updated_at": "2015-03-26T01:49:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "As for your code, it would be more efficient to represent the actor as a line perpendicular to the bullet and find the length (from actor to collision), thus finding collision where l <= r, or returning none at all. \n\nOn 2015-03-25, at 6:46 PM, David Jiménez notifications@github.com wrote:\n\n> I see. Your algorithm takes the left-bottom square as reference instead of the center of the cell. Why is that so? Just curious. If you really need the left-bottom as reference, taking the center and then offset it a lil bit should be enough.\n> \n> And by the mathematical possibility, does it mean something like given two WPos, extract a line function and then compare whether a given Actor WPos is inside that line to detect collision?\n> \n> Something like this could be interesting:\n> \n> public static Func<WPos, bool> LineFunctionComparer(WPos point1, WPos point2)\n> {\n>     var m = (point2.Y - point1.Y) / (point2.X - point1.Y);\n>     var b = point1.Y - (m \\* point1.X);\n> \n> ```\n> return wpos => (m*wpos.X + b) == wpos.Y;\n> ```\n> \n> }\n> Of course this will need to be tweaked to take into account line widths, etc...\n> \n> —\n> Reply to this email directly or view it on GitHub.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/90794819",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-90794819",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 90794819,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwNzk0ODE5",
    "user": {
      "login": "Phrohdoh",
      "id": 4861023,
      "node_id": "MDQ6VXNlcjQ4NjEwMjM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4861023?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Phrohdoh",
      "html_url": "https://github.com/Phrohdoh",
      "followers_url": "https://api.github.com/users/Phrohdoh/followers",
      "following_url": "https://api.github.com/users/Phrohdoh/following{/other_user}",
      "gists_url": "https://api.github.com/users/Phrohdoh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Phrohdoh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Phrohdoh/subscriptions",
      "organizations_url": "https://api.github.com/users/Phrohdoh/orgs",
      "repos_url": "https://api.github.com/users/Phrohdoh/repos",
      "events_url": "https://api.github.com/users/Phrohdoh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Phrohdoh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-08T03:40:49Z",
    "updated_at": "2015-04-08T03:40:49Z",
    "author_association": "MEMBER",
    "body": "@Unit158 any progress on this?\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/90884668",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-90884668",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 90884668,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwODg0NjY4",
    "user": {
      "login": "Unit158",
      "id": 706008,
      "node_id": "MDQ6VXNlcjcwNjAwOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/706008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Unit158",
      "html_url": "https://github.com/Unit158",
      "followers_url": "https://api.github.com/users/Unit158/followers",
      "following_url": "https://api.github.com/users/Unit158/following{/other_user}",
      "gists_url": "https://api.github.com/users/Unit158/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Unit158/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Unit158/subscriptions",
      "organizations_url": "https://api.github.com/users/Unit158/orgs",
      "repos_url": "https://api.github.com/users/Unit158/repos",
      "events_url": "https://api.github.com/users/Unit158/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Unit158/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-08T11:30:08Z",
    "updated_at": "2015-04-08T11:30:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "Very little. offsetting it wpos-wise is proving to be more difficult than I though :/\n\nOn 2015-04-07, at 11:40 PM, Taryn Hill notifications@github.com wrote:\n\n> @Unit158 any progress on this?\n> \n> \\\n> Reply to this email directly or view it on GitHub.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/90885276",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-90885276",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 90885276,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkwODg1Mjc2",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-08T11:32:12Z",
    "updated_at": "2015-04-08T11:32:12Z",
    "author_association": "MEMBER",
    "body": "Did you have a go at implementing my suggestion? That should avoid all the issues discussed above about offsets and line widths.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/91334383",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-91334383",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 91334383,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkxMzM0Mzgz",
    "user": {
      "login": "Unit158",
      "id": 706008,
      "node_id": "MDQ6VXNlcjcwNjAwOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/706008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Unit158",
      "html_url": "https://github.com/Unit158",
      "followers_url": "https://api.github.com/users/Unit158/followers",
      "following_url": "https://api.github.com/users/Unit158/following{/other_user}",
      "gists_url": "https://api.github.com/users/Unit158/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Unit158/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Unit158/subscriptions",
      "organizations_url": "https://api.github.com/users/Unit158/orgs",
      "repos_url": "https://api.github.com/users/Unit158/repos",
      "events_url": "https://api.github.com/users/Unit158/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Unit158/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-09T19:29:18Z",
    "updated_at": "2015-04-09T19:29:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "I've sort of lost interest in solving this problem for now. I'll revisit it once I finish my tower defense map.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/102888739",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/7695#issuecomment-102888739",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7695",
    "id": 102888739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEwMjg4ODczOQ==",
    "user": {
      "login": "Unit158",
      "id": 706008,
      "node_id": "MDQ6VXNlcjcwNjAwOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/706008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Unit158",
      "html_url": "https://github.com/Unit158",
      "followers_url": "https://api.github.com/users/Unit158/followers",
      "following_url": "https://api.github.com/users/Unit158/following{/other_user}",
      "gists_url": "https://api.github.com/users/Unit158/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Unit158/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Unit158/subscriptions",
      "organizations_url": "https://api.github.com/users/Unit158/orgs",
      "repos_url": "https://api.github.com/users/Unit158/repos",
      "events_url": "https://api.github.com/users/Unit158/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Unit158/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-18T01:52:42Z",
    "updated_at": "2015-05-18T01:52:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "It turns out my original solution was actually the correct solution of the two for bullets. It actually factored in the WPos. I will reopen this pr with both my intersection code and raycaster code...\n"
  }
]
