[
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/135902971",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/9190#issuecomment-135902971",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/9190",
    "id": 135902971,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNTkwMjk3MQ==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-28T22:33:20Z",
    "updated_at": "2015-08-28T22:33:42Z",
    "author_association": "MEMBER",
    "body": "I have discussed this several times in IRC. The plan for a long time has been to split upgrade rules into an interface / plumbing and individual rule classes (one per upgrade), so that mods can define their own rules and completely avoid rebase conflicts.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/135913486",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/9190#issuecomment-135913486",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/9190",
    "id": 135913486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNTkxMzQ4Ng==",
    "user": {
      "login": "penev92",
      "id": 7137365,
      "node_id": "MDQ6VXNlcjcxMzczNjU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7137365?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/penev92",
      "html_url": "https://github.com/penev92",
      "followers_url": "https://api.github.com/users/penev92/followers",
      "following_url": "https://api.github.com/users/penev92/following{/other_user}",
      "gists_url": "https://api.github.com/users/penev92/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/penev92/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/penev92/subscriptions",
      "organizations_url": "https://api.github.com/users/penev92/orgs",
      "repos_url": "https://api.github.com/users/penev92/repos",
      "events_url": "https://api.github.com/users/penev92/events{/privacy}",
      "received_events_url": "https://api.github.com/users/penev92/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-28T23:36:21Z",
    "updated_at": "2015-08-28T23:49:38Z",
    "author_association": "MEMBER",
    "body": "OK, after some discussion on IRC I am posting the results here for everyone's future reference and in case someone disagrees with the plan:\n1. Add `IUpgradeRules`.\n2. Have `UpgradeRules` implement that (custom mods can have their own classes that implement it).\n3. Create one `UpgradeRules<date>` class in `Common` implementing `IUpgradeRules` after each release (feature freeze) and use it for the next cycle.\n   (_So far we've dealt with the huge file + we have support for custom mods having their own upgrade rules - useful for making maps compatible with the mod_)\n4. Add `UpgradeRulesBeforeAttribute`, `UpgradeActorsBeforeAttribute`, `UpgradeWeaponsBeforeAttribute`, `UpgradePlayersBeforeAttribute` with a Date property.\n5. Create a new method for each upgrade rule and put an `[Upgrage*Before(<date>)]` attribute on it. (**Don't forget to put a descriptive comment on the method about its purpose!**)\n   (_This will (hopefully) eliminate the constant merge conflicts and need to rebase because of upgrade rules_)\n6. Have the utility get all classes implementing `IUpgradeRules`.\n7. From those classes get all methods with `UpgradeRulesBefore date > engineVersion`.\n8. Pass the ID of the mod that is being upgraded (selected by the user as a parameter for the utility) to each of those methods, as some of them may want to run only for specific mods (especially in the presence of custom mods with their own upgrade rules).\n\nWhile a class per rule will ensure no more rebase conflicts, we'd be looking at tens of new files withing weeks, which doesn't sound like a good idea to me. A new class per release cycle will keep the files small enough to manage, and will mean around 2-3 new files per year at our current speed.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/135915486",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/9190#issuecomment-135915486",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/9190",
    "id": 135915486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNTkxNTQ4Ng==",
    "user": {
      "login": "GraionDilach",
      "id": 1136302,
      "node_id": "MDQ6VXNlcjExMzYzMDI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1136302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GraionDilach",
      "html_url": "https://github.com/GraionDilach",
      "followers_url": "https://api.github.com/users/GraionDilach/followers",
      "following_url": "https://api.github.com/users/GraionDilach/following{/other_user}",
      "gists_url": "https://api.github.com/users/GraionDilach/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GraionDilach/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GraionDilach/subscriptions",
      "organizations_url": "https://api.github.com/users/GraionDilach/orgs",
      "repos_url": "https://api.github.com/users/GraionDilach/repos",
      "events_url": "https://api.github.com/users/GraionDilach/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GraionDilach/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-28T23:43:25Z",
    "updated_at": "2015-08-28T23:43:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "I like the idea - honestly I always thought upgrade rules were mostly for non-bleed (playtest/release) modders, anyone picking up bleed to mod took the dangers of dealing with the catching up as part of that pick -, what sounds wrong alone to me is that it would be between releases. I'd prefer files per playtests, because this breaks OpenRA modmaps uploaded to the resource site during a release cycle pretty much as-is.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/135916931",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/9190#issuecomment-135916931",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/9190",
    "id": 135916931,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNTkxNjkzMQ==",
    "user": {
      "login": "penev92",
      "id": 7137365,
      "node_id": "MDQ6VXNlcjcxMzczNjU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7137365?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/penev92",
      "html_url": "https://github.com/penev92",
      "followers_url": "https://api.github.com/users/penev92/followers",
      "following_url": "https://api.github.com/users/penev92/following{/other_user}",
      "gists_url": "https://api.github.com/users/penev92/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/penev92/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/penev92/subscriptions",
      "organizations_url": "https://api.github.com/users/penev92/orgs",
      "repos_url": "https://api.github.com/users/penev92/repos",
      "events_url": "https://api.github.com/users/penev92/events{/privacy}",
      "received_events_url": "https://api.github.com/users/penev92/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-28T23:56:38Z",
    "updated_at": "2015-08-28T23:56:38Z",
    "author_association": "MEMBER",
    "body": "Nothing should change for maps on the resource site - its utility is always running the version of the last release, so it will be unaware of newer upgrade rules until it is automatically updated when the next release is tagged, just like now. (Someone correct me if I'm wrong please, it's quite late here now.)\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/135917863",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/9190#issuecomment-135917863",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/9190",
    "id": 135917863,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNTkxNzg2Mw==",
    "user": {
      "login": "GraionDilach",
      "id": 1136302,
      "node_id": "MDQ6VXNlcjExMzYzMDI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1136302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GraionDilach",
      "html_url": "https://github.com/GraionDilach",
      "followers_url": "https://api.github.com/users/GraionDilach/followers",
      "following_url": "https://api.github.com/users/GraionDilach/following{/other_user}",
      "gists_url": "https://api.github.com/users/GraionDilach/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GraionDilach/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GraionDilach/subscriptions",
      "organizations_url": "https://api.github.com/users/GraionDilach/orgs",
      "repos_url": "https://api.github.com/users/GraionDilach/repos",
      "events_url": "https://api.github.com/users/GraionDilach/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GraionDilach/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-28T23:59:12Z",
    "updated_at": "2015-08-28T23:59:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "It runs on the last build - it can either be a playtest or a release. I've seen maps tagged with playtest compatibility for sure.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/135925120",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/9190#issuecomment-135925120",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/9190",
    "id": 135925120,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNTkyNTEyMA==",
    "user": {
      "login": "LavenderMoon",
      "id": 12167542,
      "node_id": "MDQ6VXNlcjEyMTY3NTQy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/12167542?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LavenderMoon",
      "html_url": "https://github.com/LavenderMoon",
      "followers_url": "https://api.github.com/users/LavenderMoon/followers",
      "following_url": "https://api.github.com/users/LavenderMoon/following{/other_user}",
      "gists_url": "https://api.github.com/users/LavenderMoon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LavenderMoon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LavenderMoon/subscriptions",
      "organizations_url": "https://api.github.com/users/LavenderMoon/orgs",
      "repos_url": "https://api.github.com/users/LavenderMoon/repos",
      "events_url": "https://api.github.com/users/LavenderMoon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LavenderMoon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-29T01:27:40Z",
    "updated_at": "2015-08-29T01:27:40Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think penev meant they'll be running the last Playtest or Proper release, not the latest git build.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/135972905",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/9190#issuecomment-135972905",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/9190",
    "id": 135972905,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNTk3MjkwNQ==",
    "user": {
      "login": "Phrohdoh",
      "id": 4861023,
      "node_id": "MDQ6VXNlcjQ4NjEwMjM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4861023?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Phrohdoh",
      "html_url": "https://github.com/Phrohdoh",
      "followers_url": "https://api.github.com/users/Phrohdoh/followers",
      "following_url": "https://api.github.com/users/Phrohdoh/following{/other_user}",
      "gists_url": "https://api.github.com/users/Phrohdoh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Phrohdoh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Phrohdoh/subscriptions",
      "organizations_url": "https://api.github.com/users/Phrohdoh/orgs",
      "repos_url": "https://api.github.com/users/Phrohdoh/repos",
      "events_url": "https://api.github.com/users/Phrohdoh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Phrohdoh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-29T11:18:45Z",
    "updated_at": "2015-08-29T11:18:45Z",
    "author_association": "MEMBER",
    "body": "My only issue with this is that custom mods may not be released with versions that are dated.\nIt may instead be `3.0-beta`. Of course the author just needs to note down the date of build/release, but it is still something to think about.\n\nHow is `UpgradeRulesBeforeAttribute` different from the other methods?\n`Rules` is a generalization and everything falls under that category.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/135981231",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/9190#issuecomment-135981231",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/9190",
    "id": 135981231,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzNTk4MTIzMQ==",
    "user": {
      "login": "penev92",
      "id": 7137365,
      "node_id": "MDQ6VXNlcjcxMzczNjU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7137365?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/penev92",
      "html_url": "https://github.com/penev92",
      "followers_url": "https://api.github.com/users/penev92/followers",
      "following_url": "https://api.github.com/users/penev92/following{/other_user}",
      "gists_url": "https://api.github.com/users/penev92/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/penev92/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/penev92/subscriptions",
      "organizations_url": "https://api.github.com/users/penev92/orgs",
      "repos_url": "https://api.github.com/users/penev92/repos",
      "events_url": "https://api.github.com/users/penev92/events{/privacy}",
      "received_events_url": "https://api.github.com/users/penev92/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-29T12:33:29Z",
    "updated_at": "2015-08-29T12:33:29Z",
    "author_association": "MEMBER",
    "body": "No, they are pretty different.\nThe 4 different attributes were suggested to reflect the current setup with `UpgradeActors()`, `UpgradeActorRules()`, `UpgradePlayers()` and `UpgradeWeaponRules()`. I didn't check the current names at the time so the names don't quite match, but that's the idea.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/179551160",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/9190#issuecomment-179551160",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/9190",
    "id": 179551160,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3OTU1MTE2MA==",
    "user": {
      "login": "jaimetotal",
      "id": 1637466,
      "node_id": "MDQ6VXNlcjE2Mzc0NjY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1637466?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaimetotal",
      "html_url": "https://github.com/jaimetotal",
      "followers_url": "https://api.github.com/users/jaimetotal/followers",
      "following_url": "https://api.github.com/users/jaimetotal/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaimetotal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaimetotal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaimetotal/subscriptions",
      "organizations_url": "https://api.github.com/users/jaimetotal/orgs",
      "repos_url": "https://api.github.com/users/jaimetotal/repos",
      "events_url": "https://api.github.com/users/jaimetotal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaimetotal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-04T00:30:31Z",
    "updated_at": "2016-02-04T10:25:38Z",
    "author_association": "NONE",
    "body": "I've started this refactoring but I've reached an stalemante with the proposed design or perhaps I've misunderstood.\n\nBy having multiple methods, for each `Upgrade*Attribute()` in each class that implements `IUpgradeRules`, how can I guarantee the method signature when using `Invoke()` with Reflection?\n\nOr the proposed offer is to have one method by class, with multiple attributes? This design has the issue that the date would be repeated multiple times. Instead, it's best that it's an `UpgradeDateAttribute` on `UpgradeRules`\n\nAlso, instead of attributes, I can create an interface for each of them, each one with the same method signature.\n\nThe current state looks like this:\n\n``` c#\ninternal class Upgrade20150430 : IUpgradeRules\n    {\n        [UpgradeActorBefore(20150430)]\n        public void Upgrade(Action<string> emitError, Action<string> emitWarning, MiniYamlNode node)\n        {\n            if (node.Key == \"Health\")\n                UpgradeRulesUtils.ConvertFloatToIntPercentage(ref node.Value.Value);\n        }\n\n    }\n```\n\nAn alternative would be something like this:\n\n``` c#\ninternal interface IUpgradeRule\n    {\n        int Date { get; }\n    }\n\n    internal interface IActorUpgradeRule : IUpgradeRule\n    {\n        void Run();\n    }\n\n    internal interface IRuleUpgradeRule : IUpgradeRule\n    {\n        void Run();\n    }\n\n    internal class UpgradeRuleImp : IActorUpgradeRule, IRuleUpgradeRule\n    {\n        public int Date { get; }\n        void IRuleUpgradeRule.Run()\n        {\n            throw new NotImplementedException();\n        }\n\n        void IActorUpgradeRule.Run()\n        {\n            throw new NotImplementedException();\n        }\n    }\n```\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/179735428",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/9190#issuecomment-179735428",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/9190",
    "id": 179735428,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3OTczNTQyOA==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-04T09:44:41Z",
    "updated_at": "2016-02-04T09:44:41Z",
    "author_association": "MEMBER",
    "body": "The approach i've been arguing for would look something like this (using #8066 as an example):\n\n``` csharp\npublic abstract class UpgradeRule\n{\n    public abstract int Date { get; }\n    public abstract string Name { get; }\n    public abstract string Description { get; }\n\n    public void ReportManualChange(string message)\n    {\n        // TODO: do something with this\n    }\n\n    public virtual void UpgradeActorRules(int engineVersion, ref List<MiniYamlNode> nodes, MiniYamlNode parent, int depth) { /* do nothing */ }\n    // TODO: and so on for the other types\n}\n\npublic class ReplaceDeathTypes : UpgradeRule\n{\n    public override int Date { get { return 20150524; } }\n    public override string Name { get { return \"Replace generic death type definitions with the new DamageTypes code.\"; } }\n    public override string Description\n    {\n        get\n        {\n            return \"The warhead DeathType index has been removed, and death effects are now \" + \n                \"based on the DamageTypes list.  Remove DeathType from all warheads and add \"\n                \"the DeathTypes mapping to WithDeathAnimation / DeathSounds.\";\n        }\n    }\n\n    static void RenameDamageTypes(MiniYamlNode damageTypes)\n    {\n        // TODO: We would probably want to define one rule per mod, instead of hardcoding them all here\n        var mod = Game.ModData.Manifest.Mod.Id;\n        if (mod == \"cnc\" || mod == \"ra\")\n        {\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType1\", \"DefaultDeath\");\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType2\", \"BulletDeath\");\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType3\", \"SmallExplosionDeath\");\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType4\", \"ExplosionDeath\");\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType5\", \"FireDeath\");\n        }\n\n        if (mod == \"cnc\")\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType6\", \"TiberiumDeath\");\n\n        if (mod == \"ra\")\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType6\", \"ElectricityDeath\");\n\n        if (mod == \"d2k\")\n        {\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType1\", \"ExplosionDeath\");\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType2\", \"SoundDeath\");\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType3\", \"SmallExplosionDeath\");\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType4\", \"BulletDeath\");\n        }\n\n        if (mod == \"ts\")\n        {\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType1\", \"BulletDeath\");\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType2\", \"SmallExplosionDeath\");\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType3\", \"ExplosionDeath\");\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType5\", \"FireDeath\");\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType6\", \"EnergyDeath\");\n        }\n    }\n\n    public override void UpgradeActorRules(int engineVersion, ref List<MiniYamlNode> nodes, MiniYamlNode parent, int depth)\n    {\n        // Replace numbers with strings for DeathSounds.DeathType\n        if (node.Key.StartsWith(\"DeathSounds\"))\n        {\n            var deathTypes = node.Value.Nodes.FirstOrDefault(x => x.Key == \"DeathTypes\");\n            if (deathTypes != null)\n            {\n                var types = FieldLoader.GetValue<string[]>(\"DeathTypes\", deathTypes.Value.Value);\n                deathTypes.Value.Value = string.Join(\", \", types.Select(type => \"DeathType\" + type));\n\n                RenameDamageTypes(deathTypes);\n            }\n        }\n\n        ReportManualChange(\"Define WithDeathAnimation DeathTypes mapping.\");\n    }\n\n    public override void UpgradeWeaponRules(int engineVersion, ref List<MiniYamlNode> nodes, MiniYamlNode parent, int depth)\n    {\n        // Replace \"DeathTypeX\" damage types with proper words\n        if (node.Key.StartsWith(\"Warhead\") && node.Value.Value == \"SpreadDamage\")\n        {\n            var damageTypes = node.Value.Nodes.FirstOrDefault(x => x.Key == \"DamageTypes\");\n            if (damageTypes != null)\n                RenameDamageTypes(damageTypes);\n        }\n    }\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/179741797",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/9190#issuecomment-179741797",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/9190",
    "id": 179741797,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3OTc0MTc5Nw==",
    "user": {
      "login": "GraionDilach",
      "id": 1136302,
      "node_id": "MDQ6VXNlcjExMzYzMDI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1136302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GraionDilach",
      "html_url": "https://github.com/GraionDilach",
      "followers_url": "https://api.github.com/users/GraionDilach/followers",
      "following_url": "https://api.github.com/users/GraionDilach/following{/other_user}",
      "gists_url": "https://api.github.com/users/GraionDilach/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GraionDilach/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GraionDilach/subscriptions",
      "organizations_url": "https://api.github.com/users/GraionDilach/orgs",
      "repos_url": "https://api.github.com/users/GraionDilach/repos",
      "events_url": "https://api.github.com/users/GraionDilach/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GraionDilach/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-04T09:59:52Z",
    "updated_at": "2016-02-06T14:36:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "Wait, @pchote, what happens with third-party mods? If you intend to add the ids to each upgrade rule then there should be atleast a fallback for them otherwise the upgrade rules become pointless completely.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/179742926",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/9190#issuecomment-179742926",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/9190",
    "id": 179742926,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3OTc0MjkyNg==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-04T10:01:59Z",
    "updated_at": "2016-02-04T10:02:50Z",
    "author_association": "MEMBER",
    "body": "Note the\n\n>  // TODO: We would probably want to define one rule per mod, instead of hardcoding them all here\n\nThe rules above were copied from #8066, and for the purposes of illustration it wasn't worth the time to actually make that change.\n\nThird party mods will be able to define their own rules in their mod dlls.  Our \"common\" trait changes would have rules defined in Mods.Common.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/179749689",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/9190#issuecomment-179749689",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/9190",
    "id": 179749689,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3OTc0OTY4OQ==",
    "user": {
      "login": "jaimetotal",
      "id": 1637466,
      "node_id": "MDQ6VXNlcjE2Mzc0NjY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1637466?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaimetotal",
      "html_url": "https://github.com/jaimetotal",
      "followers_url": "https://api.github.com/users/jaimetotal/followers",
      "following_url": "https://api.github.com/users/jaimetotal/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaimetotal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaimetotal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaimetotal/subscriptions",
      "organizations_url": "https://api.github.com/users/jaimetotal/orgs",
      "repos_url": "https://api.github.com/users/jaimetotal/repos",
      "events_url": "https://api.github.com/users/jaimetotal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaimetotal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-04T10:15:24Z",
    "updated_at": "2016-02-04T10:15:24Z",
    "author_association": "NONE",
    "body": "The only downside I see with that approach is that I have to expose 4 methods (if it's only maps) or 8 methods (all upgrades) that may not be always used.\n\nThis is our current upgrades rules:\n- Actors\n- Players\n- ActorRules\n- WeaponRules\n- Tileset\n- Cursors\n- ChromeMetrics\n- ChromeLayout\n\nIf I were to add a new kind of upgrade, let's say `ChromeCursors` (making this up), I would have to expose the methods to old upgrades that didn't required it. Unless this *_never *_happens.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/179750420",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/9190#issuecomment-179750420",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/9190",
    "id": 179750420,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3OTc1MDQyMA==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-04T10:18:23Z",
    "updated_at": "2016-02-04T10:18:23Z",
    "author_association": "MEMBER",
    "body": "The upgrade rule methods would be virtual but not abstract.  Only the rules that actually use them would need to override them.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/179756057",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/9190#issuecomment-179756057",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/9190",
    "id": 179756057,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3OTc1NjA1Nw==",
    "user": {
      "login": "jaimetotal",
      "id": 1637466,
      "node_id": "MDQ6VXNlcjE2Mzc0NjY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1637466?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaimetotal",
      "html_url": "https://github.com/jaimetotal",
      "followers_url": "https://api.github.com/users/jaimetotal/followers",
      "following_url": "https://api.github.com/users/jaimetotal/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaimetotal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaimetotal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaimetotal/subscriptions",
      "organizations_url": "https://api.github.com/users/jaimetotal/orgs",
      "repos_url": "https://api.github.com/users/jaimetotal/repos",
      "events_url": "https://api.github.com/users/jaimetotal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaimetotal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-04T10:24:52Z",
    "updated_at": "2016-02-04T10:29:28Z",
    "author_association": "NONE",
    "body": "Yes, but when fetching them by reflection, I would run all of them, even if they weren't override.\nBy using interfaces, I don't need to call so many.\n\nLike this:\n\n``` c#\npublic interface IUpgradeRule\n{\n    int Date { get; }\n    string Name { get; }\n    string Description { get; }\n}\n\npublic interface IUpgradeActorRules : IUpgradeRule\n{\n    public virtual void UpgradeActorRules(int engineVersion, ref List<MiniYamlNode> nodes);\n\n\npublic interface IUpgradeWeaponRules : IUpgradeRule\n{\n    public virtual void UpgradeWeaponRules(int engineVersion, ref List<MiniYamlNode> nodes, MiniYamlNode parent, int depth);\n}\n\npublic class ReplaceDeathTypes : IUpgradeActorRules, IUpgradeWeaponRules\n{\n    public override int Date { get { return 20150524; } }\n    public override string Name { get { return \"Replace generic death type definitions with the new DamageTypes code.\"; } }\n    public override string Description\n    {\n        get\n        {\n            return \"The warhead DeathType index has been removed, and death effects are now \" + \n                \"based on the DamageTypes list.  Remove DeathType from all warheads and add \"\n                \"the DeathTypes mapping to WithDeathAnimation / DeathSounds.\";\n        }\n    }\n\n    static void RenameDamageTypes(MiniYamlNode damageTypes)\n    {\n        // TODO: We would probably want to define one rule per mod, instead of hardcoding them all here\n        var mod = Game.ModData.Manifest.Mod.Id;\n        if (mod == \"cnc\" || mod == \"ra\")\n        {\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType1\", \"DefaultDeath\");\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType2\", \"BulletDeath\");\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType3\", \"SmallExplosionDeath\");\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType4\", \"ExplosionDeath\");\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType5\", \"FireDeath\");\n        }\n\n        if (mod == \"cnc\")\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType6\", \"TiberiumDeath\");\n\n        if (mod == \"ra\")\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType6\", \"ElectricityDeath\");\n\n        if (mod == \"d2k\")\n        {\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType1\", \"ExplosionDeath\");\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType2\", \"SoundDeath\");\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType3\", \"SmallExplosionDeath\");\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType4\", \"BulletDeath\");\n        }\n\n        if (mod == \"ts\")\n        {\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType1\", \"BulletDeath\");\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType2\", \"SmallExplosionDeath\");\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType3\", \"ExplosionDeath\");\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType5\", \"FireDeath\");\n            damageTypes.Value.Value = damageTypes.Value.Value.Replace(\"DeathType6\", \"EnergyDeath\");\n        }\n    }\n\n    public void UpgradeActorRules(int engineVersion, ref List<MiniYamlNode> nodes)\n    {\n        // Replace numbers with strings for DeathSounds.DeathType\n        if (node.Key.StartsWith(\"DeathSounds\"))\n        {\n            var deathTypes = node.Value.Nodes.FirstOrDefault(x => x.Key == \"DeathTypes\");\n            if (deathTypes != null)\n            {\n                var types = FieldLoader.GetValue<string[]>(\"DeathTypes\", deathTypes.Value.Value);\n                deathTypes.Value.Value = string.Join(\", \", types.Select(type => \"DeathType\" + type));\n\n                RenameDamageTypes(deathTypes);\n            }\n        }\n\n        ReportManualChange(\"Define WithDeathAnimation DeathTypes mapping.\");\n    }\n\n    public void UpgradeWeaponRules(int engineVersion, ref List<MiniYamlNode> nodes, MiniYamlNode parent, int depth)\n    {\n        // Replace \"DeathTypeX\" damage types with proper words\n        if (node.Key.StartsWith(\"Warhead\") && node.Value.Value == \"SpreadDamage\")\n        {\n            var damageTypes = node.Value.Nodes.FirstOrDefault(x => x.Key == \"DamageTypes\");\n            if (damageTypes != null)\n                RenameDamageTypes(damageTypes);\n        }\n    }\n}\n```\n\nThen I will fetch the Upgrades by the interface (first IUpgradeWeaponRules p.e.), apply and than follow the next upgrade.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/179768253",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/9190#issuecomment-179768253",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/9190",
    "id": 179768253,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3OTc2ODI1Mw==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-04T10:50:01Z",
    "updated_at": "2016-02-04T10:52:42Z",
    "author_association": "MEMBER",
    "body": "Unfortunately there's a lot of context missing from this ticket because most of the recent discussion about this feature was done on IRC or not documented at all.\n\nInterfaces are cleaner if you want to run each set of upgrade types in isolation (e.g. all actor rules, then all weapon rules, then all tileset rules, etc), which is what the current setup does.  For the new system we want to instead enumerate by upgrade rule so that the console output is sensible (listing each rule that is being applied, and then any manual steps that it may require), and also be able to take a copy of the yaml between each upgrade step so we can do a partial upgrade and save sane state if one of the rules fails (this then lets the modder manually fix their rules, and then run the command again to complete the upgrade).  This removes the benefit of the interfaces because we're already enumerating over all the rule objects - calling a no-op upgrade method isn't a big deal since performance isn't a concern, and this then reduces boilerplate.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/179779819",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/9190#issuecomment-179779819",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/9190",
    "id": 179779819,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3OTc3OTgxOQ==",
    "user": {
      "login": "jaimetotal",
      "id": 1637466,
      "node_id": "MDQ6VXNlcjE2Mzc0NjY=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1637466?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaimetotal",
      "html_url": "https://github.com/jaimetotal",
      "followers_url": "https://api.github.com/users/jaimetotal/followers",
      "following_url": "https://api.github.com/users/jaimetotal/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaimetotal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaimetotal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaimetotal/subscriptions",
      "organizations_url": "https://api.github.com/users/jaimetotal/orgs",
      "repos_url": "https://api.github.com/users/jaimetotal/repos",
      "events_url": "https://api.github.com/users/jaimetotal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaimetotal/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-04T11:20:04Z",
    "updated_at": "2016-02-04T11:20:04Z",
    "author_association": "NONE",
    "body": "Ok, later I will revise the design and update the suggestion.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/385268424",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/9190#issuecomment-385268424",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/9190",
    "id": 385268424,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTI2ODQyNA==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-29T17:45:28Z",
    "updated_at": "2018-04-29T17:45:28Z",
    "author_association": "MEMBER",
    "body": "Reverse-duplicate of #14600 and fixed by #14964.  I knew that I had written about this before!"
  }
]
