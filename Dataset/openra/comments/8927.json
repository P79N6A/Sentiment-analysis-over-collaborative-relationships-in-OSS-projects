[
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/127697594",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8927#issuecomment-127697594",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8927",
    "id": 127697594,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzY5NzU5NA==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-04T18:15:07Z",
    "updated_at": "2015-08-04T18:16:49Z",
    "author_association": "MEMBER",
    "body": "Can we please qualify the ActorInfo queries with `TraitInfo`?\n`actorInfo.HasTraitInfo<>`, `actorInfo.TraitInfo<>`, `actorInfo.TraitInfoOrDefault<>`?\nThis seems to be missing a version for querying multiple infos, so we may also need a `actorInfo.TraitInfosMatching<>`(?)\n\nActorInfo is (slightly) more than just a collection of TraitInfos, so it's a bit weird not to qualify this further.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/127699965",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8927#issuecomment-127699965",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8927",
    "id": 127699965,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzY5OTk2NQ==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-04T18:21:52Z",
    "updated_at": "2015-08-04T18:21:52Z",
    "author_association": "MEMBER",
    "body": "Another idea could be to add more linq-like named queries to the TraitInfo dictionary: `actorInfo.Traits.Contains<FooInfo>()`, `actorInfo.Traits.First<FooInfo>()`, `actorInfo.Traits.FirstOrDefault<FooInfo>()`, `actorInfo.Traits.ManyOrDefault<FooInfo>()`.\nI think I prefer this to my earlier suggestion above.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/127700077",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8927#issuecomment-127700077",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8927",
    "id": 127700077,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzcwMDA3Nw==",
    "user": {
      "login": "atlimit8",
      "id": 4957137,
      "node_id": "MDQ6VXNlcjQ5NTcxMzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4957137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/atlimit8",
      "html_url": "https://github.com/atlimit8",
      "followers_url": "https://api.github.com/users/atlimit8/followers",
      "following_url": "https://api.github.com/users/atlimit8/following{/other_user}",
      "gists_url": "https://api.github.com/users/atlimit8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/atlimit8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/atlimit8/subscriptions",
      "organizations_url": "https://api.github.com/users/atlimit8/orgs",
      "repos_url": "https://api.github.com/users/atlimit8/repos",
      "events_url": "https://api.github.com/users/atlimit8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/atlimit8/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-04T18:22:06Z",
    "updated_at": "2015-08-04T18:22:06Z",
    "author_association": "MEMBER",
    "body": "How about _info_`.[Has]Trait[OrDefault]` and _actor_`.[Has]TraitInfo[OrDefault]`?\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/127708006",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8927#issuecomment-127708006",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8927",
    "id": 127708006,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzcwODAwNg==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-04T18:43:27Z",
    "updated_at": "2015-08-04T18:45:30Z",
    "author_association": "MEMBER",
    "body": "Adding the intermediate `.Traits.` didn't go down well, so perhaps `actor[Info].FirstTrait[Info]<>`, `actor[Info].FirstTrait[Info]OrDefault<>`, `actor[Info].Trait[Info]s<>`?\n\nYour future prs that increase the strictness around dependencies might also want `actor[Info].SingleTrait[Info]<>`... but on the other hand that probably wants to be covered by the `Requires`?\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/127915450",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8927#issuecomment-127915450",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8927",
    "id": 127915450,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzkxNTQ1MA==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-05T08:37:32Z",
    "updated_at": "2015-08-05T08:38:07Z",
    "author_association": "MEMBER",
    "body": "Another thought to consider while we're bouncing around ideas: we can make this even more consistent with linq by allowing a filter function to be passed to the methods that make sense.  We could then replace e.g.:\n\n```\nself.TraitsImplementing<Turreted>().FirstOrDefault(t => t.Name == info.Turret)\n```\n\nwith\n\n```\nself.FirstTraitOrDefault<Turreted>(t => t.Name == info.Turret)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/127946716",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8927#issuecomment-127946716",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8927",
    "id": 127946716,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzk0NjcxNg==",
    "user": {
      "login": "atlimit8",
      "id": 4957137,
      "node_id": "MDQ6VXNlcjQ5NTcxMzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4957137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/atlimit8",
      "html_url": "https://github.com/atlimit8",
      "followers_url": "https://api.github.com/users/atlimit8/followers",
      "following_url": "https://api.github.com/users/atlimit8/following{/other_user}",
      "gists_url": "https://api.github.com/users/atlimit8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/atlimit8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/atlimit8/subscriptions",
      "organizations_url": "https://api.github.com/users/atlimit8/orgs",
      "repos_url": "https://api.github.com/users/atlimit8/repos",
      "events_url": "https://api.github.com/users/atlimit8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/atlimit8/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-05T10:12:03Z",
    "updated_at": "2015-08-05T10:12:03Z",
    "author_association": "MEMBER",
    "body": "Already doing it.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/127947497",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8927#issuecomment-127947497",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8927",
    "id": 127947497,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyNzk0NzQ5Nw==",
    "user": {
      "login": "atlimit8",
      "id": 4957137,
      "node_id": "MDQ6VXNlcjQ5NTcxMzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4957137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/atlimit8",
      "html_url": "https://github.com/atlimit8",
      "followers_url": "https://api.github.com/users/atlimit8/followers",
      "following_url": "https://api.github.com/users/atlimit8/following{/other_user}",
      "gists_url": "https://api.github.com/users/atlimit8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/atlimit8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/atlimit8/subscriptions",
      "organizations_url": "https://api.github.com/users/atlimit8/orgs",
      "repos_url": "https://api.github.com/users/atlimit8/repos",
      "events_url": "https://api.github.com/users/atlimit8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/atlimit8/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-05T10:13:45Z",
    "updated_at": "2015-08-05T10:13:45Z",
    "author_association": "MEMBER",
    "body": "It has the added bonus of avoiding the creation unnecessary `IEnumerable`s.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/128517884",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8927#issuecomment-128517884",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8927",
    "id": 128517884,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODUxNzg4NA==",
    "user": {
      "login": "abcdefg30",
      "id": 7704140,
      "node_id": "MDQ6VXNlcjc3MDQxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7704140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abcdefg30",
      "html_url": "https://github.com/abcdefg30",
      "followers_url": "https://api.github.com/users/abcdefg30/followers",
      "following_url": "https://api.github.com/users/abcdefg30/following{/other_user}",
      "gists_url": "https://api.github.com/users/abcdefg30/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abcdefg30/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abcdefg30/subscriptions",
      "organizations_url": "https://api.github.com/users/abcdefg30/orgs",
      "repos_url": "https://api.github.com/users/abcdefg30/repos",
      "events_url": "https://api.github.com/users/abcdefg30/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abcdefg30/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-06T21:41:40Z",
    "updated_at": "2015-08-06T21:41:40Z",
    "author_association": "MEMBER",
    "body": "Needs a rebase.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/128838242",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8927#issuecomment-128838242",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8927",
    "id": 128838242,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyODgzODI0Mg==",
    "user": {
      "login": "atlimit8",
      "id": 4957137,
      "node_id": "MDQ6VXNlcjQ5NTcxMzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4957137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/atlimit8",
      "html_url": "https://github.com/atlimit8",
      "followers_url": "https://api.github.com/users/atlimit8/followers",
      "following_url": "https://api.github.com/users/atlimit8/following{/other_user}",
      "gists_url": "https://api.github.com/users/atlimit8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/atlimit8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/atlimit8/subscriptions",
      "organizations_url": "https://api.github.com/users/atlimit8/orgs",
      "repos_url": "https://api.github.com/users/atlimit8/repos",
      "events_url": "https://api.github.com/users/atlimit8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/atlimit8/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-07T21:33:07Z",
    "updated_at": "2015-08-07T21:33:07Z",
    "author_association": "MEMBER",
    "body": "WIP now\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/129236288",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8927#issuecomment-129236288",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8927",
    "id": 129236288,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTIzNjI4OA==",
    "user": {
      "login": "atlimit8",
      "id": 4957137,
      "node_id": "MDQ6VXNlcjQ5NTcxMzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4957137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/atlimit8",
      "html_url": "https://github.com/atlimit8",
      "followers_url": "https://api.github.com/users/atlimit8/followers",
      "following_url": "https://api.github.com/users/atlimit8/following{/other_user}",
      "gists_url": "https://api.github.com/users/atlimit8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/atlimit8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/atlimit8/subscriptions",
      "organizations_url": "https://api.github.com/users/atlimit8/orgs",
      "repos_url": "https://api.github.com/users/atlimit8/repos",
      "events_url": "https://api.github.com/users/atlimit8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/atlimit8/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-09T20:40:30Z",
    "updated_at": "2015-08-09T20:40:35Z",
    "author_association": "MEMBER",
    "body": "Rebased and more or less finished (with part 1).\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/129552396",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8927#issuecomment-129552396",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8927",
    "id": 129552396,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTU1MjM5Ng==",
    "user": {
      "login": "RoosterDragon",
      "id": 3399086,
      "node_id": "MDQ6VXNlcjMzOTkwODY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3399086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RoosterDragon",
      "html_url": "https://github.com/RoosterDragon",
      "followers_url": "https://api.github.com/users/RoosterDragon/followers",
      "following_url": "https://api.github.com/users/RoosterDragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/RoosterDragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RoosterDragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RoosterDragon/subscriptions",
      "organizations_url": "https://api.github.com/users/RoosterDragon/orgs",
      "repos_url": "https://api.github.com/users/RoosterDragon/repos",
      "events_url": "https://api.github.com/users/RoosterDragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RoosterDragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-10T18:07:49Z",
    "updated_at": "2015-08-10T18:07:49Z",
    "author_association": "MEMBER",
    "body": "What are the motivations behind providing custom enumerators/methods for Where-type queries and a custom ToArray implementation?\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/129565208",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8927#issuecomment-129565208",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8927",
    "id": 129565208,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTU2NTIwOA==",
    "user": {
      "login": "atlimit8",
      "id": 4957137,
      "node_id": "MDQ6VXNlcjQ5NTcxMzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4957137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/atlimit8",
      "html_url": "https://github.com/atlimit8",
      "followers_url": "https://api.github.com/users/atlimit8/followers",
      "following_url": "https://api.github.com/users/atlimit8/following{/other_user}",
      "gists_url": "https://api.github.com/users/atlimit8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/atlimit8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/atlimit8/subscriptions",
      "organizations_url": "https://api.github.com/users/atlimit8/orgs",
      "repos_url": "https://api.github.com/users/atlimit8/repos",
      "events_url": "https://api.github.com/users/atlimit8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/atlimit8/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-10T18:58:08Z",
    "updated_at": "2015-08-10T18:59:23Z",
    "author_association": "MEMBER",
    "body": "@RoosterDragon, hopefully less state/overhead for commonly used patterns. As I mentioned on the IRC channel, it would be nice to see how this affects performance. The trait to trait info lookup changes may reduce performance; hopefully, refactoring `TraitDictionary` for use by both `Actor` for traits and `ActorInfo` for trait info will help.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/129569793",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8927#issuecomment-129569793",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8927",
    "id": 129569793,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTU2OTc5Mw==",
    "user": {
      "login": "RoosterDragon",
      "id": 3399086,
      "node_id": "MDQ6VXNlcjMzOTkwODY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3399086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RoosterDragon",
      "html_url": "https://github.com/RoosterDragon",
      "followers_url": "https://api.github.com/users/RoosterDragon/followers",
      "following_url": "https://api.github.com/users/RoosterDragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/RoosterDragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RoosterDragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RoosterDragon/subscriptions",
      "organizations_url": "https://api.github.com/users/RoosterDragon/orgs",
      "repos_url": "https://api.github.com/users/RoosterDragon/repos",
      "events_url": "https://api.github.com/users/RoosterDragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RoosterDragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-10T19:11:32Z",
    "updated_at": "2015-08-10T19:11:32Z",
    "author_association": "MEMBER",
    "body": "I would suggest dropping the custom Where enumerators. If there's a perf problem from a Where the much better solution would be to use a plain old loop which skips all possible overhead of enumerators in the first place. The overloads that take predicates are useful, but I would just implement them in terms of the existing LINQ operators for simplicity.\n\nI don't think the complexity of the custom ToArray justifies the gains - we don't seem to call it often enough unless you can point me at a common use case that I'm not familiar with (I don't poke around traits too much so I could easily have missed something). Typically I would imagine calling the usual LINQ ToArray would be good enough.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/129596935",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8927#issuecomment-129596935",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8927",
    "id": 129596935,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTU5NjkzNQ==",
    "user": {
      "login": "atlimit8",
      "id": 4957137,
      "node_id": "MDQ6VXNlcjQ5NTcxMzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4957137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/atlimit8",
      "html_url": "https://github.com/atlimit8",
      "followers_url": "https://api.github.com/users/atlimit8/followers",
      "following_url": "https://api.github.com/users/atlimit8/following{/other_user}",
      "gists_url": "https://api.github.com/users/atlimit8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/atlimit8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/atlimit8/subscriptions",
      "organizations_url": "https://api.github.com/users/atlimit8/orgs",
      "repos_url": "https://api.github.com/users/atlimit8/repos",
      "events_url": "https://api.github.com/users/atlimit8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/atlimit8/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-10T20:28:41Z",
    "updated_at": "2015-08-10T20:28:41Z",
    "author_association": "MEMBER",
    "body": "I might be able to use `ForEachActorHavingTrait<T>([Func<actor, T, bool> predicate], Action<Actor> body)`, `CountActorsHavingTrait<T>([Func<actor, T, bool> predicate])`, `ForEachActorTrait<T>(Action<Actor, T> body)` instead of  `ActorsWithTrait([Func<actor, T, bool> predicate])`\n\n``` C#\nPlayerResources.Tick(Actor self) :\n   ResourceCapacity = self.World.ActorsWithTrait<IStoreResources>((a, t) => a.Owner == owner)..Sum(a => a.Trait.Capacity);\n---\nOpenRA.Game/World.cs-280-                               using (new PerfSample(\"tick_idle\"))\nOpenRA.Game/World.cs:281:                                       foreach (var ni in ActorsWithTrait<INotifyIdle>())\nOpenRA.Game/World.cs-282-                                               if (ni.Actor.IsIdle)\nOpenRA.Game/World.cs-283-                                                       ni.Trait.TickIdle(ni.Actor);\n---\nOpenRA.Game/World.cs:289:                               ActorsWithTrait<ITick>().DoTimed(x => x.Trait.Tick(x.Actor), \"Trait\");\n--\nOpenRA.Game/World.cs-299-               public void TickRender(WorldRenderer wr)\nOpenRA.Game/World.cs-300-               {\nOpenRA.Game/World.cs:301:                       ActorsWithTrait<ITickRender>().DoTimed(x => x.Trait.TickRender(wr, x.Actor), \"Render\");\nOpenRA.Game/World.cs-302-               }\n---\nOpenRA.Game/World.cs-324-                               // hash all the traits that tick\nOpenRA.Game/World.cs:325:                               foreach (var x in ActorsWithTrait<ISync>())\nOpenRA.Game/World.cs-326-                                       ret += n++ * (int)(1 + x.Actor.ActorID) * Sync.CalculateSyncHash(x.Trait);\n---\nOpenRA.Mods.Common/AI/BaseBuilder.cs:62:                                var currentBuildings = world.ActorsWithTrait<Building>((a, b) => a.Owner == player).Count();\nOpenRA.Mods.Common/AI/BaseBuilder.cs:63:                                var baseProviders = world.ActorsWithTrait<BaseProvider>((a, b) => a.Owner == player).Count();\n---\nOpenRA.Mods.Common/AI/BaseBuilder.cs:87:                                var currentBases = world.ActorsWithTrait<BaseProvider>((a, b) => a.Owner == player).Count();\n---\nOpenRA.Mods.Common/AI/BaseBuilder.cs:100:                       playerBuildings = world.ActorsWithTrait<Building>((a, b) => a.Owner == player)\nOpenRA.Mods.Common/AI/BaseBuilder.cs-101-                               .Select(a => a.Actor)\nOpenRA.Mods.Common/AI/BaseBuilder.cs-102-                               .ToArray();\n---\nOpenRA.Mods.Common/AI/BaseBuilder.cs:152:                                               cachedBuildings = world.ActorsWithTrait<Building>((a, b) => a.Owner == player).Count();\nOpenRA.Mods.Common/AI/BaseBuilder.cs:153:                                               cachedBases = world.ActorsWithTrait<BaseProvider>((a, b) => a.Owner == player).Count();\n---\nOpenRA.Mods.Common/AI/HackyAI.cs-348-                   var myUnits = Player.World\nOpenRA.Mods.Common/AI/HackyAI.cs:349:                           .ActorsWithTrait<IPositionable>((a, p) => a.Owner == Player)\nOpenRA.Mods.Common/AI/HackyAI.cs-350-                           .Select(a => a.Actor.Info.Name).ToList();\n---\nOpenRA.Mods.Common/AI/HackyAI.cs-361-           int CountBuilding(string frac, Player owner)\nOpenRA.Mods.Common/AI/HackyAI.cs-362-           {\nOpenRA.Mods.Common/AI/HackyAI.cs:363:                   return World.ActorsWithTrait<Building>((a, b) => a.Owner == owner && a.Info.Name == frac).Count();\nOpenRA.Mods.Common/AI/HackyAI.cs-364-           }\nOpenRA.Mods.Common/AI/HackyAI.cs-365-\nOpenRA.Mods.Common/AI/HackyAI.cs-366-           int CountUnits(string unit, Player owner)\nOpenRA.Mods.Common/AI/HackyAI.cs-367-           {\nOpenRA.Mods.Common/AI/HackyAI.cs:368:                   return World.ActorsWithTrait<IPositionable>((a, p) => a.Owner == owner && a.Info.Name == unit).Count();\nOpenRA.Mods.Common/AI/HackyAI.cs-369-           }\n---\nOpenRA.Mods.Common/AI/HackyAI.cs:376:                   return World.ActorsWithTrait<Building>((a, b) => a.Owner == owner && Info.BuildingCommonNames[commonName].Contains(a.Info.Name))\nOpenRA.Mods.Common/AI/HackyAI.cs-377-                           .Count();\n---\nOpenRA.Mods.Common/AI/HackyAI.cs:686:                   var newUnits = self.World.ActorsWithTrait<IPositionable>((a, p) =>\nOpenRA.Mods.Common/AI/HackyAI.cs-687-                           a.Owner == Player && !a.Info.TraitInfosAny<BaseBuildingInfo>() && !activeUnits.Contains(a))\nOpenRA.Mods.Common/AI/HackyAI.cs-688-                           .Select(a => a.Actor);\n---\nOpenRA.Mods.Common/AI/HackyAI.cs:784:                   var buildings = self.World.ActorsWithTrait<RallyPoint>((a, rp) => a.Owner == Player &&\nOpenRA.Mods.Common/AI/HackyAI.cs-785-                           !IsRallyPointValid(rp.Location, a.Info.TraitInfoOrDefault<BuildingInfo>()))\nOpenRA.Mods.Common/AI/HackyAI.cs-786-                           .ToArray();\n---\nOpenRA.Mods.Common/AI/HackyAI.cs-978-           internal IEnumerable<ProductionQueue> FindQueues(string category)\nOpenRA.Mods.Common/AI/HackyAI.cs-979-           {\nOpenRA.Mods.Common/AI/HackyAI.cs:980:                   return World.ActorsWithTrait<ProductionQueue>((a, q) => a.Owner == Player && q.Info.Type == category && q.Enabled)\nOpenRA.Mods.Common/AI/HackyAI.cs-981-                           .Select(a => a.Trait);\nOpenRA.Mods.Common/AI/HackyAI.cs-982-           }\n---\nOpenRA.Mods.Common/AI/States/StateBase.cs:34:                   var buildings = squad.World.ActorsWithTrait<Building>((a, b) => a.Owner == squad.Bot.Player)\nOpenRA.Mods.Common/AI/States/StateBase.cs-35-                           .Select(a => a.Actor).ToList();\n---\nOpenRA.Mods.Common/Activities/Air/HeliReturn.cs-46-                             var rearmBuildings = heli.Info.RearmBuildings;\nOpenRA.Mods.Common/Activities/Air/HeliReturn.cs:47:                             var nearestHpad = self.World.ActorsWithTrait<Reservable>((a, r) => a.Owner == self.Owner && rearmBuildings.Contains(a.Info.Name))\nOpenRA.Mods.Common/Activities/Air/HeliReturn.cs-48-                                                                     .Select(a => a.Actor)\nOpenRA.Mods.Common/Activities/Air/HeliReturn.cs-49-                                                                     .ClosestTo(self);\n---\n...\n```\n\n`ToArray` is also used by activity constructors:\n\n```\nOpenRA.Mods.Common/Activities/Air/FlyAttack.cs:33:                      ammoPools = self.TraitsToArray<AmmoPool>();\nOpenRA.Mods.Common/Activities/Air/HeliAttack.cs:49:                     ammoPools = self.TraitsToArray<AmmoPool>();\nOpenRA.Mods.Common/Activities/Demolish.cs:35:                   demolishables = target.TraitsToArray<IDemolishable>();\nOpenRA.Mods.Common/Activities/Move/Drag.cs:31:                  moveDisablers = self.TraitsToArray<IDisableMove>();\nOpenRA.Mods.Common/Activities/Move/Move.cs:46:                  moveDisablers = self.TraitsToArray<IDisableMove>();\nOpenRA.Mods.Common/Activities/Move/Move.cs:63:                  moveDisablers = self.TraitsToArray<IDisableMove>();\nOpenRA.Mods.Common/Activities/Move/Move.cs:74:                  moveDisablers = self.TraitsToArray<IDisableMove>();\nOpenRA.Mods.Common/Activities/Move/Move.cs:85:                  moveDisablers = self.TraitsToArray<IDisableMove>();\nOpenRA.Mods.Common/Activities/Move/Move.cs:100:                 moveDisablers = self.TraitsToArray<IDisableMove>();\nOpenRA.Mods.Common/Activities/Move/Move.cs:118:                 moveDisablers = self.TraitsToArray<IDisableMove>();\nOpenRA.Mods.Common/Activities/Rearm.cs:25:                      ammoPools = self.TraitsToArray<AmmoPool>(p => !p.Info.SelfReloads);\nOpenRA.Mods.Common/Activities/Turn.cs:25:                       moveDisablers = self.TraitsToArray<IDisableMove>();\nOpenRA.Mods.RA/Activities/LayMines.cs:36:                       ammoPools = self.TraitsToArray<AmmoPool>();\n```\n\nI suppose it depends on how often activities are constructed. I know the AI can give several orders in a short amount of time, but I don't know how much is activity construction.\n\nI'm looking at using LINQ and removing enumerators for the other stuff right now.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/129611338",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8927#issuecomment-129611338",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8927",
    "id": 129611338,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEyOTYxMTMzOA==",
    "user": {
      "login": "RoosterDragon",
      "id": 3399086,
      "node_id": "MDQ6VXNlcjMzOTkwODY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3399086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RoosterDragon",
      "html_url": "https://github.com/RoosterDragon",
      "followers_url": "https://api.github.com/users/RoosterDragon/followers",
      "following_url": "https://api.github.com/users/RoosterDragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/RoosterDragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RoosterDragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RoosterDragon/subscriptions",
      "organizations_url": "https://api.github.com/users/RoosterDragon/orgs",
      "repos_url": "https://api.github.com/users/RoosterDragon/repos",
      "events_url": "https://api.github.com/users/RoosterDragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RoosterDragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-10T21:23:40Z",
    "updated_at": "2015-08-10T21:23:40Z",
    "author_association": "MEMBER",
    "body": "I am for introducing things like ToArray and Count where you can definitely do better than the standard LINQ call because you have information it doesn't, provided the current calls are actually slow enough to warrant the extra code (I can trust the inbuilt ToArray, but I don't want to maintain a custom one unless it's actually buying me something, you know?) so I'd be down for those if profiling says it's worthwhile.\n\nStuff like ForEachActorHavingTrait won't ever be worthwhile performance wise though. There's so much overhead from allocating and invoking the delegates and you don't even win clarity since a plain loop would be just as easy to understand in this case.\n\nAnyway I'm waffling a bit here. I'll try and get you some perf numbers when I get a chance. :)\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/132328766",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8927#issuecomment-132328766",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8927",
    "id": 132328766,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMjMyODc2Ng==",
    "user": {
      "login": "abcdefg30",
      "id": 7704140,
      "node_id": "MDQ6VXNlcjc3MDQxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7704140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abcdefg30",
      "html_url": "https://github.com/abcdefg30",
      "followers_url": "https://api.github.com/users/abcdefg30/followers",
      "following_url": "https://api.github.com/users/abcdefg30/following{/other_user}",
      "gists_url": "https://api.github.com/users/abcdefg30/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abcdefg30/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abcdefg30/subscriptions",
      "organizations_url": "https://api.github.com/users/abcdefg30/orgs",
      "repos_url": "https://api.github.com/users/abcdefg30/repos",
      "events_url": "https://api.github.com/users/abcdefg30/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abcdefg30/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-18T19:40:17Z",
    "updated_at": "2015-08-18T19:40:17Z",
    "author_association": "MEMBER",
    "body": "Needs a rebase.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/133736560",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8927#issuecomment-133736560",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8927",
    "id": 133736560,
    "node_id": "MDEyOklzc3VlQ29tbWVudDEzMzczNjU2MA==",
    "user": {
      "login": "RoosterDragon",
      "id": 3399086,
      "node_id": "MDQ6VXNlcjMzOTkwODY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3399086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RoosterDragon",
      "html_url": "https://github.com/RoosterDragon",
      "followers_url": "https://api.github.com/users/RoosterDragon/followers",
      "following_url": "https://api.github.com/users/RoosterDragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/RoosterDragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RoosterDragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RoosterDragon/subscriptions",
      "organizations_url": "https://api.github.com/users/RoosterDragon/orgs",
      "repos_url": "https://api.github.com/users/RoosterDragon/repos",
      "events_url": "https://api.github.com/users/RoosterDragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RoosterDragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-22T18:11:33Z",
    "updated_at": "2015-08-22T18:11:33Z",
    "author_association": "MEMBER",
    "body": "Once you get a chance to rebase, I'd be interested in profiling a version updated with comments so far.\n\nIn particular I've noticed the existing `HasTrait` is fairly allocation-heavy and it would be interesting to see if switching that to use the Infos instead makes much difference there.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/149040858",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/8927#issuecomment-149040858",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/8927",
    "id": 149040858,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0OTA0MDg1OA==",
    "user": {
      "login": "atlimit8",
      "id": 4957137,
      "node_id": "MDQ6VXNlcjQ5NTcxMzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4957137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/atlimit8",
      "html_url": "https://github.com/atlimit8",
      "followers_url": "https://api.github.com/users/atlimit8/followers",
      "following_url": "https://api.github.com/users/atlimit8/following{/other_user}",
      "gists_url": "https://api.github.com/users/atlimit8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/atlimit8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/atlimit8/subscriptions",
      "organizations_url": "https://api.github.com/users/atlimit8/orgs",
      "repos_url": "https://api.github.com/users/atlimit8/repos",
      "events_url": "https://api.github.com/users/atlimit8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/atlimit8/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-18T19:31:49Z",
    "updated_at": "2015-10-18T19:31:49Z",
    "author_association": "MEMBER",
    "body": "Closing for now.\n"
  }
]
