[
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/454957717",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/16069#issuecomment-454957717",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/16069",
    "id": 454957717,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NDk1NzcxNw==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-16T21:52:28Z",
    "updated_at": "2019-01-16T21:52:28Z",
    "author_association": "MEMBER",
    "body": "Can you please move the `KillSelf` activity over to #16065?\r\nThis fits in with our plan to get rid of `CallFunc` completely, and it will be better to get that PR reviewed and merged first, before dealing with this one."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/457873867",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/16069#issuecomment-457873867",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/16069",
    "id": 457873867,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Nzg3Mzg2Nw==",
    "user": {
      "login": "obrakmann",
      "id": 4331210,
      "node_id": "MDQ6VXNlcjQzMzEyMTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4331210?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/obrakmann",
      "html_url": "https://github.com/obrakmann",
      "followers_url": "https://api.github.com/users/obrakmann/followers",
      "following_url": "https://api.github.com/users/obrakmann/following{/other_user}",
      "gists_url": "https://api.github.com/users/obrakmann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/obrakmann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/obrakmann/subscriptions",
      "organizations_url": "https://api.github.com/users/obrakmann/orgs",
      "repos_url": "https://api.github.com/users/obrakmann/repos",
      "events_url": "https://api.github.com/users/obrakmann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/obrakmann/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-26T23:05:35Z",
    "updated_at": "2019-01-26T23:05:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "I don't think this will fix #15632.\r\n\r\n1) Cancelling the next activities instead of nulling the field will make matters worse.  Note that cancelling an activity won't keep it from running when its turn comes. Nulling the field however will make sure that the activity will never run.\r\n\r\n2) Cancellation is already propagated to children, and the change you did is a no-op (ChildActivity already returns null if the child is cancelled, have a look at the getter).\r\n\r\nRegarding the `IsInterruptible` flag on `DeliverResources`: I have no idea why it's set, but it has always been uninterruptible: https://github.com/OpenRA/OpenRA/commit/2c66ee8c13e1e2f518882125763868966cf312dc#diff-f3b4912653a54427d3f6ec98eb8399bd. If it works without it, I'm fine with removing it."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/457874267",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/16069#issuecomment-457874267",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/16069",
    "id": 457874267,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Nzg3NDI2Nw==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-26T23:12:24Z",
    "updated_at": "2019-01-26T23:12:24Z",
    "author_association": "MEMBER",
    "body": "The main issue wrt 1 is when you have an uncancellable activity queued after a cancellable one. Nulling it out can lead to broken things, and even worse workarounds like\r\n\r\nhttps://github.com/OpenRA/OpenRA/blob/60fcf5951c13a4a4632a9b9503726bc75ef0b83e/OpenRA.Mods.Cnc/Traits/Chronoshiftable.cs#L83-L97\r\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/457918035",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/16069#issuecomment-457918035",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/16069",
    "id": 457918035,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NzkxODAzNQ==",
    "user": {
      "login": "tovl",
      "id": 12049990,
      "node_id": "MDQ6VXNlcjEyMDQ5OTkw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/12049990?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tovl",
      "html_url": "https://github.com/tovl",
      "followers_url": "https://api.github.com/users/tovl/followers",
      "following_url": "https://api.github.com/users/tovl/following{/other_user}",
      "gists_url": "https://api.github.com/users/tovl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tovl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tovl/subscriptions",
      "organizations_url": "https://api.github.com/users/tovl/orgs",
      "repos_url": "https://api.github.com/users/tovl/repos",
      "events_url": "https://api.github.com/users/tovl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tovl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-27T13:30:31Z",
    "updated_at": "2019-01-27T13:30:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "@obrakmann nr. 1:\r\nYes, that is the entire point of this PR. Cancelled activities _should_ keep running when their turn comes so they can handle their cancellation themselves. This is actually important for two reasons: The first, as already mentioned by @pchote, is that some activities should not be cancellable at all and therefore should be able to keep running when the previous activities in the queue are cancelled. This cannot happen when the entire chain of activities is broken by nulling an activity somewhere in the chain. This is also what happened with DeliverResources: Even though it was set to be not interruptible, it always was de facto interruptible because of this. Of course, in this case, it should have just been interruptible in the first place.\r\n\r\nThe second reason is to give activities the chance to perform clean-up actions upon cancellation or to allow them to properly finish before nulling. Now, you might say that this is irrelevant if the activity is still queued when cancelled and never had a chance to actually run, but there are use-cases for this.\r\n\r\nMaybe a bit of context is in order:\r\nThe reason I wanted to fix this now, is because I was working on a fix for issue #15726. The problem there is that the overlay is placed when the order is given, but it is never removed until a new order to lay mines is given to that unit. The proper fix, in my opinion, would be to let the LayMines activity remove the overlay when it is done or when it is cancelled. However, this would not work if it was queued after another order and Laymines would just be nulled before having a chance to clean up.\r\n\r\nI think this same principle would also be very helpful in tackling issue #2598.\r\n\r\n@obrakmann nr. 2:\r\nYou're totally right. I should have seen that. I guess the enum thing confused me.\r\n\r\nLast point:\r\nI do realize now that this will not fix all of issue #15632.  There is still the mess with SequenceActivities. I got a firsthand encounter with that in my first try for PR #16105. My first attempt actually used formal childactivities, but that was completely broken by the Attack activity which absolutely will not play nice as a child, because of the way it uses SequenceActivities. I might try to revise those activities that use it in this PR or it might be best to make another PR for that."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/457938600",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/16069#issuecomment-457938600",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/16069",
    "id": 457938600,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1NzkzODYwMA==",
    "user": {
      "login": "tovl",
      "id": 12049990,
      "node_id": "MDQ6VXNlcjEyMDQ5OTkw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/12049990?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tovl",
      "html_url": "https://github.com/tovl",
      "followers_url": "https://api.github.com/users/tovl/followers",
      "following_url": "https://api.github.com/users/tovl/following{/other_user}",
      "gists_url": "https://api.github.com/users/tovl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tovl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tovl/subscriptions",
      "organizations_url": "https://api.github.com/users/tovl/orgs",
      "repos_url": "https://api.github.com/users/tovl/repos",
      "events_url": "https://api.github.com/users/tovl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tovl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-27T17:46:46Z",
    "updated_at": "2019-01-27T17:46:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased and removed redundant check on ChildActivity."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/457949947",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/16069#issuecomment-457949947",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/16069",
    "id": 457949947,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Nzk0OTk0Nw==",
    "user": {
      "login": "obrakmann",
      "id": 4331210,
      "node_id": "MDQ6VXNlcjQzMzEyMTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4331210?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/obrakmann",
      "html_url": "https://github.com/obrakmann",
      "followers_url": "https://api.github.com/users/obrakmann/followers",
      "following_url": "https://api.github.com/users/obrakmann/following{/other_user}",
      "gists_url": "https://api.github.com/users/obrakmann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/obrakmann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/obrakmann/subscriptions",
      "organizations_url": "https://api.github.com/users/obrakmann/orgs",
      "repos_url": "https://api.github.com/users/obrakmann/repos",
      "events_url": "https://api.github.com/users/obrakmann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/obrakmann/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-27T20:11:03Z",
    "updated_at": "2019-01-27T20:11:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think we have some different views regarding how activities should work. I'll explain my views:\r\n\r\n> This is actually important for two reasons: The first, as already mentioned by @pchote, is that some activities should not be cancellable at all and therefore should be able to keep running when the previous activities in the queue are cancelled.\r\n\r\n`IsInterruptible`, the way I see it, means that an activity cannot be cancelled *once it has started*. It does not mean \"this activity has to run, no matter what\". There is currently no way to express such a requirement, and I'm not sure how it should work, either. Should intermediate interruptible activities be cancelled, leaving only uninterruptible ones in the queue? Or should those stay? Would the uninterruptible activity still make sense without the preceding ones? If they stay, why even cancel at all? What about the activities following the uninterruptible one?\r\n\r\n> The second reason is to give activities the chance to perform clean-up actions upon cancellation or to allow them to properly finish before nulling. Now, you might say that this is irrelevant if the activity is still queued when cancelled and never had a chance to actually run\r\n\r\nYes, indeed :). An activity *must not* modify world state in its constructor, and neither should it rely on the world state during the constructor. If it does, it's a bug and must be fixed. And so from my point of view, there cannot be anything an activity would need to clean up before it had a chance to run.\r\n\r\n> I was working on a fix for issue #15726. The problem there is that the overlay is placed when the order is given, but it is never removed until a new order to lay mines is given to that unit.\r\n\r\nIMO, the proper fix there would be to catch a \"Stop\" order in `MineLayer`'s `ResolveOrder` method instead. There isn't any way (for a player) to resume a stopped mine-laying activity anyway short of re-submitting the same order again.\r\n\r\n@pchote's point regarding the dropped Teleport activity still remains, but I still maintain that the problem lies with `Move`, not with `Activity`.\r\n\r\n> I think this same principle would also be very helpful in tackling issue #2598.\r\n\r\nRight. IMO all the target line-drawing stuff should be moved out of any traits and be part of `Activity`. Then the constructor could flash the target line for a few seconds, and you'd walk the activity tree to display them.\r\n\r\n> @obrakmann nr. 2:\r\nYou're totally right. I should have seen that. I guess the enum thing confused me.\r\n\r\nNo problem at all, that's very subtle and easy to overlook.\r\n\r\n> I might try to revise those activities that use it in this PR or it might be best to make another PR for that.\r\n\r\nIt would be great if you could get a start at fixing all those places. In another PR, please ;)\r\n\r\nAnd just in case it comes across differently: I very much appreciate you working on fixing activities despite this discussion. It made me very happy indeed to say the least when I saw your AttackMove PR. I just think that this PR is either wrong or too early for the reasons stated above."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/457950575",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/16069#issuecomment-457950575",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/16069",
    "id": 457950575,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Nzk1MDU3NQ==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-27T20:19:21Z",
    "updated_at": "2019-01-27T20:19:21Z",
    "author_association": "MEMBER",
    "body": "> An activity must not modify world state in its constructor, and neither should it rely on the world state during the constructor. If it does, it's a bug and must be fixed. And so from my point of view, there cannot be anything an activity would need to clean up before it had a chance to run.\r\n\r\nThis is a key point, which has convinced me (mainly through an earlier discussion on IRC) that @obrakmann's mental model for activities is the best way forward.  If we have an activity that sets some state, lets other activities do their thing, then needs to clean up afterwards, then this probably wants to either be using child activities, or not use activities at all.\r\n\r\n#16067 just solved the main blocker for #14384, which i'm hoping we can resurrect to fix #2598 on a ~Next + 1 timescale."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/457954301",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/16069#issuecomment-457954301",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/16069",
    "id": 457954301,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Nzk1NDMwMQ==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-27T21:07:05Z",
    "updated_at": "2019-01-27T21:07:05Z",
    "author_association": "MEMBER",
    "body": "Re #15726 specifically: my preferred solution would be to get rid of that overlay completely.  This was a very early OpenRA feature, and it has IMO aged very poorly in both technical and usability perspectives."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/457958262",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/16069#issuecomment-457958262",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/16069",
    "id": 457958262,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Nzk1ODI2Mg==",
    "user": {
      "login": "tovl",
      "id": 12049990,
      "node_id": "MDQ6VXNlcjEyMDQ5OTkw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/12049990?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tovl",
      "html_url": "https://github.com/tovl",
      "followers_url": "https://api.github.com/users/tovl/followers",
      "following_url": "https://api.github.com/users/tovl/following{/other_user}",
      "gists_url": "https://api.github.com/users/tovl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tovl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tovl/subscriptions",
      "organizations_url": "https://api.github.com/users/tovl/orgs",
      "repos_url": "https://api.github.com/users/tovl/repos",
      "events_url": "https://api.github.com/users/tovl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tovl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-27T22:00:39Z",
    "updated_at": "2019-01-27T22:00:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Alright, I think you've got me convinced that  there is no real use-case for this. #15726 and #2598 can be solved in cleaner ways and I'm coming up short trying to think of any other examples. I'm still not quite convinced that the changes _here_ actually make things _worse_, but it's probably best not to rely on them.\r\n\r\n> And just in case it comes across differently: I very much appreciate you working on fixing activities despite this discussion.\r\n\r\nNo worries; That's part of peer review. ;)\r\nIn any case, I saw issue #15632 and thought this was the direction you guys wanted to go in. I had no idea this was so contentious. Perhaps it's best to close that issue or rename it.\r\n\r\n> It would be great if you could get a start at fixing all those places. In another PR, please ;)\r\n\r\nI'll see what I can do.\r\n\r\n>Re #15726 specifically: my preferred solution would be to get rid of that overlay completely. This was a very early OpenRA feature, and it has IMO aged very poorly in both technical and usability perspectives.\r\n\r\nHmm, so what do you propose instead? I think there should be some kind of visual indication. This isalready becoming a bit of an issue in light of #16065."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/457959347",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/16069#issuecomment-457959347",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/16069",
    "id": 457959347,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Nzk1OTM0Nw==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-27T22:15:32Z",
    "updated_at": "2019-01-27T22:15:51Z",
    "author_association": "MEMBER",
    "body": "> I saw issue #15632 and thought this was the direction you guys wanted to go in.\r\n\r\nFor what its worth, it *was* the direction that we wanted to take, until @obrakmann returned to prove us wrong :smile:\r\n\r\n> Hmm, so what do you propose instead? I think there should be some kind of visual indication.\r\n\r\nI wish I had a clearly better alternative. A few ideas that i'm not convinced about include:\r\n* Make the deploy command define a (for example) 5x5 range circle that sticks to the map like the tiles, but uses the standard circle rendering.  This solves the inconsistent force target behaviour, but none of the other issues.  It also removes the ability to lay only one mine at a time.\r\n* Have a dedicated minefield planner on the commandbar. This would be a lot of dedicated UI for a niche feature, and the specific behavior would need to be defined.\r\n* Replace the cell-based mines with something like C&C generals, and let them be flung out in all directions with a single deploy command. This would conflict with the requirements for mines in the campaign missions, and doesn't make much physical sense.\r\n* Give up and remove the custom targeter without a replacement, keeping 1 deploy = 1 mine behaviour from the original game.  This is the simplest and cleanest option, but wouldn't be popular with the few people who do use them."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/457962877",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/16069#issuecomment-457962877",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/16069",
    "id": 457962877,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Nzk2Mjg3Nw==",
    "user": {
      "login": "tovl",
      "id": 12049990,
      "node_id": "MDQ6VXNlcjEyMDQ5OTkw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/12049990?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tovl",
      "html_url": "https://github.com/tovl",
      "followers_url": "https://api.github.com/users/tovl/followers",
      "following_url": "https://api.github.com/users/tovl/following{/other_user}",
      "gists_url": "https://api.github.com/users/tovl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tovl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tovl/subscriptions",
      "organizations_url": "https://api.github.com/users/tovl/orgs",
      "repos_url": "https://api.github.com/users/tovl/repos",
      "events_url": "https://api.github.com/users/tovl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tovl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-27T23:05:21Z",
    "updated_at": "2019-01-27T23:05:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hmm, I think that of those options the current mechanic is actually the superior one in principle; It just needs some polish. I'm already working on solving some of the polish issues. If anything I'd say going back to the old-school mechanics would be throwing away the child with the bathwater, so to say.\r\n\r\nIt seems the only really fundamental problem is that it overloads force target, and in the current RA minelayer that is a moot point considering it doesn't have a weapon. Still, that needs to be resolved eventually, especially for third-party mods. For instance, I can imagine that some mods might want to have a unit that replicates the C&C3 APC behavior. Which means it would need to be able to attack, deploy units and drop mines. So I'd say that overloading deploy is not necessarily any better than overloading force attack.\r\n\r\nI think the best, most generic solution would actually be to define a new hotkey especially for miscellaneous \"special\" abilities. This might then also be used for for instance chrono tanks or any other quirky mechanics that mods might want to give a unit. This would probably need to go hand-in-hand with a new \"unit\" panel a la e.g. C&C3. Keep the deploy action purely for transformation and cargo unload.\r\n\r\nIn the short term though, force attack is fine. I was thinking you were mainly talking about the visuals there. I'd say rendering beneath the actors might go a long way, but I'm not sure how to do that."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/457976996",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/16069#issuecomment-457976996",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/16069",
    "id": 457976996,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Nzk3Njk5Ng==",
    "user": {
      "login": "reaperrr",
      "id": 2857877,
      "node_id": "MDQ6VXNlcjI4NTc4Nzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2857877?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reaperrr",
      "html_url": "https://github.com/reaperrr",
      "followers_url": "https://api.github.com/users/reaperrr/followers",
      "following_url": "https://api.github.com/users/reaperrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/reaperrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reaperrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reaperrr/subscriptions",
      "organizations_url": "https://api.github.com/users/reaperrr/orgs",
      "repos_url": "https://api.github.com/users/reaperrr/repos",
      "events_url": "https://api.github.com/users/reaperrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reaperrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T01:57:58Z",
    "updated_at": "2019-01-28T01:58:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Give up and remove the custom targeter without a replacement, keeping 1 deploy = 1 mine behaviour from the original game. This is the simplest and cleanest option, but wouldn't be popular with the few people who do use them.\r\n\r\nI wonder whether that would really be such a showstopper if deploy can be queued."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/458247756",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/16069#issuecomment-458247756",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/16069",
    "id": 458247756,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODI0Nzc1Ng==",
    "user": {
      "login": "tovl",
      "id": 12049990,
      "node_id": "MDQ6VXNlcjEyMDQ5OTkw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/12049990?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tovl",
      "html_url": "https://github.com/tovl",
      "followers_url": "https://api.github.com/users/tovl/followers",
      "following_url": "https://api.github.com/users/tovl/following{/other_user}",
      "gists_url": "https://api.github.com/users/tovl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tovl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tovl/subscriptions",
      "organizations_url": "https://api.github.com/users/tovl/orgs",
      "repos_url": "https://api.github.com/users/tovl/repos",
      "events_url": "https://api.github.com/users/tovl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tovl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T18:31:44Z",
    "updated_at": "2019-01-28T18:31:44Z",
    "author_association": "CONTRIBUTOR",
    "body": ">I wonder whether that would really be such a showstopper if deploy can be queued.\r\n\r\nRelying on queues for this may actually not be a bad idea. It just needs to be made a bit more convenient. Would it be possible to allow the deploy hotkey to be used as a modifier key? So you get something like:\r\n\r\n- tap f --> \"Deploy\"\r\n- hold f + RMB --> \"MoveDeploy\"\r\n\r\nThen there would really be no need for a special interface anymore and it solves issue #15727 because the player now has full control over the order in which the mines are placed. There is also nothing minelayer specific about it. Other deploy type orders could use this as well. You also don't have to worry about the visualization aspect, because hopefully #14384 will take care of that."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/458254556",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/16069#issuecomment-458254556",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/16069",
    "id": 458254556,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODI1NDU1Ng==",
    "user": {
      "login": "matjaeck",
      "id": 37185497,
      "node_id": "MDQ6VXNlcjM3MTg1NDk3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/37185497?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matjaeck",
      "html_url": "https://github.com/matjaeck",
      "followers_url": "https://api.github.com/users/matjaeck/followers",
      "following_url": "https://api.github.com/users/matjaeck/following{/other_user}",
      "gists_url": "https://api.github.com/users/matjaeck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matjaeck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matjaeck/subscriptions",
      "organizations_url": "https://api.github.com/users/matjaeck/orgs",
      "repos_url": "https://api.github.com/users/matjaeck/repos",
      "events_url": "https://api.github.com/users/matjaeck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matjaeck/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T18:51:03Z",
    "updated_at": "2019-01-28T18:53:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I wonder whether that would really be such a showstopper if deploy can be queued.\r\n\r\nI agree.\r\n\r\n> Would it be possible to allow the deploy hotkey to be used as a modifier key?\r\n\r\nIMO queued deploy orders that work like an on/off (portable chrono is an exception) switch should work identically across all relevant units. So the way I see this working is to while holding down shift, give a move order and then hit f.\r\n\r\nI haven't tested how you handled it in #16060 and #16065 but this should work for all use cases that are covered there."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/458270471",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/16069#issuecomment-458270471",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/16069",
    "id": 458270471,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1ODI3MDQ3MQ==",
    "user": {
      "login": "tovl",
      "id": 12049990,
      "node_id": "MDQ6VXNlcjEyMDQ5OTkw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/12049990?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tovl",
      "html_url": "https://github.com/tovl",
      "followers_url": "https://api.github.com/users/tovl/followers",
      "following_url": "https://api.github.com/users/tovl/following{/other_user}",
      "gists_url": "https://api.github.com/users/tovl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tovl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tovl/subscriptions",
      "organizations_url": "https://api.github.com/users/tovl/orgs",
      "repos_url": "https://api.github.com/users/tovl/repos",
      "events_url": "https://api.github.com/users/tovl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tovl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-28T19:35:03Z",
    "updated_at": "2019-01-28T19:35:03Z",
    "author_association": "CONTRIBUTOR",
    "body": ">while holding down shift, give a move order and then hit f.\r\n\r\nThis is exactly how I've handled it. It is the most obvious and easiest to implement after all. This works quite well, but I think it could be better. \r\n\r\n>queued deploy orders that work like an on/off switch should work identically across all relevant units. \r\n\r\nI agree. IMO this should ideally be applicable to all relevant units or none at all. This would contribute to making minelayers _less_ of an exception.\r\n\r\n>portable chrono is an exception\r\n\r\nPortable chrono could use this as well and then it would no longer be an exception. It would just be the current interface but with alt replaced by f. The current non-hotkeyable deploy interface seems a bit redundant to me.\r\n\r\nAnyway, just throwing ideas at the wall here to see what sticks.\r\n"
  }
]
