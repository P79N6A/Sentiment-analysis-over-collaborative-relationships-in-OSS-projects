[
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/195590538",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/10907#issuecomment-195590538",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/10907",
    "id": 195590538,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NTU5MDUzOA==",
    "user": {
      "login": "RoosterDragon",
      "id": 3399086,
      "node_id": "MDQ6VXNlcjMzOTkwODY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3399086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RoosterDragon",
      "html_url": "https://github.com/RoosterDragon",
      "followers_url": "https://api.github.com/users/RoosterDragon/followers",
      "following_url": "https://api.github.com/users/RoosterDragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/RoosterDragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RoosterDragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RoosterDragon/subscriptions",
      "organizations_url": "https://api.github.com/users/RoosterDragon/orgs",
      "repos_url": "https://api.github.com/users/RoosterDragon/repos",
      "events_url": "https://api.github.com/users/RoosterDragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RoosterDragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-11T22:46:16Z",
    "updated_at": "2016-03-11T22:46:16Z",
    "author_association": "MEMBER",
    "body": "To enforce this, you just need to strengthen the rules:\n\n[This line determines which traits met their requirements](https://github.com/OpenRA/OpenRA/blob/c32bf9f8f7b44a3dcb4ee5c1fd632c43f3892c94/OpenRA.Game/GameRules/ActorInfo.cs#L103). Currently if one or more dependencies are present to satisfy a dependant, that is sufficient.\n\nYou are asking for _all_ of the dependencies to be listed before the dependant. This can be achieved with an extra condition:\n\n``` c#\nvar more = unresolved.Where(u => u.Dependencies.All(d =>\n    resolved.Exists(r => testResolve(d, r.Type)) &&\n    !unresolved.Any(u1 => testResolve(d, u1.Type)))); // This condition here.\n```\n\nThis causes some mods to fail to load though, as they can't meet this constraint. In both cases, `UpgradeManagerInfo` expects all upgradable traits to be listed first, but some upgradable traits have an indirect requirement for the `UpgradeManager` to be defined first.\n\nThis probably indicates the existing setups for these mods are somewhat kinda buggy, but until they are fixed I'm not sure what to do about them. This indicates this issue is probably not a regression, though it is perhaps a bug.\n\nD2k\n\n```\nActorInfo(\"siege_tank\") failed to initialize because of the following:\n\nUnresolved:\nOpenRA.Mods.Common.Traits.UpgradeManagerInfo: { OpenRA.Mods.Common.Traits.IUpgradableInfo }\nOpenRA.Mods.Common.Traits.GainsExperienceInfo: { OpenRA.Mods.Common.Traits.UpgradeManagerInfo }\nOpenRA.Mods.D2k.Traits.CarryableInfo: { OpenRA.Mods.Common.Traits.UpgradeManagerInfo }\nOpenRA.Mods.D2k.Traits.WithDecorationCarryableInfo: { OpenRA.Mods.D2k.Traits.CarryableInfo }\n```\n\ndue to\n\n``` c#\npublic class WithDecorationCarryableInfo : WithDecorationInfo { }\npublic class WithDecorationInfo : UpgradableTraitInfo { }\npublic abstract class UpgradableTraitInfo : IUpgradableInfo { }\n```\n\nRA\n\n```\nActorInfo(\"pbox\") failed to initialize because of the following:\n\nUnresolved:\nOpenRA.Mods.Common.Traits.UpgradeManagerInfo: { OpenRA.Mods.Common.Traits.IUpgradableInfo }\nOpenRA.Mods.Common.Traits.TimedUpgradeBarInfo: { OpenRA.Mods.Common.Traits.UpgradeManagerInfo }\nOpenRA.Mods.Common.Traits.AutoTargetInfo: { OpenRA.Mods.Common.Traits.AttackBaseInfo }\nOpenRA.Mods.Common.Traits.RenderRangeCircleInfo: { OpenRA.Mods.Common.Traits.AttackBaseInfo }\nOpenRA.Mods.Common.Traits.CargoInfo: { OpenRA.Traits.IOccupySpaceInfo, OpenRA.Mods.Common.Traits.UpgradeManagerInfo }\nOpenRA.Mods.Common.Traits.AttackGarrisonedInfo: { OpenRA.Mods.Common.Traits.CargoInfo }\n\n```\n\ndue to\n\n``` c#\npublic abstract class AttackBaseInfo : UpgradableTraitInfo { }\npublic abstract class UpgradableTraitInfo : IUpgradableInfo { }\n```\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/195610806",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/10907#issuecomment-195610806",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/10907",
    "id": 195610806,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NTYxMDgwNg==",
    "user": {
      "login": "GraionDilach",
      "id": 1136302,
      "node_id": "MDQ6VXNlcjExMzYzMDI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1136302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GraionDilach",
      "html_url": "https://github.com/GraionDilach",
      "followers_url": "https://api.github.com/users/GraionDilach/followers",
      "following_url": "https://api.github.com/users/GraionDilach/following{/other_user}",
      "gists_url": "https://api.github.com/users/GraionDilach/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GraionDilach/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GraionDilach/subscriptions",
      "organizations_url": "https://api.github.com/users/GraionDilach/orgs",
      "repos_url": "https://api.github.com/users/GraionDilach/repos",
      "events_url": "https://api.github.com/users/GraionDilach/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GraionDilach/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-12T00:05:43Z",
    "updated_at": "2016-03-12T00:05:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "It wasn't me who claimed this being a regression but @pchote - http://logs.openra.net/?year=2016&month=03&day=09#12:14:03. In both of your example cases I'd put the blame on other traits: `Cargo` and `Carryable` requiring `UpgradeManager`, which is more likely to be the failure causes (although I guess D2k will break more, since all vehicles are carryable and that was just the first case.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/195801234",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/10907#issuecomment-195801234",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/10907",
    "id": 195801234,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5NTgwMTIzNA==",
    "user": {
      "login": "RoosterDragon",
      "id": 3399086,
      "node_id": "MDQ6VXNlcjMzOTkwODY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3399086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RoosterDragon",
      "html_url": "https://github.com/RoosterDragon",
      "followers_url": "https://api.github.com/users/RoosterDragon/followers",
      "following_url": "https://api.github.com/users/RoosterDragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/RoosterDragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RoosterDragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RoosterDragon/subscriptions",
      "organizations_url": "https://api.github.com/users/RoosterDragon/orgs",
      "repos_url": "https://api.github.com/users/RoosterDragon/repos",
      "events_url": "https://api.github.com/users/RoosterDragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RoosterDragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-12T20:05:36Z",
    "updated_at": "2016-03-12T20:05:36Z",
    "author_association": "MEMBER",
    "body": "I agree that the current behaviour seems like a bug - but it seems like we'll need to work out a fix for the default mods first. Something like #8848 might be needed for that though. Blugh.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/199207402",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/10907#issuecomment-199207402",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/10907",
    "id": 199207402,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5OTIwNzQwMg==",
    "user": {
      "login": "RoosterDragon",
      "id": 3399086,
      "node_id": "MDQ6VXNlcjMzOTkwODY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3399086?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RoosterDragon",
      "html_url": "https://github.com/RoosterDragon",
      "followers_url": "https://api.github.com/users/RoosterDragon/followers",
      "following_url": "https://api.github.com/users/RoosterDragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/RoosterDragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RoosterDragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RoosterDragon/subscriptions",
      "organizations_url": "https://api.github.com/users/RoosterDragon/orgs",
      "repos_url": "https://api.github.com/users/RoosterDragon/repos",
      "events_url": "https://api.github.com/users/RoosterDragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RoosterDragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-21T10:02:39Z",
    "updated_at": "2016-03-21T10:02:39Z",
    "author_association": "MEMBER",
    "body": "I haven't thought this through fully, but perhaps we can resolve the circular dependency in `UpgradeMananger` by having it do all the required trait lookup in `Created` instead and removing the requires for it.\n\nIf that's feasible, that would seem to incur the least amount of work..\n"
  }
]
