[
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/423744735",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/15632#issuecomment-423744735",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/15632",
    "id": 423744735,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzc0NDczNQ==",
    "user": {
      "login": "reaperrr",
      "id": 2857877,
      "node_id": "MDQ6VXNlcjI4NTc4Nzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2857877?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reaperrr",
      "html_url": "https://github.com/reaperrr",
      "followers_url": "https://api.github.com/users/reaperrr/followers",
      "following_url": "https://api.github.com/users/reaperrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/reaperrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reaperrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reaperrr/subscriptions",
      "organizations_url": "https://api.github.com/users/reaperrr/orgs",
      "repos_url": "https://api.github.com/users/reaperrr/repos",
      "events_url": "https://api.github.com/users/reaperrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reaperrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-22T13:36:55Z",
    "updated_at": "2018-09-22T13:36:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "Moving to Future milestone as, while Next+1 is probably too optimistic, it should be at least higher priority than a lot of other things, considering the number of bugs related to this."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/457874389",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/15632#issuecomment-457874389",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/15632",
    "id": 457874389,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Nzg3NDM4OQ==",
    "user": {
      "login": "obrakmann",
      "id": 4331210,
      "node_id": "MDQ6VXNlcjQzMzEyMTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4331210?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/obrakmann",
      "html_url": "https://github.com/obrakmann",
      "followers_url": "https://api.github.com/users/obrakmann/followers",
      "following_url": "https://api.github.com/users/obrakmann/following{/other_user}",
      "gists_url": "https://api.github.com/users/obrakmann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/obrakmann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/obrakmann/subscriptions",
      "organizations_url": "https://api.github.com/users/obrakmann/orgs",
      "repos_url": "https://api.github.com/users/obrakmann/repos",
      "events_url": "https://api.github.com/users/obrakmann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/obrakmann/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-26T23:15:13Z",
    "updated_at": "2019-01-26T23:15:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "> We have several bugs caused by unconditionally nulling or replacing activities,\r\n\r\nAgreed. Almost every second invocation of `SequenceActivities` is a source of bugs.\r\n\r\n> To fix this, we'll have to update the activity code to support propagating cancellation through activity sequences (including ChildActivity sequences).\r\n\r\nThis is already happening for `ChildActivity`, and doesn't make sense for `NextActivity`.\r\n\r\nThe problem we're having are probably strictly related to `Move` activities, which cannot be cancelled on the spot. I did not take that into account when I re-wrote the base activity class. Changing `Cancel()` to return a bool was in retrospect kind of a half-assed measure and not well thought through. Nowadays I think that either reverting it to return void, or making it return the state of the activity after attempting to cancel it would be better. To support the `Move` use-case, it would probably also make sense to introduce a `Cancelling` ActivityState."
  }
]
