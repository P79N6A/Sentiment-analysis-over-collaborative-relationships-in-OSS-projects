[
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/93849017",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/7941#issuecomment-93849017",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7941",
    "id": 93849017,
    "node_id": "MDEyOklzc3VlQ29tbWVudDkzODQ5MDE3",
    "user": {
      "login": "LunaticEdit",
      "id": 11513891,
      "node_id": "MDQ6VXNlcjExNTEzODkx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/11513891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LunaticEdit",
      "html_url": "https://github.com/LunaticEdit",
      "followers_url": "https://api.github.com/users/LunaticEdit/followers",
      "following_url": "https://api.github.com/users/LunaticEdit/following{/other_user}",
      "gists_url": "https://api.github.com/users/LunaticEdit/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LunaticEdit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LunaticEdit/subscriptions",
      "organizations_url": "https://api.github.com/users/LunaticEdit/orgs",
      "repos_url": "https://api.github.com/users/LunaticEdit/repos",
      "events_url": "https://api.github.com/users/LunaticEdit/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LunaticEdit/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-16T21:58:11Z",
    "updated_at": "2015-04-16T21:58:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "Just some additional info. It appears the pause state flags somehow get flipped at some point. It smells of a race condition that may have something to do with the fact it sets a local pause state, AND sends the message to the server, which also gets processed as well (in local mode).\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/150681677",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/7941#issuecomment-150681677",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7941",
    "id": 150681677,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MDY4MTY3Nw==",
    "user": {
      "login": "RichSuther",
      "id": 14851039,
      "node_id": "MDQ6VXNlcjE0ODUxMDM5",
      "avatar_url": "https://avatars3.githubusercontent.com/u/14851039?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RichSuther",
      "html_url": "https://github.com/RichSuther",
      "followers_url": "https://api.github.com/users/RichSuther/followers",
      "following_url": "https://api.github.com/users/RichSuther/following{/other_user}",
      "gists_url": "https://api.github.com/users/RichSuther/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RichSuther/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RichSuther/subscriptions",
      "organizations_url": "https://api.github.com/users/RichSuther/orgs",
      "repos_url": "https://api.github.com/users/RichSuther/repos",
      "events_url": "https://api.github.com/users/RichSuther/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RichSuther/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-23T20:29:27Z",
    "updated_at": "2016-07-08T05:53:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Investigated this one a bit, but I see this as problem in two parts.\n\nFirstly to confirm it is indeed being cached on single player\n\nIn MenuButtonsChromeLogic.cs\n\n``` csharp\n        void OpenMenuPanel(MenuButtonWidget button, WidgetArgs widgetArgs = null)\n        {\n            disableSystemButtons = true;\n            var cachedPause = world.PredictedPaused;\n\n            if (button.HideIngameUI)\n                worldRoot.IsVisible = () => false;\n\n            if (button.Pause && world.LobbyInfo.IsSinglePlayer)\n                world.SetPauseState(true);\n\n            widgetArgs = widgetArgs ?? new WidgetArgs();\n            widgetArgs.Add(\"onExit\", () =>\n            {\n                if (button.HideIngameUI)\n                    worldRoot.IsVisible = () => true;\n\n                if (button.Pause && world.LobbyInfo.IsSinglePlayer)\n                    world.SetPauseState(cachedPause);\n\n                menuRoot.RemoveChild(currentWidget);\n                disableSystemButtons = false;\n            });\n\n            currentWidget = Game.LoadWidget(world, button.MenuContainer, menuRoot, widgetArgs);\n        }\n\n```\n\nInside the World class there is a method (SetLocalPausedState - never used?) that skips using the IssueOrder and sets Paused and PredictedPause, this does indeed solve the issue just using SetLocalPausedState(true/false) accordingly.\n\nBut since I'm a newbie to OpenRA development it would be nice if someone more experienced could double check that is indeed an acceptable way to fix this, as I know this relates to communication between threads.\n\nAlso Secondly It should not be possible to hold down a keyboard key and for it to fire every tick of the keyboard this same behaviour is seen throughout the sidebar (Main menu, Beacon placement etc.) I think that in itself is a bug.\n\nAlso forgot to mention this is directly related to the repeat rate of your keyboard, so if you set it higher the faster these buttons will be called.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/150692340",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/7941#issuecomment-150692340",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7941",
    "id": 150692340,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MDY5MjM0MA==",
    "user": {
      "login": "abcdefg30",
      "id": 7704140,
      "node_id": "MDQ6VXNlcjc3MDQxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7704140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abcdefg30",
      "html_url": "https://github.com/abcdefg30",
      "followers_url": "https://api.github.com/users/abcdefg30/followers",
      "following_url": "https://api.github.com/users/abcdefg30/following{/other_user}",
      "gists_url": "https://api.github.com/users/abcdefg30/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abcdefg30/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abcdefg30/subscriptions",
      "organizations_url": "https://api.github.com/users/abcdefg30/orgs",
      "repos_url": "https://api.github.com/users/abcdefg30/repos",
      "events_url": "https://api.github.com/users/abcdefg30/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abcdefg30/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-23T21:04:22Z",
    "updated_at": "2015-10-23T21:04:22Z",
    "author_association": "MEMBER",
    "body": "> Inside the World class there is a method (SetLocalPausedState - never used?) that skips using the IssueOrder and sets Paused and PredictedPause, this does indeed solve the issue just using SetLocalPausedState(true/false) accordingly.\n\nI think it is a good idea to \"just use SetLocalPausedState(true/false)\" and remove `cachedPause` (or is there a good reason why this is needed?). The only case I can think about is manually pausing before pressing `esc`.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/150699112",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/7941#issuecomment-150699112",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7941",
    "id": 150699112,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE1MDY5OTExMg==",
    "user": {
      "login": "RichSuther",
      "id": 14851039,
      "node_id": "MDQ6VXNlcjE0ODUxMDM5",
      "avatar_url": "https://avatars3.githubusercontent.com/u/14851039?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RichSuther",
      "html_url": "https://github.com/RichSuther",
      "followers_url": "https://api.github.com/users/RichSuther/followers",
      "following_url": "https://api.github.com/users/RichSuther/following{/other_user}",
      "gists_url": "https://api.github.com/users/RichSuther/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RichSuther/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RichSuther/subscriptions",
      "organizations_url": "https://api.github.com/users/RichSuther/orgs",
      "repos_url": "https://api.github.com/users/RichSuther/repos",
      "events_url": "https://api.github.com/users/RichSuther/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RichSuther/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-23T21:35:51Z",
    "updated_at": "2015-10-23T21:35:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "I asked on IRC yesterday, @pchote indicated this would be problematic behind the scenes.\n\n```\n[17:18:39]  <pchote> there's asynchronous code going on there\n[17:18:50]  <pchote> its not as simple as just using the world state\n[17:22:56]  <pchote> its there to work around a lag that would otherwise exist\n[17:23:13]  <pchote> it takes ~100ms (even on skirmish) for an order to roundtrip\n[17:23:33]  <pchote> that's long enough to be annoying, waiting for the menu to open\n[17:23:37]  <pchote> its significantly worse on mp games \n[17:28:56]  <pchote> should be straightforward to add a check for when the state is dirty, and behave properly\n[17:29:03]  <pchote> if predicted state != world state\n[17:29:29]  <pchote> not sure off the top of my head what \"behave properly\" involves in this case - without introducing unwanted sideeffects \n[17:33:10]  <pchote> because you can then create a situation where the menu is open locally, but the world thinks its closed\n[17:34:10]  <pchote> I suspect that the better fix is to handle key repeats better \n```\n\nI agree that key repeats should be handled better maybe make that a separate issue?, but it would be nice to ensure the state is guarded from being locked as paused in either case as it may pop up again.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/302864152",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/7941#issuecomment-302864152",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/7941",
    "id": 302864152,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjg2NDE1Mg==",
    "user": {
      "login": "rob-v",
      "id": 16348750,
      "node_id": "MDQ6VXNlcjE2MzQ4NzUw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/16348750?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rob-v",
      "html_url": "https://github.com/rob-v",
      "followers_url": "https://api.github.com/users/rob-v/followers",
      "following_url": "https://api.github.com/users/rob-v/following{/other_user}",
      "gists_url": "https://api.github.com/users/rob-v/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rob-v/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rob-v/subscriptions",
      "organizations_url": "https://api.github.com/users/rob-v/orgs",
      "repos_url": "https://api.github.com/users/rob-v/repos",
      "events_url": "https://api.github.com/users/rob-v/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rob-v/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-20T10:15:23Z",
    "updated_at": "2017-05-20T10:15:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "Fixed by #13323 thanks to recent KeyInput.IsRepeat field."
  }
]
