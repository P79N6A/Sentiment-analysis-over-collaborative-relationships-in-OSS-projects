[
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/140058637",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/9101#issuecomment-140058637",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/9101",
    "id": 140058637,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MDA1ODYzNw==",
    "user": {
      "login": "reaperrr",
      "id": 2857877,
      "node_id": "MDQ6VXNlcjI4NTc4Nzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2857877?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/reaperrr",
      "html_url": "https://github.com/reaperrr",
      "followers_url": "https://api.github.com/users/reaperrr/followers",
      "following_url": "https://api.github.com/users/reaperrr/following{/other_user}",
      "gists_url": "https://api.github.com/users/reaperrr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/reaperrr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reaperrr/subscriptions",
      "organizations_url": "https://api.github.com/users/reaperrr/orgs",
      "repos_url": "https://api.github.com/users/reaperrr/repos",
      "events_url": "https://api.github.com/users/reaperrr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/reaperrr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-14T12:43:28Z",
    "updated_at": "2015-09-14T12:43:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm not sure whether this approach will work in cases where a single property defines the palette name and a boolean property then defines whether that palette should be treated as player palette.\n\n@pchote's suggestion from #8749 sounds more sensible to me.\n`I suggest adding overloads for the palette reference that let you specify as a bool whether or not it is a player palette, or a string that points at the bool field that determines at runtime whether it is a player palette.`\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/140181962",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/9101#issuecomment-140181962",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/9101",
    "id": 140181962,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MDE4MTk2Mg==",
    "user": {
      "login": "Mailaender",
      "id": 756669,
      "node_id": "MDQ6VXNlcjc1NjY2OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/756669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mailaender",
      "html_url": "https://github.com/Mailaender",
      "followers_url": "https://api.github.com/users/Mailaender/followers",
      "following_url": "https://api.github.com/users/Mailaender/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mailaender/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mailaender/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mailaender/subscriptions",
      "organizations_url": "https://api.github.com/users/Mailaender/orgs",
      "repos_url": "https://api.github.com/users/Mailaender/repos",
      "events_url": "https://api.github.com/users/Mailaender/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mailaender/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-14T19:21:55Z",
    "updated_at": "2015-09-14T19:21:55Z",
    "author_association": "MEMBER",
    "body": "It will be easier if we used:\n\n``` csharp\n[PaletteReference] public readonly string Palette = null\n[PlayerPaletteReference] public readonly string PlayerPalette = null\n```\n\neverywhere (at some places we already do) and using what is != null instead of a boolean switch.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/140185834",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/9101#issuecomment-140185834",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/9101",
    "id": 140185834,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MDE4NTgzNA==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-14T19:39:57Z",
    "updated_at": "2015-09-14T19:40:02Z",
    "author_association": "MEMBER",
    "body": "That leads to ambiguities when the mod defines both.  A single string and a bool specifying straight / player avoids that problem.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/140194529",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/9101#issuecomment-140194529",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/9101",
    "id": 140194529,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MDE5NDUyOQ==",
    "user": {
      "login": "atlimit8",
      "id": 4957137,
      "node_id": "MDQ6VXNlcjQ5NTcxMzc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/4957137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/atlimit8",
      "html_url": "https://github.com/atlimit8",
      "followers_url": "https://api.github.com/users/atlimit8/followers",
      "following_url": "https://api.github.com/users/atlimit8/following{/other_user}",
      "gists_url": "https://api.github.com/users/atlimit8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/atlimit8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/atlimit8/subscriptions",
      "organizations_url": "https://api.github.com/users/atlimit8/orgs",
      "repos_url": "https://api.github.com/users/atlimit8/repos",
      "events_url": "https://api.github.com/users/atlimit8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/atlimit8/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-14T20:19:37Z",
    "updated_at": "2015-09-14T20:19:37Z",
    "author_association": "MEMBER",
    "body": "What about a new reusable `struct` such as `OpenRA.Primatives.TaggedString<EnumType>` that is loaded from the MiniYaml code:\n1. _enumValue_`,`_stringValue_\n   `player, player`, `fixed, terrain`, `fixed, chrome`\n2. Another style is to use _stringValue[_`@`_enumValue]_ with the default enum vaule if the `@` is missing:\n   `player@player`, `terrain`, `chrome`\n3. If the `@` is confusing because of its current usage, perhaps _stringValue[_`?`_enumValue]_ with the default enum vaule if the `?` is missing:\n   `player?player`, `terrain`, `chrome`\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/140195522",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/9101#issuecomment-140195522",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/9101",
    "id": 140195522,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MDE5NTUyMg==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-14T20:23:08Z",
    "updated_at": "2015-09-14T20:23:08Z",
    "author_association": "MEMBER",
    "body": "That feels more complicated than it needs to be.  We are already using the pattern i've been asking for for sequences / images.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/140196103",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/9101#issuecomment-140196103",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/9101",
    "id": 140196103,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE0MDE5NjEwMw==",
    "user": {
      "login": "Mailaender",
      "id": 756669,
      "node_id": "MDQ6VXNlcjc1NjY2OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/756669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mailaender",
      "html_url": "https://github.com/Mailaender",
      "followers_url": "https://api.github.com/users/Mailaender/followers",
      "following_url": "https://api.github.com/users/Mailaender/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mailaender/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mailaender/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mailaender/subscriptions",
      "organizations_url": "https://api.github.com/users/Mailaender/orgs",
      "repos_url": "https://api.github.com/users/Mailaender/repos",
      "events_url": "https://api.github.com/users/Mailaender/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mailaender/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-14T20:25:34Z",
    "updated_at": "2015-09-14T20:26:04Z",
    "author_association": "MEMBER",
    "body": "You will then need to explain how your new string@string or string?string filetype works in https://github.com/OpenRA/OpenRA/wiki/Traits and I don't see how that will be easier to lint.\n\n``` csharp\n[PaletteReference(\"IsPlayerPalette\")] public readonly string Palette = null\npublic readonly string IsPlayerPalette = false\n```\n\nwill work after some fiddling with the lint rule and the resulting trait configuration will be understood immediately or at least be more resistant against wrong input.\n"
  }
]
