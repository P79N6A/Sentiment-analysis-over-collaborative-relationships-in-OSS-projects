[
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/293321558",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/13101#issuecomment-293321558",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13101",
    "id": 293321558,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzMyMTU1OA==",
    "user": {
      "login": "abcdefg30",
      "id": 7704140,
      "node_id": "MDQ6VXNlcjc3MDQxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7704140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abcdefg30",
      "html_url": "https://github.com/abcdefg30",
      "followers_url": "https://api.github.com/users/abcdefg30/followers",
      "following_url": "https://api.github.com/users/abcdefg30/following{/other_user}",
      "gists_url": "https://api.github.com/users/abcdefg30/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abcdefg30/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abcdefg30/subscriptions",
      "organizations_url": "https://api.github.com/users/abcdefg30/orgs",
      "repos_url": "https://api.github.com/users/abcdefg30/repos",
      "events_url": "https://api.github.com/users/abcdefg30/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abcdefg30/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-11T16:37:55Z",
    "updated_at": "2017-04-11T16:37:55Z",
    "author_association": "MEMBER",
    "body": "@Phrohdoh suggested to crash instead of silently failing. I wouldn't really oppose that, just need to go through all missions and add the required checks (to be sure we don't introduce crashes). Any more opinions? (If noone objects, I'll just go for it tomorrow.)"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/293349193",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/13101#issuecomment-293349193",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13101",
    "id": 293349193,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzM0OTE5Mw==",
    "user": {
      "login": "Phrohdoh",
      "id": 4861023,
      "node_id": "MDQ6VXNlcjQ4NjEwMjM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4861023?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Phrohdoh",
      "html_url": "https://github.com/Phrohdoh",
      "followers_url": "https://api.github.com/users/Phrohdoh/followers",
      "following_url": "https://api.github.com/users/Phrohdoh/following{/other_user}",
      "gists_url": "https://api.github.com/users/Phrohdoh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Phrohdoh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Phrohdoh/subscriptions",
      "organizations_url": "https://api.github.com/users/Phrohdoh/orgs",
      "repos_url": "https://api.github.com/users/Phrohdoh/repos",
      "events_url": "https://api.github.com/users/Phrohdoh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Phrohdoh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-11T18:05:50Z",
    "updated_at": "2017-04-11T18:05:50Z",
    "author_association": "MEMBER",
    "body": "To clarify:\r\n\r\nIt is my belief that map authors should iterate on their scripts (via playtesting) until all conditions are handled properly instead of passing failures off to the players.\r\n\r\nIf a prerequisite isn't satisfied the logic should probably queue that up if possible not just silently fail which would probably put the world in a state different from what the script expects.\r\n\r\nI'm well aware that we don't have a mechanism right now to queue up a particular structure, place it at (x,y), set the rally point, etc."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/293349235",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/13101#issuecomment-293349235",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13101",
    "id": 293349235,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzM0OTIzNQ==",
    "user": {
      "login": "Phrohdoh",
      "id": 4861023,
      "node_id": "MDQ6VXNlcjQ4NjEwMjM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4861023?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Phrohdoh",
      "html_url": "https://github.com/Phrohdoh",
      "followers_url": "https://api.github.com/users/Phrohdoh/followers",
      "following_url": "https://api.github.com/users/Phrohdoh/following{/other_user}",
      "gists_url": "https://api.github.com/users/Phrohdoh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Phrohdoh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Phrohdoh/subscriptions",
      "organizations_url": "https://api.github.com/users/Phrohdoh/orgs",
      "repos_url": "https://api.github.com/users/Phrohdoh/repos",
      "events_url": "https://api.github.com/users/Phrohdoh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Phrohdoh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-11T18:06:00Z",
    "updated_at": "2017-04-11T18:06:00Z",
    "author_association": "MEMBER",
    "body": "Sorry I didn't mean to close this."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/293361956",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/13101#issuecomment-293361956",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13101",
    "id": 293361956,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzM2MTk1Ng==",
    "user": {
      "login": "GraionDilach",
      "id": 1136302,
      "node_id": "MDQ6VXNlcjExMzYzMDI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1136302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GraionDilach",
      "html_url": "https://github.com/GraionDilach",
      "followers_url": "https://api.github.com/users/GraionDilach/followers",
      "following_url": "https://api.github.com/users/GraionDilach/following{/other_user}",
      "gists_url": "https://api.github.com/users/GraionDilach/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GraionDilach/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GraionDilach/subscriptions",
      "organizations_url": "https://api.github.com/users/GraionDilach/orgs",
      "repos_url": "https://api.github.com/users/GraionDilach/repos",
      "events_url": "https://api.github.com/users/GraionDilach/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GraionDilach/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-11T18:40:04Z",
    "updated_at": "2017-04-11T18:40:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "In an ideal world, @Phrohdoh would be right.\r\n\r\nHowever, map scripting is far, far away from the ideal world. Map scripters lack debuggers and playtesting isn't an option above a certain level. @lovalmidas is a living example of this whom achieved his semi-god map scripting fame half a decade ago by showcasing a mission he couldn't beat himself either.\r\n\r\nRegarding the actual use-case - I haven't seen a justification for the explicit crash. In fact, the Build function's documentation clearly says that if it cannot produce the intended actor - regardless of reason - the function should return false. Crashing is definitely not something the scripter should expect.\r\n\r\nIt would make sense that the Build function should only queue up the actors if all of them have satisfied prerequisites, and only return true in that case with an all-or-nothing mindset."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/293364552",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/13101#issuecomment-293364552",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13101",
    "id": 293364552,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzM2NDU1Mg==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-11T18:49:03Z",
    "updated_at": "2017-04-11T18:49:03Z",
    "author_association": "MEMBER",
    "body": "What @GraionDilach suggests makes some sense, however we should be careful: do we really want the function to behave differently if they lose a required prereq one tick before calling the function vs one tick after calling the function?"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/293421279",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/13101#issuecomment-293421279",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13101",
    "id": 293421279,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzQyMTI3OQ==",
    "user": {
      "login": "abcdefg30",
      "id": 7704140,
      "node_id": "MDQ6VXNlcjc3MDQxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7704140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abcdefg30",
      "html_url": "https://github.com/abcdefg30",
      "followers_url": "https://api.github.com/users/abcdefg30/followers",
      "following_url": "https://api.github.com/users/abcdefg30/following{/other_user}",
      "gists_url": "https://api.github.com/users/abcdefg30/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abcdefg30/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abcdefg30/subscriptions",
      "organizations_url": "https://api.github.com/users/abcdefg30/orgs",
      "repos_url": "https://api.github.com/users/abcdefg30/repos",
      "events_url": "https://api.github.com/users/abcdefg30/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abcdefg30/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-11T22:41:26Z",
    "updated_at": "2017-04-11T22:41:26Z",
    "author_association": "MEMBER",
    "body": "I think a problem here is that `Build` only returns if it could start producing, not if it actually managed to produce something. So, currently, if a prerequisite is lost while building, the `Build` function will have returned true, but the actor won't be produced and the `actionFunc` won't be executed. (In fact, the `actionFunc` will be executed later on, when you produced other actors. E.g. you want to produce 4 actors, where 2 are missing prerequisites. The `actionFunc` will not run after the 2 remaining actors are produced, but after you produce another 2 actors yourself.)\r\n\r\nTl;dr: The entire `Build` function looks rather crap, the more I think about it."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/293541430",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/13101#issuecomment-293541430",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13101",
    "id": 293541430,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzU0MTQzMA==",
    "user": {
      "login": "lovalmidas",
      "id": 13613471,
      "node_id": "MDQ6VXNlcjEzNjEzNDcx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/13613471?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lovalmidas",
      "html_url": "https://github.com/lovalmidas",
      "followers_url": "https://api.github.com/users/lovalmidas/followers",
      "following_url": "https://api.github.com/users/lovalmidas/following{/other_user}",
      "gists_url": "https://api.github.com/users/lovalmidas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lovalmidas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lovalmidas/subscriptions",
      "organizations_url": "https://api.github.com/users/lovalmidas/orgs",
      "repos_url": "https://api.github.com/users/lovalmidas/repos",
      "events_url": "https://api.github.com/users/lovalmidas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lovalmidas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-12T10:48:52Z",
    "updated_at": "2017-04-12T11:03:14Z",
    "author_association": "NONE",
    "body": "(* When I mention \"prerequisites\" of a unit, this includes the factories from which the unit is supposed to be built from.)\r\n\r\nIt looks like this is something that involves more than just the Build() function. Essentially Build() performs a pre-production check, and then there is the actual production before calling actionFunc. From @abcdefg30 's description, it looks like the game simply tries to collect produced units to the team without verifying which team actually called for this unit.\r\n\r\nSo: Pre-production Check -> Production -> Call actionFunc\r\nScripters can catch issues using pre-production checks using the boolean return, but not issues during production.\r\n\r\n**Possible resolutions:**\r\n- The function performs a pre-check on all prerequisites before production, and only begins if it passes (the above scenario might foil this)\r\n- The function stops producing on invalid prerequisites (no crash), and disposes any further handling (no actionFunc call). **(May be similar to current, but no actionFunc call)**\r\n- The function pause on invalid prerequisites, but can continue if the prereq is met later, or stop if a certain time is exceeded. **(similar to RA2, if you abuse the techlevels at mission time)**\r\n- The function skips the actor on invalid prerequisites, and continues to the next.\r\n- The function returns error on invalid prerequisites.\r\n- The function ignores prerequisite checks totally, WW-style. (However, checks for producing factories should still be done)\r\n- Give an extra parameter failureFunc on the function to be called if it encounters invalid prerequisites, or failure in general (e.g. factory exploded).\r\n- A mixture of the above, and give an extra parameter on the Lua function to dictate how such situations should be handled. \r\n\r\nWe might want to decide which resolution would be the way to go.\r\n\r\nThe boolean return will likely have limited usefulness anyway because this function initialises another process (production) over several ticks. Good for pre-checks _only_.\r\n\r\nLogging warnings without crashing on encountering invalid prereqs, like what is done in this PR, will be useful to debug existing (and future) missions. Some of the missions (Allied 07 and Allied 10a) gave the Soviets incomplete tech as well (really, WW? No Soviet dome on Allied 10a?).\r\n\r\n-------------------\r\nI handle AI team production in my Lua script by maintaining a registry array to queue the actors to be produced for a player, and another for the local AI team. The equivalent of my Build function only appends this list with an actortype entry, and the entry is cleared only after if it is built. So, something along this sequence:\r\n\r\n**Pseudo-log**\r\nAITeam1: I want e1, e1, arty.\r\nRegistry: e1, e1, arty.\r\nProduce: e1 (Registry -> e1, arty)\r\nProduce: e1 (Registry -> arty)\r\nPrereq check fail: arty (no dome) (Registry remains: arty)\r\nAITeam2: I want e3, e3, 1tnk\r\nRegistry: arty, e3, e3, 1tnk\r\nPrereq check fail: arty (no dome) (Registry -> e3, e3, 1tnk, arty)\r\nProduce: e3 (Registry -> e3, 1tnk, arty)\r\nProduce: e3 (Registry -> 1tnk, arty)\r\nProduce: 1tnk (Registry -> arty)\r\nAITeam2 has all members, executing script 1...\r\nPrereq check fail: arty (no dome) (Registry remains: arty)\r\n(AI builds dome at some point)\r\nProduce: arty (Registry -> nil)\r\nAITeam1 has all members, executing script 1...\r\n\r\n(Note: I did not use Build() because I was controlling multiple factory per tab production, cost and buildtime modifiers on the Lua)\r\n\r\nI follow this particular way of handling: _The function pause on invalid prerequisites, but can continue if the prereq is met later, or stop if a certain time is exceeded_\r\n\r\nI will most likely refine it. If it works on Lua I will see if I can do the same on the C# level.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/293561057",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/13101#issuecomment-293561057",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13101",
    "id": 293561057,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MzU2MTA1Nw==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-12T12:29:45Z",
    "updated_at": "2017-04-12T12:29:45Z",
    "author_association": "MEMBER",
    "body": "It sounds like what we really need is per-unit callbacks for production complete and production cancelled instead of a single callback when everything is done."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/293871531",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/13101#issuecomment-293871531",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13101",
    "id": 293871531,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5Mzg3MTUzMQ==",
    "user": {
      "login": "abcdefg30",
      "id": 7704140,
      "node_id": "MDQ6VXNlcjc3MDQxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7704140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abcdefg30",
      "html_url": "https://github.com/abcdefg30",
      "followers_url": "https://api.github.com/users/abcdefg30/followers",
      "following_url": "https://api.github.com/users/abcdefg30/following{/other_user}",
      "gists_url": "https://api.github.com/users/abcdefg30/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abcdefg30/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abcdefg30/subscriptions",
      "organizations_url": "https://api.github.com/users/abcdefg30/orgs",
      "repos_url": "https://api.github.com/users/abcdefg30/repos",
      "events_url": "https://api.github.com/users/abcdefg30/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abcdefg30/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-13T11:58:16Z",
    "updated_at": "2017-04-13T11:58:16Z",
    "author_association": "MEMBER",
    "body": "That sounds like we should remove the ability to produce multiple units at once (i.e. give the `Build` function an array of actor types), and rather only support building single actors."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/317473410",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/13101#issuecomment-317473410",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13101",
    "id": 317473410,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzQ3MzQxMA==",
    "user": {
      "login": "forcecore",
      "id": 632278,
      "node_id": "MDQ6VXNlcjYzMjI3OA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/632278?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/forcecore",
      "html_url": "https://github.com/forcecore",
      "followers_url": "https://api.github.com/users/forcecore/followers",
      "following_url": "https://api.github.com/users/forcecore/following{/other_user}",
      "gists_url": "https://api.github.com/users/forcecore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/forcecore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/forcecore/subscriptions",
      "organizations_url": "https://api.github.com/users/forcecore/orgs",
      "repos_url": "https://api.github.com/users/forcecore/repos",
      "events_url": "https://api.github.com/users/forcecore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/forcecore/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-24T16:13:03Z",
    "updated_at": "2017-07-24T19:48:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "But there should be an engine support for building teams.\r\n(Or at least, a default set of Lua functions to support it)\r\nDoing checkups on the Lua side is painful:\r\nhttps://github.com/forcecore/yupgi_alert0/blob/master/lua/ai.py : UTIL_BuildTeam().\r\n  * Remove teams that we can't build\r\n  * remove teams that are started to be produced but got invalid due to the destruction of the prerequisite buildings\r\n  * check what we produced so far to determine what to build next...\r\n\r\nLines 868 through 1088 does that but expecting all mappers and AI scripters to do that doesn't seem right. It took me a day to make things correct and running due to the difficulty of debugging Lua scripts. (Breaking out of the Lua sandbox to see what's going on doesn't help)"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/320930572",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/13101#issuecomment-320930572",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13101",
    "id": 320930572,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyMDkzMDU3Mg==",
    "user": {
      "login": "abcdefg30",
      "id": 7704140,
      "node_id": "MDQ6VXNlcjc3MDQxNDA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7704140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/abcdefg30",
      "html_url": "https://github.com/abcdefg30",
      "followers_url": "https://api.github.com/users/abcdefg30/followers",
      "following_url": "https://api.github.com/users/abcdefg30/following{/other_user}",
      "gists_url": "https://api.github.com/users/abcdefg30/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/abcdefg30/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/abcdefg30/subscriptions",
      "organizations_url": "https://api.github.com/users/abcdefg30/orgs",
      "repos_url": "https://api.github.com/users/abcdefg30/repos",
      "events_url": "https://api.github.com/users/abcdefg30/events{/privacy}",
      "received_events_url": "https://api.github.com/users/abcdefg30/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-08T11:40:48Z",
    "updated_at": "2017-08-08T11:40:48Z",
    "author_association": "MEMBER",
    "body": "This should wait until I added global scripts for all our default mods."
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/331706202",
    "html_url": "https://github.com/OpenRA/OpenRA/pull/13101#issuecomment-331706202",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/13101",
    "id": 331706202,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMTcwNjIwMg==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-09-24T12:16:43Z",
    "updated_at": "2017-09-24T12:16:43Z",
    "author_association": "MEMBER",
    "body": "This has been inactive for quite some time, so moving to the Future milestone and closing to help clean up the PR queue"
  }
]
