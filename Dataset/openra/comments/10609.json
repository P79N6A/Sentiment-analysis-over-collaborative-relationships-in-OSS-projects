[
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/175112093",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/10609#issuecomment-175112093",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/10609",
    "id": 175112093,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NTExMjA5Mw==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-26T16:51:49Z",
    "updated_at": "2016-01-26T17:10:38Z",
    "author_association": "MEMBER",
    "body": "We can fix this, but why not use SHP(TS)?\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/175123011",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/10609#issuecomment-175123011",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/10609",
    "id": 175123011,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NTEyMzAxMQ==",
    "user": {
      "login": "GraionDilach",
      "id": 1136302,
      "node_id": "MDQ6VXNlcjExMzYzMDI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1136302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GraionDilach",
      "html_url": "https://github.com/GraionDilach",
      "followers_url": "https://api.github.com/users/GraionDilach/followers",
      "following_url": "https://api.github.com/users/GraionDilach/following{/other_user}",
      "gists_url": "https://api.github.com/users/GraionDilach/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GraionDilach/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GraionDilach/subscriptions",
      "organizations_url": "https://api.github.com/users/GraionDilach/orgs",
      "repos_url": "https://api.github.com/users/GraionDilach/repos",
      "events_url": "https://api.github.com/users/GraionDilach/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GraionDilach/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-26T17:12:28Z",
    "updated_at": "2016-01-26T17:12:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Funnily under some circumstances, SHP(TD) archives better compression than SHP(TS).\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/175124841",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/10609#issuecomment-175124841",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/10609",
    "id": 175124841,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NTEyNDg0MQ==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-26T17:15:04Z",
    "updated_at": "2016-01-26T17:15:04Z",
    "author_association": "MEMBER",
    "body": "SHP(TS) will perform better in OpenRA because we can completely skip all the empty pixels outside the bounding rectangle of the art (we could implement this at load time for SHP(TD), but it hasn't been done yet).\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/175127485",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/10609#issuecomment-175127485",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/10609",
    "id": 175127485,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NTEyNzQ4NQ==",
    "user": {
      "login": "Apollo-X",
      "id": 16901747,
      "node_id": "MDQ6VXNlcjE2OTAxNzQ3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16901747?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Apollo-X",
      "html_url": "https://github.com/Apollo-X",
      "followers_url": "https://api.github.com/users/Apollo-X/followers",
      "following_url": "https://api.github.com/users/Apollo-X/following{/other_user}",
      "gists_url": "https://api.github.com/users/Apollo-X/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Apollo-X/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Apollo-X/subscriptions",
      "organizations_url": "https://api.github.com/users/Apollo-X/orgs",
      "repos_url": "https://api.github.com/users/Apollo-X/repos",
      "events_url": "https://api.github.com/users/Apollo-X/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Apollo-X/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-26T17:22:54Z",
    "updated_at": "2016-01-26T17:46:45Z",
    "author_association": "NONE",
    "body": "Well, my shp of that was over 1mb as SHP(TS) and 400kb as SHP(TD), guess which compression level I like better?\n\nReason is simple, LCW compresses differencies between frames and SHP(TS) does only compress canvas and background pixels while main pixels are stored as is. Repetitive shapes are better handled by LCW. It is possible to use a trim operation on original artwork prior to SHPing to avoid excess canvas. Besides SHP(TS) only canvas crops excess by color 0, if source footage isn't entirely clear background by that like in case of light effects, the benefits are lower to use it. LCW probably draws the background pixels only once and after frames are only differences to draw on top.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/176178353",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/10609#issuecomment-176178353",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/10609",
    "id": 176178353,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NjE3ODM1Mw==",
    "user": {
      "login": "OmniBlade",
      "id": 2813117,
      "node_id": "MDQ6VXNlcjI4MTMxMTc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2813117?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/OmniBlade",
      "html_url": "https://github.com/OmniBlade",
      "followers_url": "https://api.github.com/users/OmniBlade/followers",
      "following_url": "https://api.github.com/users/OmniBlade/following{/other_user}",
      "gists_url": "https://api.github.com/users/OmniBlade/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/OmniBlade/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/OmniBlade/subscriptions",
      "organizations_url": "https://api.github.com/users/OmniBlade/orgs",
      "repos_url": "https://api.github.com/users/OmniBlade/repos",
      "events_url": "https://api.github.com/users/OmniBlade/events{/privacy}",
      "received_events_url": "https://api.github.com/users/OmniBlade/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-28T13:13:38Z",
    "updated_at": "2016-01-28T13:13:38Z",
    "author_association": "NONE",
    "body": "SHP(TD) also has another limitation, no compressed frame can be > 64kib either as the header stores the size of the largest compressed frame as an unsigned short. If that field was ignored then you can have larger frames I guess, but it will not be within spec.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/176189171",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/10609#issuecomment-176189171",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/10609",
    "id": 176189171,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NjE4OTE3MQ==",
    "user": {
      "login": "pchote",
      "id": 167819,
      "node_id": "MDQ6VXNlcjE2NzgxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/167819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pchote",
      "html_url": "https://github.com/pchote",
      "followers_url": "https://api.github.com/users/pchote/followers",
      "following_url": "https://api.github.com/users/pchote/following{/other_user}",
      "gists_url": "https://api.github.com/users/pchote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pchote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pchote/subscriptions",
      "organizations_url": "https://api.github.com/users/pchote/orgs",
      "repos_url": "https://api.github.com/users/pchote/repos",
      "events_url": "https://api.github.com/users/pchote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pchote/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-28T13:39:34Z",
    "updated_at": "2016-01-28T13:39:34Z",
    "author_association": "MEMBER",
    "body": "If we're going to extend a spec my preference would be to define a new LCW compression format type for Shp(TS).  That's less invasive than ignoring / breaking header flags.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/177084326",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/10609#issuecomment-177084326",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/10609",
    "id": 177084326,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NzA4NDMyNg==",
    "user": {
      "login": "Apollo-X",
      "id": 16901747,
      "node_id": "MDQ6VXNlcjE2OTAxNzQ3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16901747?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Apollo-X",
      "html_url": "https://github.com/Apollo-X",
      "followers_url": "https://api.github.com/users/Apollo-X/followers",
      "following_url": "https://api.github.com/users/Apollo-X/following{/other_user}",
      "gists_url": "https://api.github.com/users/Apollo-X/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Apollo-X/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Apollo-X/subscriptions",
      "organizations_url": "https://api.github.com/users/Apollo-X/orgs",
      "repos_url": "https://api.github.com/users/Apollo-X/repos",
      "events_url": "https://api.github.com/users/Apollo-X/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Apollo-X/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-30T06:15:56Z",
    "updated_at": "2016-01-30T06:18:57Z",
    "author_association": "NONE",
    "body": "I tried out 500x500 resolution single frame encoding, output was 47kb shp(td) with Blade's tool, doing same with ts shp was  145kb (no wonder since we don't compress any of the actual content...), pcx source is 148kb. Okay lets look at that 64kb single frame size limit, my tests show 580x580 achieves 63kb using fairly complex inner glow shape, beyond that we exceed limit. Sadly's Blade's and everyone else's LCW encoder switches to relative offset encoding way too soon(I presume causing the corruption?) than necessary judging by that resolution test.\n\nSHP(TS) does not use LCW encoding at all however, would need a all new encoder tool to make such on top of existing...? unless just mean internal change for altered shp(td) reading.\n\nIf get this thing done, Rewire can run propaganda video loop within ingame display screen in  city landscape for example with good compress for the file :)\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/177352486",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/10609#issuecomment-177352486",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/10609",
    "id": 177352486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NzM1MjQ4Ng==",
    "user": {
      "login": "OmniBlade",
      "id": 2813117,
      "node_id": "MDQ6VXNlcjI4MTMxMTc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2813117?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/OmniBlade",
      "html_url": "https://github.com/OmniBlade",
      "followers_url": "https://api.github.com/users/OmniBlade/followers",
      "following_url": "https://api.github.com/users/OmniBlade/following{/other_user}",
      "gists_url": "https://api.github.com/users/OmniBlade/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/OmniBlade/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/OmniBlade/subscriptions",
      "organizations_url": "https://api.github.com/users/OmniBlade/orgs",
      "repos_url": "https://api.github.com/users/OmniBlade/repos",
      "events_url": "https://api.github.com/users/OmniBlade/events{/privacy}",
      "received_events_url": "https://api.github.com/users/OmniBlade/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-31T01:04:01Z",
    "updated_at": "2016-01-31T01:04:01Z",
    "author_association": "NONE",
    "body": "I don't think anyone else's encoder even tries to encode to the extended format, I'm fairly certain at least XCC doesn't and last I checked the OpenRA encoder didn't implement the affected commands anyway. The problem is that the extended format is for when the SOURCE data is >64Kb, but the decoder in both RA and OpenRA doesn't expect the data to be in the extended format at all and doesn't know how long the decoded data will be. The fact of the matter is, the TD format wasn't engineered to handle frames that contain >64Kb of data and we probably shouldn't try and cram it in.\n\nShp(TS) doesn't use LCW at all currently, that is true, but the file format has flags that tell the decoder what format the frames are encoded in. OpenRA could use any unused bits in the flag entry to define a flag for LCW compressed frames. It would need new tools though (or changes to existing ones) and the new Shp(TS) files would not actually work correctly with TS or RA2/YR anymore without hacks to extend their decoding routines.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/177387342",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/10609#issuecomment-177387342",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/10609",
    "id": 177387342,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NzM4NzM0Mg==",
    "user": {
      "login": "Apollo-X",
      "id": 16901747,
      "node_id": "MDQ6VXNlcjE2OTAxNzQ3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/16901747?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Apollo-X",
      "html_url": "https://github.com/Apollo-X",
      "followers_url": "https://api.github.com/users/Apollo-X/followers",
      "following_url": "https://api.github.com/users/Apollo-X/following{/other_user}",
      "gists_url": "https://api.github.com/users/Apollo-X/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Apollo-X/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Apollo-X/subscriptions",
      "organizations_url": "https://api.github.com/users/Apollo-X/orgs",
      "repos_url": "https://api.github.com/users/Apollo-X/repos",
      "events_url": "https://api.github.com/users/Apollo-X/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Apollo-X/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-31T04:33:33Z",
    "updated_at": "2016-01-31T04:45:22Z",
    "author_association": "NONE",
    "body": "I am well aware how Shp(TS) format works, setting a changed flag for format field would work very well, just could use some clever thinking for the values if do combination methods. Actually a combination of TS canvas crop/RLE methods with LCW/XorDelta would yield the best compress ever but likely combining them all in one is me just asking for too much (not sure how practical...) but something to consider here about merge as pchote mentioned about skipping the background pixels being shp(ts) advantage where LCW/XorDelta lacks this AFAIK. Hmm, more I think about this, it may be best keep it simple and separate as I am unsure how LCW/XorDelta should react if the encoded frame size keeps changing as it is cropped to used pixels when comparing previous frame to draw changing pixels on top.\n\nI don't think TS/RA2 support is necessarily needed at all but should someone wanna implement that thats fine. I just think OpenRA has key opportunity here to utilize the efficient methods together as already got the decoding routines basicly in place. LCW Implemented in shp(ts) could be made use the extended type encoding only by relative offsets for all of data as whole 64kb limit was shortsighted WW thing and we'd erase unnecessary switching need with decoding routine to check null byte and allow encode any size frames.\n"
  },
  {
    "url": "https://api.github.com/repos/OpenRA/OpenRA/issues/comments/177487170",
    "html_url": "https://github.com/OpenRA/OpenRA/issues/10609#issuecomment-177487170",
    "issue_url": "https://api.github.com/repos/OpenRA/OpenRA/issues/10609",
    "id": 177487170,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE3NzQ4NzE3MA==",
    "user": {
      "login": "OmniBlade",
      "id": 2813117,
      "node_id": "MDQ6VXNlcjI4MTMxMTc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2813117?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/OmniBlade",
      "html_url": "https://github.com/OmniBlade",
      "followers_url": "https://api.github.com/users/OmniBlade/followers",
      "following_url": "https://api.github.com/users/OmniBlade/following{/other_user}",
      "gists_url": "https://api.github.com/users/OmniBlade/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/OmniBlade/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/OmniBlade/subscriptions",
      "organizations_url": "https://api.github.com/users/OmniBlade/orgs",
      "repos_url": "https://api.github.com/users/OmniBlade/repos",
      "events_url": "https://api.github.com/users/OmniBlade/events{/privacy}",
      "received_events_url": "https://api.github.com/users/OmniBlade/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-31T12:20:42Z",
    "updated_at": "2016-01-31T12:20:42Z",
    "author_association": "NONE",
    "body": "The Dune2 shp format also implements a simple RLE on 0 bytes in its images before it applies LCW compression, no reason an extended TS format couldn't have the option to do the same. LCW won't care about the changing frame sizes, it just compresses data, only XORDelta will, but we haven't involved that in this discussion so far and your tests have been on single frames, already showing significant space savings.\n\nAll this is very theoretical though, unless the OpenRA guys want to spend time implementing this in the engine and writing a new tool to write the new format (or extended an existing one), the discussion is somewhat moot.\n"
  }
]
